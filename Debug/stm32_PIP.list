
stm32_PIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e0c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007078  08007078  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007078  08007078  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007078  08007078  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  20000074  080070f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  080070f4  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af94  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396c  00000000  00000000  0003b031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003fee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f3c  00000000  00000000  000412d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170e3  00000000  00000000  00045214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c26  00000000  00000000  0005c2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  000f5f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f04 	.word	0x08006f04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006f04 	.word	0x08006f04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fd2b 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f85d 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 fa09 	bl	8000584 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000172:	f000 f9bf 	bl	80004f4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000176:	f000 f915 	bl	80003a4 <MX_TIM1_Init>
  MX_DMA_Init();
 800017a:	f000 f9e5 	bl	8000548 <MX_DMA_Init>
  MX_ADC1_Init();
 800017e:	f000 f8ad 	bl	80002dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000182:	f003 fb23 	bl	80037cc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueDataADC */
  QueueDataADCHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueDataADC_attributes);
 8000186:	4a1d      	ldr	r2, [pc, #116]	; (80001fc <main+0x9c>)
 8000188:	2102      	movs	r1, #2
 800018a:	2010      	movs	r0, #16
 800018c:	f003 fc8e 	bl	8003aac <osMessageQueueNew>
 8000190:	4603      	mov	r3, r0
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <main+0xa0>)
 8000194:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  if ( QueueDataADCHandle == 0)  // Queue not created
 8000196:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <main+0xa0>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d10d      	bne.n	80001ba <main+0x5a>
  {
	  char *str = "Unable to create Integer Queue\n\n";
 800019e:	4b19      	ldr	r3, [pc, #100]	; (8000204 <main+0xa4>)
 80001a0:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80001a2:	6838      	ldr	r0, [r7, #0]
 80001a4:	f7ff ffd4 	bl	8000150 <strlen>
 80001a8:	4603      	mov	r3, r0
 80001aa:	b29a      	uxth	r2, r3
 80001ac:	f04f 33ff 	mov.w	r3, #4294967295
 80001b0:	6839      	ldr	r1, [r7, #0]
 80001b2:	4815      	ldr	r0, [pc, #84]	; (8000208 <main+0xa8>)
 80001b4:	f003 f9a0 	bl	80034f8 <HAL_UART_Transmit>
 80001b8:	e00c      	b.n	80001d4 <main+0x74>
  }
  else
  {
	  char *str = "Integer Queue Created successfully\n\n";
 80001ba:	4b14      	ldr	r3, [pc, #80]	; (800020c <main+0xac>)
 80001bc:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80001be:	6878      	ldr	r0, [r7, #4]
 80001c0:	f7ff ffc6 	bl	8000150 <strlen>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480e      	ldr	r0, [pc, #56]	; (8000208 <main+0xa8>)
 80001d0:	f003 f992 	bl	80034f8 <HAL_UART_Transmit>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Modbus */
  ModbusHandle = osThreadNew(StartModbus, NULL, &Modbus_attributes);
 80001d4:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <main+0xb0>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	480e      	ldr	r0, [pc, #56]	; (8000214 <main+0xb4>)
 80001da:	f003 fb5d 	bl	8003898 <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <main+0xb8>)
 80001e2:	6013      	str	r3, [r2, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(StartADC, NULL, &ADC_attributes);
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <main+0xbc>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <main+0xc0>)
 80001ea:	f003 fb55 	bl	8003898 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <main+0xc4>)
 80001f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001f4:	f003 fb1c 	bl	8003830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x98>
 80001fa:	bf00      	nop
 80001fc:	08007014 	.word	0x08007014
 8000200:	20001aa8 	.word	0x20001aa8
 8000204:	08006f38 	.word	0x08006f38
 8000208:	200019a4 	.word	0x200019a4
 800020c:	08006f5c 	.word	0x08006f5c
 8000210:	08006fcc 	.word	0x08006fcc
 8000214:	08000669 	.word	0x08000669
 8000218:	20001aac 	.word	0x20001aac
 800021c:	08006ff0 	.word	0x08006ff0
 8000220:	080006d5 	.word	0x080006d5
 8000224:	20001aa4 	.word	0x20001aa4

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f006 fa30 	bl	800669c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000274:	2300      	movs	r3, #0
 8000276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fe5f 	bl	8001f40 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000288:	f000 fa60 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 f8c9 	bl	8002440 <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002b4:	f000 fa4a 	bl	800074c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002b8:	2302      	movs	r3, #2
 80002ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fa86 	bl	80027d4 <HAL_RCCEx_PeriphCLKConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002ce:	f000 fa3d 	bl	800074c <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3750      	adds	r7, #80	; 0x50
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ec:	4b2b      	ldr	r3, [pc, #172]	; (800039c <MX_ADC1_Init+0xc0>)
 80002ee:	4a2c      	ldr	r2, [pc, #176]	; (80003a0 <MX_ADC1_Init+0xc4>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002f2:	4b2a      	ldr	r3, [pc, #168]	; (800039c <MX_ADC1_Init+0xc0>)
 80002f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <MX_ADC1_Init+0xc0>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000300:	4b26      	ldr	r3, [pc, #152]	; (800039c <MX_ADC1_Init+0xc0>)
 8000302:	2200      	movs	r2, #0
 8000304:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000306:	4b25      	ldr	r3, [pc, #148]	; (800039c <MX_ADC1_Init+0xc0>)
 8000308:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030e:	4b23      	ldr	r3, [pc, #140]	; (800039c <MX_ADC1_Init+0xc0>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000314:	4b21      	ldr	r3, [pc, #132]	; (800039c <MX_ADC1_Init+0xc0>)
 8000316:	2204      	movs	r2, #4
 8000318:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031a:	4820      	ldr	r0, [pc, #128]	; (800039c <MX_ADC1_Init+0xc0>)
 800031c:	f000 fc82 	bl	8000c24 <HAL_ADC_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000326:	f000 fa11 	bl	800074c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	4818      	ldr	r0, [pc, #96]	; (800039c <MX_ADC1_Init+0xc0>)
 800033c:	f000 ff5a 	bl	80011f4 <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 fa01 	bl	800074c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800034a:	2302      	movs	r3, #2
 800034c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4619      	mov	r1, r3
 8000352:	4812      	ldr	r0, [pc, #72]	; (800039c <MX_ADC1_Init+0xc0>)
 8000354:	f000 ff4e 	bl	80011f4 <HAL_ADC_ConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800035e:	f000 f9f5 	bl	800074c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000362:	2303      	movs	r3, #3
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	480c      	ldr	r0, [pc, #48]	; (800039c <MX_ADC1_Init+0xc0>)
 800036c:	f000 ff42 	bl	80011f4 <HAL_ADC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000376:	f000 f9e9 	bl	800074c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800037a:	2304      	movs	r3, #4
 800037c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	4806      	ldr	r0, [pc, #24]	; (800039c <MX_ADC1_Init+0xc0>)
 8000384:	f000 ff36 	bl	80011f4 <HAL_ADC_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800038e:	f000 f9dd 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200019e8 	.word	0x200019e8
 80003a0:	40012400 	.word	0x40012400

080003a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b092      	sub	sp, #72	; 0x48
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	615a      	str	r2, [r3, #20]
 80003c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2220      	movs	r2, #32
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f006 f964 	bl	800669c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d4:	4b45      	ldr	r3, [pc, #276]	; (80004ec <MX_TIM1_Init+0x148>)
 80003d6:	4a46      	ldr	r2, [pc, #280]	; (80004f0 <MX_TIM1_Init+0x14c>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003da:	4b44      	ldr	r3, [pc, #272]	; (80004ec <MX_TIM1_Init+0x148>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b42      	ldr	r3, [pc, #264]	; (80004ec <MX_TIM1_Init+0x148>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003e6:	4b41      	ldr	r3, [pc, #260]	; (80004ec <MX_TIM1_Init+0x148>)
 80003e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b3f      	ldr	r3, [pc, #252]	; (80004ec <MX_TIM1_Init+0x148>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f4:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <MX_TIM1_Init+0x148>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b3c      	ldr	r3, [pc, #240]	; (80004ec <MX_TIM1_Init+0x148>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000400:	483a      	ldr	r0, [pc, #232]	; (80004ec <MX_TIM1_Init+0x148>)
 8000402:	f002 fb47 	bl	8002a94 <HAL_TIM_PWM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800040c:	f000 f99e 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000418:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800041c:	4619      	mov	r1, r3
 800041e:	4833      	ldr	r0, [pc, #204]	; (80004ec <MX_TIM1_Init+0x148>)
 8000420:	f002 ff5c 	bl	80032dc <HAL_TIMEx_MasterConfigSynchronization>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800042a:	f000 f98f 	bl	800074c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800042e:	2360      	movs	r3, #96	; 0x60
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000436:	2300      	movs	r3, #0
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800043a:	2300      	movs	r3, #0
 800043c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043e:	2300      	movs	r3, #0
 8000440:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000442:	2300      	movs	r3, #0
 8000444:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800044a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044e:	2200      	movs	r2, #0
 8000450:	4619      	mov	r1, r3
 8000452:	4826      	ldr	r0, [pc, #152]	; (80004ec <MX_TIM1_Init+0x148>)
 8000454:	f002 fc76 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800045e:	f000 f975 	bl	800074c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000466:	2204      	movs	r2, #4
 8000468:	4619      	mov	r1, r3
 800046a:	4820      	ldr	r0, [pc, #128]	; (80004ec <MX_TIM1_Init+0x148>)
 800046c:	f002 fc6a 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000476:	f000 f969 	bl	800074c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800047a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800047e:	2208      	movs	r2, #8
 8000480:	4619      	mov	r1, r3
 8000482:	481a      	ldr	r0, [pc, #104]	; (80004ec <MX_TIM1_Init+0x148>)
 8000484:	f002 fc5e 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800048e:	f000 f95d 	bl	800074c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000496:	220c      	movs	r2, #12
 8000498:	4619      	mov	r1, r3
 800049a:	4814      	ldr	r0, [pc, #80]	; (80004ec <MX_TIM1_Init+0x148>)
 800049c:	f002 fc52 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80004a6:	f000 f951 	bl	800074c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	4807      	ldr	r0, [pc, #28]	; (80004ec <MX_TIM1_Init+0x148>)
 80004ce:	f002 ff63 	bl	8003398 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80004d8:	f000 f938 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <MX_TIM1_Init+0x148>)
 80004de:	f000 fa01 	bl	80008e4 <HAL_TIM_MspPostInit>

}
 80004e2:	bf00      	nop
 80004e4:	3748      	adds	r7, #72	; 0x48
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20001a5c 	.word	0x20001a5c
 80004f0:	40012c00 	.word	0x40012c00

080004f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <MX_USART3_UART_Init+0x50>)
 80004fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 8000500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000504:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_USART3_UART_Init+0x4c>)
 800052c:	f002 ff97 	bl	800345e <HAL_UART_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000536:	f000 f909 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200019a4 	.word	0x200019a4
 8000544:	40004800 	.word	0x40004800

08000548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_DMA_Init+0x38>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <MX_DMA_Init+0x38>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_DMA_Init+0x38>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2105      	movs	r1, #5
 800056a:	200b      	movs	r0, #11
 800056c:	f001 f8f9 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000570:	200b      	movs	r0, #11
 8000572:	f001 f912 	bl	800179a <HAL_NVIC_EnableIRQ>

}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_GPIO_Init+0xd4>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a2e      	ldr	r2, [pc, #184]	; (8000658 <MX_GPIO_Init+0xd4>)
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_GPIO_Init+0xd4>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0320 	and.w	r3, r3, #32
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_GPIO_Init+0xd4>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <MX_GPIO_Init+0xd4>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_GPIO_Init+0xd4>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_GPIO_Init+0xd4>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <MX_GPIO_Init+0xd4>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_GPIO_Init+0xd4>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 80005e0:	2200      	movs	r2, #0
 80005e2:	f24f 0118 	movw	r1, #61464	; 0xf018
 80005e6:	481d      	ldr	r0, [pc, #116]	; (800065c <MX_GPIO_Init+0xd8>)
 80005e8:	f001 fc92 	bl	8001f10 <HAL_GPIO_WritePin>
                          |OUT3_2_Pin|OUT3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT4_1_Pin|OUT4_2_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80005f2:	481b      	ldr	r0, [pc, #108]	; (8000660 <MX_GPIO_Init+0xdc>)
 80005f4:	f001 fc8c 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT2_1_Pin OUT2_2_Pin OUT1_2_Pin OUT1_1_Pin
                           OUT3_2_Pin OUT3_1_Pin */
  GPIO_InitStruct.Pin = OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 80005f8:	f24f 0318 	movw	r3, #61464	; 0xf018
 80005fc:	613b      	str	r3, [r7, #16]
                          |OUT3_2_Pin|OUT3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2302      	movs	r3, #2
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4619      	mov	r1, r3
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <MX_GPIO_Init+0xd8>)
 8000612:	f001 faf9 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT4_1_Pin OUT4_2_Pin */
  GPIO_InitStruct.Pin = OUT4_1_Pin|OUT4_2_Pin;
 8000616:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <MX_GPIO_Init+0xdc>)
 8000630:	f001 faea 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : D01_Encoder_Pin D02_Encoder_Pin D03_Encoder_Pin D04_Encoder_Pin */
  GPIO_InitStruct.Pin = D01_Encoder_Pin|D02_Encoder_Pin|D03_Encoder_Pin|D04_Encoder_Pin;
 8000634:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_GPIO_Init+0xe0>)
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_GPIO_Init+0xd8>)
 800064a:	f001 fadd 	bl	8001c08 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	40010c00 	.word	0x40010c00
 8000660:	40010800 	.word	0x40010800
 8000664:	10110000 	.word	0x10110000

08000668 <StartModbus>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartModbus */
void StartModbus(void *argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	; 0x58
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char buff[64];
uint16_t valor =1234;
 8000670:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8000674:	81fb      	strh	r3, [r7, #14]
osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
//	  osMessageGet( QueueDataADCHandle, &valor, 0 );
	prt=pvPortMalloc(100*sizeof (char));
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f005 fe00 	bl	800627c <pvPortMalloc>
 800067c:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(prt,"Dato leido de la Queue: %u \n",valor);
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	461a      	mov	r2, r3
 8000682:	4911      	ldr	r1, [pc, #68]	; (80006c8 <StartModbus+0x60>)
 8000684:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000686:	f006 f811 	bl	80066ac <siprintf>

	 status = osMessageQueueGet(QueueDataADCHandle, &valor, NULL, 5000);   // wait for message
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <StartModbus+0x64>)
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	f107 010e 	add.w	r1, r7, #14
 8000692:	f241 3388 	movw	r3, #5000	; 0x1388
 8000696:	2200      	movs	r2, #0
 8000698:	f003 fb02 	bl	8003ca0 <osMessageQueueGet>
 800069c:	6538      	str	r0, [r7, #80]	; 0x50
	    if (status == osOK) {
 800069e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10c      	bne.n	80006be <StartModbus+0x56>
	HAL_UART_Transmit(&huart3, (uint8_t*)prt, strlen(prt), 100);
 80006a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80006a6:	f7ff fd53 	bl	8000150 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	2364      	movs	r3, #100	; 0x64
 80006b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006b2:	4807      	ldr	r0, [pc, #28]	; (80006d0 <StartModbus+0x68>)
 80006b4:	f002 ff20 	bl	80034f8 <HAL_UART_Transmit>
	vPortFree(prt);
 80006b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80006ba:	f005 fea3 	bl	8006404 <vPortFree>
	      ; // process data
	    }

    osDelay(900);
 80006be:	f44f 7061 	mov.w	r0, #900	; 0x384
 80006c2:	f003 f9c5 	bl	8003a50 <osDelay>
	prt=pvPortMalloc(100*sizeof (char));
 80006c6:	e7d6      	b.n	8000676 <StartModbus+0xe>
 80006c8:	08006f84 	.word	0x08006f84
 80006cc:	20001aa8 	.word	0x20001aa8
 80006d0:	200019a4 	.word	0x200019a4

080006d4 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */

	uint16_t adc1[4];
	HAL_ADC_Start_DMA(&hadc1, adc1,sizeof (adc1));
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2208      	movs	r2, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	480e      	ldr	r0, [pc, #56]	; (8000720 <StartADC+0x4c>)
 80006e6:	f000 fb75 	bl	8000dd4 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Stop_DMA(&hadc1);
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <StartADC+0x4c>)
 80006ec:	f000 fc50 	bl	8000f90 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc1,sizeof (adc1));
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2208      	movs	r2, #8
 80006f6:	4619      	mov	r1, r3
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <StartADC+0x4c>)
 80006fa:	f000 fb6b 	bl	8000dd4 <HAL_ADC_Start_DMA>
//	adc1 = HAL_ADC_PollForConversion(&hadc1, 5000);
//	osMessageQueuePut(QueueDataADCHandle, &adc1, 5000);
	osMessageQueuePut(QueueDataADCHandle, &adc1[0], NULL, 5000);
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <StartADC+0x50>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 0108 	add.w	r1, r7, #8
 8000706:	f241 3388 	movw	r3, #5000	; 0x1388
 800070a:	2200      	movs	r2, #0
 800070c:	f003 fa54 	bl	8003bb8 <osMessageQueuePut>
	osThreadYield();
 8000710:	f003 f96c 	bl	80039ec <osThreadYield>
    osDelay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000718:	f003 f99a 	bl	8003a50 <osDelay>
	HAL_ADC_Stop_DMA(&hadc1);
 800071c:	e7e5      	b.n	80006ea <StartADC+0x16>
 800071e:	bf00      	nop
 8000720:	200019e8 	.word	0x200019e8
 8000724:	20001aa8 	.word	0x20001aa8

08000728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  // ESTO ES DE FREERTOS
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d101      	bne.n	800073e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073a:	f000 fa57 	bl	8000bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40000800 	.word	0x40000800

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_MspInit+0x68>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_MspInit+0x68>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_MspInit+0x68>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_MspInit+0x68>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <HAL_MspInit+0x68>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x68>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	210f      	movs	r1, #15
 8000792:	f06f 0001 	mvn.w	r0, #1
 8000796:	f000 ffe4 	bl	8001762 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_MspInit+0x6c>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_MspInit+0x6c>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010000 	.word	0x40010000

080007c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <HAL_ADC_MspInit+0xcc>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d151      	bne.n	800088c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_ADC_MspInit+0xd0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <HAL_ADC_MspInit+0xd0>)
 80007ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <HAL_ADC_MspInit+0xd0>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <HAL_ADC_MspInit+0xd0>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a24      	ldr	r2, [pc, #144]	; (8000898 <HAL_ADC_MspInit+0xd0>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <HAL_ADC_MspInit+0xd0>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000818:	230f      	movs	r3, #15
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081c:	2303      	movs	r3, #3
 800081e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	481d      	ldr	r0, [pc, #116]	; (800089c <HAL_ADC_MspInit+0xd4>)
 8000828:	f001 f9ee 	bl	8001c08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 800082e:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <HAL_ADC_MspInit+0xdc>)
 8000830:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 8000846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 800084e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000852:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000860:	480f      	ldr	r0, [pc, #60]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 8000862:	f000 ffa9 	bl	80017b8 <HAL_DMA_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800086c:	f7ff ff6e 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 8000874:	621a      	str	r2, [r3, #32]
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_ADC_MspInit+0xd8>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2105      	movs	r1, #5
 8000880:	2012      	movs	r0, #18
 8000882:	f000 ff6e 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000886:	2012      	movs	r0, #18
 8000888:	f000 ff87 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40012400 	.word	0x40012400
 8000898:	40021000 	.word	0x40021000
 800089c:	40010800 	.word	0x40010800
 80008a0:	20001a18 	.word	0x20001a18
 80008a4:	40020008 	.word	0x40020008

080008a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a09      	ldr	r2, [pc, #36]	; (80008dc <HAL_TIM_PWM_MspInit+0x34>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10b      	bne.n	80008d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_TIM_PWM_MspInit+0x38>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_TIM_PWM_MspInit+0x38>)
 80008c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_TIM_PWM_MspInit+0x38>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40012c00 	.word	0x40012c00
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_TIM_MspPostInit+0x5c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d118      	bne.n	8000936 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_TIM_MspPostInit+0x60>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_TIM_MspPostInit+0x60>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_TIM_MspPostInit+0x60>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_01_Pin|PWM_02_Pin|PWM_03_Pin|PWM_04_Pin;
 800091c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000920:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <HAL_TIM_MspPostInit+0x64>)
 8000932:	f001 f969 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40012c00 	.word	0x40012c00
 8000944:	40021000 	.word	0x40021000
 8000948:	40010800 	.word	0x40010800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <HAL_UART_MspInit+0x8c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d131      	bne.n	80009d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <HAL_UART_MspInit+0x90>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <HAL_UART_MspInit+0x90>)
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	61d3      	str	r3, [r2, #28]
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_UART_MspInit+0x90>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_UART_MspInit+0x90>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <HAL_UART_MspInit+0x90>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_UART_MspInit+0x90>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <HAL_UART_MspInit+0x94>)
 80009b2:	f001 f929 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <HAL_UART_MspInit+0x94>)
 80009cc:	f001 f91c 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40004800 	.word	0x40004800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	; 0x30
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	201e      	movs	r0, #30
 80009fa:	f000 feb2 	bl	8001762 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009fe:	201e      	movs	r0, #30
 8000a00:	f000 fecb 	bl	800179a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <HAL_InitTick+0xa0>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <HAL_InitTick+0xa0>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	61d3      	str	r3, [r2, #28]
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_InitTick+0xa0>)
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1c:	f107 0210 	add.w	r2, r7, #16
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fe86 	bl	8002738 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a2c:	f001 fe5c 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8000a30:	4603      	mov	r3, r0
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <HAL_InitTick+0xa4>)
 8000a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3e:	0c9b      	lsrs	r3, r3, #18
 8000a40:	3b01      	subs	r3, #1
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <HAL_InitTick+0xac>)
 8000a48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a50:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a56:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a66:	f001 ff6b 	bl	8002940 <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d104      	bne.n	8000a7a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a72:	f001 ffbd 	bl	80029f0 <HAL_TIM_Base_Start_IT>
 8000a76:	4603      	mov	r3, r0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3730      	adds	r7, #48	; 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000
 8000a88:	431bde83 	.word	0x431bde83
 8000a8c:	20001ab0 	.word	0x20001ab0
 8000a90:	40000800 	.word	0x40000800

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
	...

08000ac0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ac6:	f000 ff6b 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20001a18 	.word	0x20001a18

08000ad4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <ADC1_2_IRQHandler+0x10>)
 8000ada:	f000 faa4 	bl	8001026 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200019e8 	.word	0x200019e8

08000ae8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM4_IRQHandler+0x10>)
 8000aee:	f002 f820 	bl	8002b32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20001ab0 	.word	0x20001ab0

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f005 fd7e 	bl	800662c <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20005000 	.word	0x20005000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	20000090 	.word	0x20000090
 8000b64:	20001b50 	.word	0x20001b50

08000b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9a:	f7ff ffe5 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f005 fd4b 	bl	8006638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fadd 	bl	8000160 <main>
  bx lr
 8000ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bb0:	08007080 	.word	0x08007080
  ldr r2, =_sbss
 8000bb4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bb8:	20001b4c 	.word	0x20001b4c

08000bbc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <CAN1_RX1_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x28>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x28>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 fdbb 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f7ff ff04 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fdbc 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x1c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x20>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <HAL_IncTick+0x20>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20001af8 	.word	0x20001af8

08000c10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <HAL_GetTick+0x10>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	20001af8 	.word	0x20001af8

08000c24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e0be      	b.n	8000dc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d109      	bne.n	8000c68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fdb0 	bl	80007c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fc15 	bl	8001498 <ADC_ConversionStop_Disable>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8099 	bne.w	8000db2 <HAL_ADC_Init+0x18e>
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8095 	bne.w	8000db2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c90:	f023 0302 	bic.w	r3, r3, #2
 8000c94:	f043 0202 	orr.w	r2, r3, #2
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ca4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7b1b      	ldrb	r3, [r3, #12]
 8000caa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cbc:	d003      	beq.n	8000cc6 <HAL_ADC_Init+0xa2>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d102      	bne.n	8000ccc <HAL_ADC_Init+0xa8>
 8000cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cca:	e000      	b.n	8000cce <HAL_ADC_Init+0xaa>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7d1b      	ldrb	r3, [r3, #20]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d119      	bne.n	8000d10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7b1b      	ldrb	r3, [r3, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d109      	bne.n	8000cf8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	035a      	lsls	r2, r3, #13
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	e00b      	b.n	8000d10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f043 0220 	orr.w	r2, r3, #32
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	f043 0201 	orr.w	r2, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <HAL_ADC_Init+0x1a8>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	6812      	ldr	r2, [r2, #0]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d40:	d003      	beq.n	8000d4a <HAL_ADC_Init+0x126>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d104      	bne.n	8000d54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	051b      	lsls	r3, r3, #20
 8000d52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_ADC_Init+0x1ac>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d10b      	bne.n	8000d90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	f023 0303 	bic.w	r3, r3, #3
 8000d86:	f043 0201 	orr.w	r2, r3, #1
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d8e:	e018      	b.n	8000dc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	f023 0312 	bic.w	r3, r3, #18
 8000d98:	f043 0210 	orr.w	r2, r3, #16
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	f043 0201 	orr.w	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000db0:	e007      	b.n	8000dc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	f043 0210 	orr.w	r2, r3, #16
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	ffe1f7fd 	.word	0xffe1f7fd
 8000dd0:	ff1f0efe 	.word	0xff1f0efe

08000dd4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a64      	ldr	r2, [pc, #400]	; (8000f7c <HAL_ADC_Start_DMA+0x1a8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d004      	beq.n	8000df8 <HAL_ADC_Start_DMA+0x24>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a63      	ldr	r2, [pc, #396]	; (8000f80 <HAL_ADC_Start_DMA+0x1ac>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d106      	bne.n	8000e06 <HAL_ADC_Start_DMA+0x32>
 8000df8:	4b60      	ldr	r3, [pc, #384]	; (8000f7c <HAL_ADC_Start_DMA+0x1a8>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f040 80b3 	bne.w	8000f6c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_ADC_Start_DMA+0x40>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e0ae      	b.n	8000f72 <HAL_ADC_Start_DMA+0x19e>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f000 fae1 	bl	80013e4 <ADC_Enable>
 8000e22:	4603      	mov	r3, r0
 8000e24:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 809a 	bne.w	8000f62 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a4e      	ldr	r2, [pc, #312]	; (8000f80 <HAL_ADC_Start_DMA+0x1ac>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d105      	bne.n	8000e58 <HAL_ADC_Start_DMA+0x84>
 8000e4c:	4b4b      	ldr	r3, [pc, #300]	; (8000f7c <HAL_ADC_Start_DMA+0x1a8>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d115      	bne.n	8000e84 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e82:	e01d      	b.n	8000ec0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a39      	ldr	r2, [pc, #228]	; (8000f7c <HAL_ADC_Start_DMA+0x1a8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d004      	beq.n	8000ea4 <HAL_ADC_Start_DMA+0xd0>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <HAL_ADC_Start_DMA+0x1ac>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d10d      	bne.n	8000ec0 <HAL_ADC_Start_DMA+0xec>
 8000ea4:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <HAL_ADC_Start_DMA+0x1a8>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	f023 0206 	bic.w	r2, r3, #6
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed8:	e002      	b.n	8000ee0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <HAL_ADC_Start_DMA+0x1b0>)
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a24      	ldr	r2, [pc, #144]	; (8000f88 <HAL_ADC_Start_DMA+0x1b4>)
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <HAL_ADC_Start_DMA+0x1b8>)
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f06f 0202 	mvn.w	r2, #2
 8000f08:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f18:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6a18      	ldr	r0, [r3, #32]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	334c      	adds	r3, #76	; 0x4c
 8000f24:	4619      	mov	r1, r3
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f000 fc9f 	bl	800186c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f38:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f3c:	d108      	bne.n	8000f50 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f4c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f4e:	e00f      	b.n	8000f70 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f5e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f60:	e006      	b.n	8000f70 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000f6a:	e001      	b.n	8000f70 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012400 	.word	0x40012400
 8000f80:	40012800 	.word	0x40012800
 8000f84:	0800151b 	.word	0x0800151b
 8000f88:	08001597 	.word	0x08001597
 8000f8c:	080015b3 	.word	0x080015b3

08000f90 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Stop_DMA+0x1a>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e039      	b.n	800101e <HAL_ADC_Stop_DMA+0x8e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fa70 	bl	8001498 <ADC_ConversionStop_Disable>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d128      	bne.n	8001014 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fd0:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d11a      	bne.n	8001014 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fca1 	bl	800192a <HAL_DMA_Abort>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10a      	bne.n	8001008 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
 8001006:	e005      	b.n	8001014 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0320 	and.w	r3, r3, #32
 8001038:	2b20      	cmp	r3, #32
 800103a:	d140      	bne.n	80010be <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b02      	cmp	r3, #2
 8001048:	d139      	bne.n	80010be <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	2b00      	cmp	r3, #0
 8001054:	d105      	bne.n	8001062 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800106c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001070:	d11d      	bne.n	80010ae <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001076:	2b00      	cmp	r3, #0
 8001078:	d119      	bne.n	80010ae <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0220 	bic.w	r2, r2, #32
 8001088:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d105      	bne.n	80010ae <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f87c 	bl	80011ac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f06f 0212 	mvn.w	r2, #18
 80010bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c8:	2b80      	cmp	r3, #128	; 0x80
 80010ca:	d14f      	bne.n	800116c <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d148      	bne.n	800116c <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80010fc:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001100:	d012      	beq.n	8001128 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800110c:	2b00      	cmp	r3, #0
 800110e:	d125      	bne.n	800115c <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800111a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800111e:	d11d      	bne.n	800115c <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001124:	2b00      	cmp	r3, #0
 8001126:	d119      	bne.n	800115c <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001136:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f043 0201 	orr.w	r2, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 fa42 	bl	80015e6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f06f 020c 	mvn.w	r2, #12
 800116a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001176:	2b40      	cmp	r3, #64	; 0x40
 8001178:	d114      	bne.n	80011a4 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10d      	bne.n	80011a4 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f81b 	bl	80011d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f06f 0201 	mvn.w	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x20>
 8001210:	2302      	movs	r3, #2
 8001212:	e0dc      	b.n	80013ce <HAL_ADC_ConfigChannel+0x1da>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b06      	cmp	r3, #6
 8001222:	d81c      	bhi.n	800125e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b05      	subs	r3, #5
 8001236:	221f      	movs	r2, #31
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	4019      	ands	r1, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3b05      	subs	r3, #5
 8001250:	fa00 f203 	lsl.w	r2, r0, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	635a      	str	r2, [r3, #52]	; 0x34
 800125c:	e03c      	b.n	80012d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b0c      	cmp	r3, #12
 8001264:	d81c      	bhi.n	80012a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b23      	subs	r3, #35	; 0x23
 8001278:	221f      	movs	r2, #31
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	4019      	ands	r1, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	3b23      	subs	r3, #35	; 0x23
 8001292:	fa00 f203 	lsl.w	r2, r0, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
 800129e:	e01b      	b.n	80012d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	3b41      	subs	r3, #65	; 0x41
 80012b2:	221f      	movs	r2, #31
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4019      	ands	r1, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	3b41      	subs	r3, #65	; 0x41
 80012cc:	fa00 f203 	lsl.w	r2, r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d91c      	bls.n	800131a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68d9      	ldr	r1, [r3, #12]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	3b1e      	subs	r3, #30
 80012f2:	2207      	movs	r2, #7
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4019      	ands	r1, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6898      	ldr	r0, [r3, #8]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	3b1e      	subs	r3, #30
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	e019      	b.n	800134e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6919      	ldr	r1, [r3, #16]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	2207      	movs	r2, #7
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	4019      	ands	r1, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6898      	ldr	r0, [r3, #8]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	fa00 f203 	lsl.w	r2, r0, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b10      	cmp	r3, #16
 8001354:	d003      	beq.n	800135e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800135a:	2b11      	cmp	r3, #17
 800135c:	d132      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d125      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d126      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001384:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b10      	cmp	r3, #16
 800138c:	d11a      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9a      	lsrs	r2, r3, #18
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013a4:	e002      	b.n	80013ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f9      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x1b2>
 80013b2:	e007      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f043 0220 	orr.w	r2, r3, #32
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40012400 	.word	0x40012400
 80013dc:	20000000 	.word	0x20000000
 80013e0:	431bde83 	.word	0x431bde83

080013e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d040      	beq.n	8001484 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <ADC_Enable+0xac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <ADC_Enable+0xb0>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	0c9b      	lsrs	r3, r3, #18
 800141e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001420:	e002      	b.n	8001428 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3b01      	subs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800142e:	f7ff fbef 	bl	8000c10 <HAL_GetTick>
 8001432:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001434:	e01f      	b.n	8001476 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001436:	f7ff fbeb 	bl	8000c10 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d918      	bls.n	8001476 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d011      	beq.n	8001476 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	f043 0210 	orr.w	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e007      	b.n	8001486 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d1d8      	bne.n	8001436 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000
 8001494:	431bde83 	.word	0x431bde83

08001498 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d12e      	bne.n	8001510 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014c2:	f7ff fba5 	bl	8000c10 <HAL_GetTick>
 80014c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014c8:	e01b      	b.n	8001502 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014ca:	f7ff fba1 	bl	8000c10 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d914      	bls.n	8001502 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10d      	bne.n	8001502 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	f043 0210 	orr.w	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e007      	b.n	8001512 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	d0dc      	beq.n	80014ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001530:	2b00      	cmp	r3, #0
 8001532:	d127      	bne.n	8001584 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800154a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800154e:	d115      	bne.n	800157c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f043 0201 	orr.w	r2, r3, #1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fe15 	bl	80011ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001582:	e004      	b.n	800158e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff fe0a 	bl	80011be <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	f043 0204 	orr.w	r2, r3, #4
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff fe02 	bl	80011e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <__NVIC_EnableIRQ+0x34>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff4f 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff64 	bl	8001640 <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ffb2 	bl	80016e8 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff81 	bl	8001694 <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff57 	bl	800165c <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e043      	b.n	8001856 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_DMA_Init+0xa8>)
 80017d6:	4413      	add	r3, r2
 80017d8:	4a22      	ldr	r2, [pc, #136]	; (8001864 <HAL_DMA_Init+0xac>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	009a      	lsls	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_DMA_Init+0xb0>)
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001802:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	bffdfff8 	.word	0xbffdfff8
 8001864:	cccccccd 	.word	0xcccccccd
 8001868:	40020000 	.word	0x40020000

0800186c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_DMA_Start_IT+0x20>
 8001888:	2302      	movs	r3, #2
 800188a:	e04a      	b.n	8001922 <HAL_DMA_Start_IT+0xb6>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800189a:	2b01      	cmp	r3, #1
 800189c:	d13a      	bne.n	8001914 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2202      	movs	r2, #2
 80018a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f972 	bl	8001bac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 020e 	orr.w	r2, r2, #14
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e00f      	b.n	8001902 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0204 	bic.w	r2, r2, #4
 80018f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f042 020a 	orr.w	r2, r2, #10
 8001900:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e005      	b.n	8001920 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800191c:	2302      	movs	r3, #2
 800191e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001920:	7dfb      	ldrb	r3, [r7, #23]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192a:	b480      	push	{r7}
 800192c:	b085      	sub	sp, #20
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800193c:	2b02      	cmp	r3, #2
 800193e:	d008      	beq.n	8001952 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2204      	movs	r2, #4
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e020      	b.n	8001994 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 020e 	bic.w	r2, r2, #14
 8001960:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d04f      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xc8>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d04a      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a66      	ldr	r2, [pc, #408]	; (8001b90 <HAL_DMA_IRQHandler+0x1f0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d029      	beq.n	8001a4e <HAL_DMA_IRQHandler+0xae>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_DMA_IRQHandler+0x1f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d022      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xaa>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a63      	ldr	r2, [pc, #396]	; (8001b98 <HAL_DMA_IRQHandler+0x1f8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01a      	beq.n	8001a44 <HAL_DMA_IRQHandler+0xa4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a62      	ldr	r2, [pc, #392]	; (8001b9c <HAL_DMA_IRQHandler+0x1fc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d012      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x9e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	; (8001ba0 <HAL_DMA_IRQHandler+0x200>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00a      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x98>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5f      	ldr	r2, [pc, #380]	; (8001ba4 <HAL_DMA_IRQHandler+0x204>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d102      	bne.n	8001a32 <HAL_DMA_IRQHandler+0x92>
 8001a2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a30:	e00e      	b.n	8001a50 <HAL_DMA_IRQHandler+0xb0>
 8001a32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a36:	e00b      	b.n	8001a50 <HAL_DMA_IRQHandler+0xb0>
 8001a38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a3c:	e008      	b.n	8001a50 <HAL_DMA_IRQHandler+0xb0>
 8001a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a42:	e005      	b.n	8001a50 <HAL_DMA_IRQHandler+0xb0>
 8001a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a48:	e002      	b.n	8001a50 <HAL_DMA_IRQHandler+0xb0>
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	e000      	b.n	8001a50 <HAL_DMA_IRQHandler+0xb0>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_DMA_IRQHandler+0x208>)
 8001a52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8094 	beq.w	8001b86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a66:	e08e      	b.n	8001b86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d056      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x186>
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d051      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020a 	bic.w	r2, r2, #10
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <HAL_DMA_IRQHandler+0x1f0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d029      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x166>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a37      	ldr	r2, [pc, #220]	; (8001b94 <HAL_DMA_IRQHandler+0x1f4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x162>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a35      	ldr	r2, [pc, #212]	; (8001b98 <HAL_DMA_IRQHandler+0x1f8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01a      	beq.n	8001afc <HAL_DMA_IRQHandler+0x15c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a34      	ldr	r2, [pc, #208]	; (8001b9c <HAL_DMA_IRQHandler+0x1fc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d012      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x156>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a32      	ldr	r2, [pc, #200]	; (8001ba0 <HAL_DMA_IRQHandler+0x200>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x150>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <HAL_DMA_IRQHandler+0x204>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d102      	bne.n	8001aea <HAL_DMA_IRQHandler+0x14a>
 8001ae4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ae8:	e00e      	b.n	8001b08 <HAL_DMA_IRQHandler+0x168>
 8001aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aee:	e00b      	b.n	8001b08 <HAL_DMA_IRQHandler+0x168>
 8001af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af4:	e008      	b.n	8001b08 <HAL_DMA_IRQHandler+0x168>
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afa:	e005      	b.n	8001b08 <HAL_DMA_IRQHandler+0x168>
 8001afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b00:	e002      	b.n	8001b08 <HAL_DMA_IRQHandler+0x168>
 8001b02:	2320      	movs	r3, #32
 8001b04:	e000      	b.n	8001b08 <HAL_DMA_IRQHandler+0x168>
 8001b06:	2302      	movs	r3, #2
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <HAL_DMA_IRQHandler+0x208>)
 8001b0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d034      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b24:	e02f      	b.n	8001b86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d028      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x1e8>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d023      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 020e 	bic.w	r2, r2, #14
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
    }
  }
  return;
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
}
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40020008 	.word	0x40020008
 8001b94:	4002001c 	.word	0x4002001c
 8001b98:	40020030 	.word	0x40020030
 8001b9c:	40020044 	.word	0x40020044
 8001ba0:	40020058 	.word	0x40020058
 8001ba4:	4002006c 	.word	0x4002006c
 8001ba8:	40020000 	.word	0x40020000

08001bac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d108      	bne.n	8001bec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bea:	e007      	b.n	8001bfc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	60da      	str	r2, [r3, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b08b      	sub	sp, #44	; 0x2c
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	e169      	b.n	8001ef0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 8158 	bne.w	8001eea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4a9a      	ldr	r2, [pc, #616]	; (8001ea8 <HAL_GPIO_Init+0x2a0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d05e      	beq.n	8001d02 <HAL_GPIO_Init+0xfa>
 8001c44:	4a98      	ldr	r2, [pc, #608]	; (8001ea8 <HAL_GPIO_Init+0x2a0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d875      	bhi.n	8001d36 <HAL_GPIO_Init+0x12e>
 8001c4a:	4a98      	ldr	r2, [pc, #608]	; (8001eac <HAL_GPIO_Init+0x2a4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d058      	beq.n	8001d02 <HAL_GPIO_Init+0xfa>
 8001c50:	4a96      	ldr	r2, [pc, #600]	; (8001eac <HAL_GPIO_Init+0x2a4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d86f      	bhi.n	8001d36 <HAL_GPIO_Init+0x12e>
 8001c56:	4a96      	ldr	r2, [pc, #600]	; (8001eb0 <HAL_GPIO_Init+0x2a8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d052      	beq.n	8001d02 <HAL_GPIO_Init+0xfa>
 8001c5c:	4a94      	ldr	r2, [pc, #592]	; (8001eb0 <HAL_GPIO_Init+0x2a8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d869      	bhi.n	8001d36 <HAL_GPIO_Init+0x12e>
 8001c62:	4a94      	ldr	r2, [pc, #592]	; (8001eb4 <HAL_GPIO_Init+0x2ac>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d04c      	beq.n	8001d02 <HAL_GPIO_Init+0xfa>
 8001c68:	4a92      	ldr	r2, [pc, #584]	; (8001eb4 <HAL_GPIO_Init+0x2ac>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d863      	bhi.n	8001d36 <HAL_GPIO_Init+0x12e>
 8001c6e:	4a92      	ldr	r2, [pc, #584]	; (8001eb8 <HAL_GPIO_Init+0x2b0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d046      	beq.n	8001d02 <HAL_GPIO_Init+0xfa>
 8001c74:	4a90      	ldr	r2, [pc, #576]	; (8001eb8 <HAL_GPIO_Init+0x2b0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d85d      	bhi.n	8001d36 <HAL_GPIO_Init+0x12e>
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d82a      	bhi.n	8001cd4 <HAL_GPIO_Init+0xcc>
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d859      	bhi.n	8001d36 <HAL_GPIO_Init+0x12e>
 8001c82:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <HAL_GPIO_Init+0x80>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001d03 	.word	0x08001d03
 8001c8c:	08001cdd 	.word	0x08001cdd
 8001c90:	08001cef 	.word	0x08001cef
 8001c94:	08001d31 	.word	0x08001d31
 8001c98:	08001d37 	.word	0x08001d37
 8001c9c:	08001d37 	.word	0x08001d37
 8001ca0:	08001d37 	.word	0x08001d37
 8001ca4:	08001d37 	.word	0x08001d37
 8001ca8:	08001d37 	.word	0x08001d37
 8001cac:	08001d37 	.word	0x08001d37
 8001cb0:	08001d37 	.word	0x08001d37
 8001cb4:	08001d37 	.word	0x08001d37
 8001cb8:	08001d37 	.word	0x08001d37
 8001cbc:	08001d37 	.word	0x08001d37
 8001cc0:	08001d37 	.word	0x08001d37
 8001cc4:	08001d37 	.word	0x08001d37
 8001cc8:	08001d37 	.word	0x08001d37
 8001ccc:	08001ce5 	.word	0x08001ce5
 8001cd0:	08001cf9 	.word	0x08001cf9
 8001cd4:	4a79      	ldr	r2, [pc, #484]	; (8001ebc <HAL_GPIO_Init+0x2b4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cda:	e02c      	b.n	8001d36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	623b      	str	r3, [r7, #32]
          break;
 8001ce2:	e029      	b.n	8001d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e024      	b.n	8001d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	623b      	str	r3, [r7, #32]
          break;
 8001cf6:	e01f      	b.n	8001d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	330c      	adds	r3, #12
 8001cfe:	623b      	str	r3, [r7, #32]
          break;
 8001d00:	e01a      	b.n	8001d38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	623b      	str	r3, [r7, #32]
          break;
 8001d0e:	e013      	b.n	8001d38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	611a      	str	r2, [r3, #16]
          break;
 8001d22:	e009      	b.n	8001d38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d24:	2308      	movs	r3, #8
 8001d26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	615a      	str	r2, [r3, #20]
          break;
 8001d2e:	e003      	b.n	8001d38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
          break;
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x130>
          break;
 8001d36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2bff      	cmp	r3, #255	; 0xff
 8001d3c:	d801      	bhi.n	8001d42 <HAL_GPIO_Init+0x13a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	e001      	b.n	8001d46 <HAL_GPIO_Init+0x13e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3304      	adds	r3, #4
 8001d46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	d802      	bhi.n	8001d54 <HAL_GPIO_Init+0x14c>
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	e002      	b.n	8001d5a <HAL_GPIO_Init+0x152>
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	3b08      	subs	r3, #8
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	210f      	movs	r1, #15
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	6a39      	ldr	r1, [r7, #32]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80b1 	beq.w	8001eea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d88:	4b4d      	ldr	r3, [pc, #308]	; (8001ec0 <HAL_GPIO_Init+0x2b8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <HAL_GPIO_Init+0x2b8>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_GPIO_Init+0x2b8>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001da0:	4a48      	ldr	r2, [pc, #288]	; (8001ec4 <HAL_GPIO_Init+0x2bc>)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a40      	ldr	r2, [pc, #256]	; (8001ec8 <HAL_GPIO_Init+0x2c0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_GPIO_Init+0x1ec>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3f      	ldr	r2, [pc, #252]	; (8001ecc <HAL_GPIO_Init+0x2c4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00d      	beq.n	8001df0 <HAL_GPIO_Init+0x1e8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3e      	ldr	r2, [pc, #248]	; (8001ed0 <HAL_GPIO_Init+0x2c8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_Init+0x1e4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3d      	ldr	r2, [pc, #244]	; (8001ed4 <HAL_GPIO_Init+0x2cc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_GPIO_Init+0x1e0>
 8001de4:	2303      	movs	r3, #3
 8001de6:	e006      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001de8:	2304      	movs	r3, #4
 8001dea:	e004      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001df4:	2300      	movs	r3, #0
 8001df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e06:	492f      	ldr	r1, [pc, #188]	; (8001ec4 <HAL_GPIO_Init+0x2bc>)
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	492c      	ldr	r1, [pc, #176]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4928      	ldr	r1, [pc, #160]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4922      	ldr	r1, [pc, #136]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	491e      	ldr	r1, [pc, #120]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	4918      	ldr	r1, [pc, #96]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4914      	ldr	r1, [pc, #80]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d021      	beq.n	8001edc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
 8001ea4:	e021      	b.n	8001eea <HAL_GPIO_Init+0x2e2>
 8001ea6:	bf00      	nop
 8001ea8:	10320000 	.word	0x10320000
 8001eac:	10310000 	.word	0x10310000
 8001eb0:	10220000 	.word	0x10220000
 8001eb4:	10210000 	.word	0x10210000
 8001eb8:	10120000 	.word	0x10120000
 8001ebc:	10110000 	.word	0x10110000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	40010c00 	.word	0x40010c00
 8001ed0:	40011000 	.word	0x40011000
 8001ed4:	40011400 	.word	0x40011400
 8001ed8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	4909      	ldr	r1, [pc, #36]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	3301      	adds	r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f47f ae8e 	bne.w	8001c1c <HAL_GPIO_Init+0x14>
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	372c      	adds	r7, #44	; 0x2c
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	40010400 	.word	0x40010400

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f2c:	e003      	b.n	8001f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e26c      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8087 	beq.w	800206e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f60:	4b92      	ldr	r3, [pc, #584]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d00c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f6c:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d112      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5e>
 8001f78:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d10b      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f86:	4b89      	ldr	r3, [pc, #548]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d06c      	beq.n	800206c <HAL_RCC_OscConfig+0x12c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d168      	bne.n	800206c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e246      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x76>
 8001fa8:	4b80      	ldr	r3, [pc, #512]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a7f      	ldr	r2, [pc, #508]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e02e      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x98>
 8001fbe:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7a      	ldr	r2, [pc, #488]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a77      	ldr	r2, [pc, #476]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0xbc>
 8001fe2:	4b72      	ldr	r3, [pc, #456]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a71      	ldr	r2, [pc, #452]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a67      	ldr	r2, [pc, #412]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fdf8 	bl	8000c10 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe fdf4 	bl	8000c10 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1fa      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xe4>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe fde4 	bl	8000c10 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe fde0 	bl	8000c10 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1e6      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x10c>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b08      	cmp	r3, #8
 8002090:	d11c      	bne.n	80020cc <HAL_RCC_OscConfig+0x18c>
 8002092:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x176>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1ba      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4939      	ldr	r1, [pc, #228]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCC_OscConfig+0x270>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe fd99 	bl	8000c10 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe fd95 	bl	8000c10 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e19b      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4927      	ldr	r1, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x270>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe fd78 	bl	8000c10 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7fe fd74 	bl	8000c10 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e17a      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03a      	beq.n	80021c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d019      	beq.n	800218a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x274>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7fe fd58 	bl	8000c10 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7fe fd54 	bl	8000c10 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e15a      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002182:	2001      	movs	r0, #1
 8002184:	f000 fb08 	bl	8002798 <RCC_Delay>
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_OscConfig+0x274>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7fe fd3e 	bl	8000c10 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002196:	e00f      	b.n	80021b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7fe fd3a 	bl	8000c10 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d908      	bls.n	80021b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e140      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	42420000 	.word	0x42420000
 80021b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	4b9e      	ldr	r3, [pc, #632]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e9      	bne.n	8002198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a6 	beq.w	800231e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b97      	ldr	r3, [pc, #604]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b94      	ldr	r3, [pc, #592]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a93      	ldr	r2, [pc, #588]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b91      	ldr	r3, [pc, #580]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a8a      	ldr	r2, [pc, #552]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fcfb 	bl	8000c10 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fcf7 	bl	8000c10 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0fd      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b81      	ldr	r3, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x312>
 8002244:	4b7b      	ldr	r3, [pc, #492]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a7a      	ldr	r2, [pc, #488]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e02d      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x334>
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a72      	ldr	r2, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
 8002272:	e01c      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x356>
 800227c:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a6c      	ldr	r2, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a69      	ldr	r2, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a66      	ldr	r2, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6213      	str	r3, [r2, #32]
 80022a2:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a63      	ldr	r2, [pc, #396]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fcab 	bl	8000c10 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fca7 	bl	8000c10 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0ab      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	4b57      	ldr	r3, [pc, #348]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ee      	beq.n	80022be <HAL_RCC_OscConfig+0x37e>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fc95 	bl	8000c10 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fc91 	bl	8000c10 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e095      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b48      	ldr	r3, [pc, #288]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a47      	ldr	r2, [pc, #284]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8081 	beq.w	800242a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d061      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d146      	bne.n	80023ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe fc65 	bl	8000c10 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fc61 	bl	8000c10 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e067      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235c:	4b35      	ldr	r3, [pc, #212]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d108      	bne.n	8002384 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	492d      	ldr	r1, [pc, #180]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a19      	ldr	r1, [r3, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	430b      	orrs	r3, r1
 8002396:	4927      	ldr	r1, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fc35 	bl	8000c10 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe fc31 	bl	8000c10 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e037      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x46a>
 80023c8:	e02f      	b.n	800242a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fc1e 	bl	8000c10 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fc1a 	bl	8000c10 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e020      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x498>
 80023f6:	e018      	b.n	800242a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	42420060 	.word	0x42420060

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4965      	ldr	r1, [pc, #404]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe fb6e 	bl	8000c10 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fb6a 	bl	8000c10 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1cc>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe f9f8 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	0800702c 	.word	0x0800702c
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b490      	push	{r4, r7}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800261c:	1d3c      	adds	r4, r7, #4
 800261e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002624:	f240 2301 	movw	r3, #513	; 0x201
 8002628:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x40>
 800264e:	2b08      	cmp	r3, #8
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x46>
 8002652:	e02d      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002656:	623b      	str	r3, [r7, #32]
      break;
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002666:	4413      	add	r3, r2
 8002668:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800266c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c5b      	lsrs	r3, r3, #17
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002686:	4413      	add	r3, r2
 8002688:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800268c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002692:	fb02 f203 	mul.w	r2, r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	e004      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	623b      	str	r3, [r7, #32]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b2:	623b      	str	r3, [r7, #32]
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	6a3b      	ldr	r3, [r7, #32]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc90      	pop	{r4, r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	08006fa4 	.word	0x08006fa4
 80026c8:	40021000 	.word	0x40021000
 80026cc:	007a1200 	.word	0x007a1200
 80026d0:	003d0900 	.word	0x003d0900

080026d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d8:	4b02      	ldr	r3, [pc, #8]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	20000000 	.word	0x20000000

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ec:	f7ff fff2 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	0800703c 	.word	0x0800703c

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002714:	f7ff ffde 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0adb      	lsrs	r3, r3, #11
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	0800703c 	.word	0x0800703c

08002738 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	220f      	movs	r2, #15
 8002746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_RCC_GetClockConfig+0x58>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0203 	and.w	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_RCC_GetClockConfig+0x58>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_GetClockConfig+0x58>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_RCC_GetClockConfig+0x58>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	08db      	lsrs	r3, r3, #3
 8002772:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCC_GetClockConfig+0x5c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0207 	and.w	r2, r3, #7
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40021000 	.word	0x40021000
 8002794:	40022000 	.word	0x40022000

08002798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <RCC_Delay+0x34>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <RCC_Delay+0x38>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0a5b      	lsrs	r3, r3, #9
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027b4:	bf00      	nop
  }
  while (Delay --);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <RCC_Delay+0x1c>
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000000 	.word	0x20000000
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d07d      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10d      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	61d3      	str	r3, [r2, #28]
 800280c:	4b49      	ldr	r3, [pc, #292]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d118      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002828:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a42      	ldr	r2, [pc, #264]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002832:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002834:	f7fe f9ec 	bl	8000c10 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	e008      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283c:	f7fe f9e8 	bl	8000c10 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e06d      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800285a:	4b36      	ldr	r3, [pc, #216]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002862:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d02e      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d027      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002878:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002880:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800288e:	4a29      	ldr	r2, [pc, #164]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d014      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe f9b7 	bl	8000c10 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a4:	e00a      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe f9b3 	bl	8000c10 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e036      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ee      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4917      	ldr	r1, [pc, #92]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4a13      	ldr	r2, [pc, #76]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	490b      	ldr	r1, [pc, #44]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4904      	ldr	r1, [pc, #16]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	42420440 	.word	0x42420440

08002940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e041      	b.n	80029d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f839 	bl	80029de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f000 fac2 	bl	8002f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e03a      	b.n	8002a7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_TIM_Base_Start_IT+0x98>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0x58>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d009      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0x58>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_TIM_Base_Start_IT+0x9c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0x58>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d010      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	e007      	b.n	8002a7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800

08002a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e041      	b.n	8002b2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd fef4 	bl	80008a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f000 fa18 	bl	8002f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d122      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d11b      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0202 	mvn.w	r2, #2
 8002b5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f9ac 	bl	8002ed2 <HAL_TIM_IC_CaptureCallback>
 8002b7a:	e005      	b.n	8002b88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f99f 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9ae 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d122      	bne.n	8002be2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d11b      	bne.n	8002be2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f06f 0204 	mvn.w	r2, #4
 8002bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f982 	bl	8002ed2 <HAL_TIM_IC_CaptureCallback>
 8002bce:	e005      	b.n	8002bdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f975 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f984 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d122      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d11b      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0208 	mvn.w	r2, #8
 8002c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f958 	bl	8002ed2 <HAL_TIM_IC_CaptureCallback>
 8002c22:	e005      	b.n	8002c30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f94b 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f95a 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d122      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d11b      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0210 	mvn.w	r2, #16
 8002c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f92e 	bl	8002ed2 <HAL_TIM_IC_CaptureCallback>
 8002c76:	e005      	b.n	8002c84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f921 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f930 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10e      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f06f 0201 	mvn.w	r2, #1
 8002cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7fd fd39 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d10e      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	d107      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fbb5 	bl	800344c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d10e      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d107      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8f4 	bl	8002ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d10e      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d107      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0220 	mvn.w	r2, #32
 8002d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fb80 	bl	800343a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0ac      	b.n	8002eb8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	f200 809f 	bhi.w	8002eac <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002da9 	.word	0x08002da9
 8002d78:	08002ead 	.word	0x08002ead
 8002d7c:	08002ead 	.word	0x08002ead
 8002d80:	08002ead 	.word	0x08002ead
 8002d84:	08002de9 	.word	0x08002de9
 8002d88:	08002ead 	.word	0x08002ead
 8002d8c:	08002ead 	.word	0x08002ead
 8002d90:	08002ead 	.word	0x08002ead
 8002d94:	08002e2b 	.word	0x08002e2b
 8002d98:	08002ead 	.word	0x08002ead
 8002d9c:	08002ead 	.word	0x08002ead
 8002da0:	08002ead 	.word	0x08002ead
 8002da4:	08002e6b 	.word	0x08002e6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f90c 	bl	8002fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0208 	orr.w	r2, r2, #8
 8002dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0204 	bic.w	r2, r2, #4
 8002dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6999      	ldr	r1, [r3, #24]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	619a      	str	r2, [r3, #24]
      break;
 8002de6:	e062      	b.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f952 	bl	8003098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6999      	ldr	r1, [r3, #24]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	021a      	lsls	r2, r3, #8
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	619a      	str	r2, [r3, #24]
      break;
 8002e28:	e041      	b.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f99b 	bl	800316c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0208 	orr.w	r2, r2, #8
 8002e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0204 	bic.w	r2, r2, #4
 8002e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69d9      	ldr	r1, [r3, #28]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	61da      	str	r2, [r3, #28]
      break;
 8002e68:	e021      	b.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f9e5 	bl	8003240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69d9      	ldr	r1, [r3, #28]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	021a      	lsls	r2, r3, #8
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	61da      	str	r2, [r3, #28]
      break;
 8002eaa:	e000      	b.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002eac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a29      	ldr	r2, [pc, #164]	; (8002fc0 <TIM_Base_SetConfig+0xb8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00b      	beq.n	8002f38 <TIM_Base_SetConfig+0x30>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d007      	beq.n	8002f38 <TIM_Base_SetConfig+0x30>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <TIM_Base_SetConfig+0xbc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <TIM_Base_SetConfig+0x30>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a25      	ldr	r2, [pc, #148]	; (8002fc8 <TIM_Base_SetConfig+0xc0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d108      	bne.n	8002f4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <TIM_Base_SetConfig+0xb8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00b      	beq.n	8002f6a <TIM_Base_SetConfig+0x62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d007      	beq.n	8002f6a <TIM_Base_SetConfig+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <TIM_Base_SetConfig+0xbc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_Base_SetConfig+0x62>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <TIM_Base_SetConfig+0xc0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d108      	bne.n	8002f7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <TIM_Base_SetConfig+0xb8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d103      	bne.n	8002fb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800

08002fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0201 	bic.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 0302 	bic.w	r3, r3, #2
 8003014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <TIM_OC1_SetConfig+0xc8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10c      	bne.n	8003042 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0308 	bic.w	r3, r3, #8
 800302e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a13      	ldr	r2, [pc, #76]	; (8003094 <TIM_OC1_SetConfig+0xc8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d111      	bne.n	800306e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40012c00 	.word	0x40012c00

08003098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0210 	bic.w	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0320 	bic.w	r3, r3, #32
 80030e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <TIM_OC2_SetConfig+0xd0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d10d      	bne.n	8003114 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003112:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a14      	ldr	r2, [pc, #80]	; (8003168 <TIM_OC2_SetConfig+0xd0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d113      	bne.n	8003144 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800312a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	40012c00 	.word	0x40012c00

0800316c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <TIM_OC3_SetConfig+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10d      	bne.n	80031e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <TIM_OC3_SetConfig+0xd0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d113      	bne.n	8003216 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	621a      	str	r2, [r3, #32]
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40012c00 	.word	0x40012c00

08003240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800328a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <TIM_OC4_SetConfig+0x98>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d109      	bne.n	80032b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00

080032dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e046      	b.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d009      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a10      	ldr	r2, [pc, #64]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10c      	bne.n	8003370 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4313      	orrs	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800

08003398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e03d      	b.n	8003430 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e03f      	b.n	80034f0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d106      	bne.n	800348a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fd fa61 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2224      	movs	r2, #36	; 0x24
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f904 	bl	80036b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b20      	cmp	r3, #32
 8003516:	d17c      	bne.n	8003612 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Transmit+0x2c>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e075      	b.n	8003614 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_UART_Transmit+0x3e>
 8003532:	2302      	movs	r3, #2
 8003534:	e06e      	b.n	8003614 <HAL_UART_Transmit+0x11c>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2221      	movs	r2, #33	; 0x21
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800354c:	f7fd fb60 	bl	8000c10 <HAL_GetTick>
 8003550:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003566:	d108      	bne.n	800357a <HAL_UART_Transmit+0x82>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	e003      	b.n	8003582 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800358a:	e02a      	b.n	80035e2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2200      	movs	r2, #0
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f840 	bl	800361c <UART_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e036      	b.n	8003614 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	3302      	adds	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e007      	b.n	80035d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1cf      	bne.n	800358c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f810 	bl	800361c <UART_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e006      	b.n	8003614 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	e02c      	b.n	8003688 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d028      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <UART_WaitOnFlagUntilTimeout+0x30>
 800363c:	f7fd fae8 	bl	8000c10 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	429a      	cmp	r2, r3
 800364a:	d21d      	bcs.n	8003688 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800365a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e00f      	b.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d0c3      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ea:	f023 030c 	bic.w	r3, r3, #12
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <UART_SetConfig+0x114>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d103      	bne.n	8003720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7fe fffa 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	e002      	b.n	8003726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7fe ffe2 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8003724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <UART_SetConfig+0x118>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	0119      	lsls	r1, r3, #4
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <UART_SetConfig+0x118>)
 800375e:	fba3 0302 	umull	r0, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2064      	movs	r0, #100	; 0x64
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <UART_SetConfig+0x118>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377c:	4419      	add	r1, r3
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009a      	lsls	r2, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fbb2 f2f3 	udiv	r2, r2, r3
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <UART_SetConfig+0x118>)
 8003796:	fba3 0302 	umull	r0, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2064      	movs	r0, #100	; 0x64
 800379e:	fb00 f303 	mul.w	r3, r0, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <UART_SetConfig+0x118>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	440a      	add	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40013800 	.word	0x40013800
 80037c8:	51eb851f 	.word	0x51eb851f

080037cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d2:	f3ef 8305 	mrs	r3, IPSR
 80037d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80037d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037de:	f3ef 8310 	mrs	r3, PRIMASK
 80037e2:	607b      	str	r3, [r7, #4]
  return(result);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <osKernelInitialize+0x32>
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <osKernelInitialize+0x60>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d109      	bne.n	8003806 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037f2:	f3ef 8311 	mrs	r3, BASEPRI
 80037f6:	603b      	str	r3, [r7, #0]
  return(result);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80037fe:	f06f 0305 	mvn.w	r3, #5
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e00c      	b.n	8003820 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <osKernelInitialize+0x60>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d105      	bne.n	800381a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <osKernelInitialize+0x60>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e002      	b.n	8003820 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003820:	68fb      	ldr	r3, [r7, #12]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	20000094 	.word	0x20000094

08003830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003836:	f3ef 8305 	mrs	r3, IPSR
 800383a:	60bb      	str	r3, [r7, #8]
  return(result);
 800383c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003842:	f3ef 8310 	mrs	r3, PRIMASK
 8003846:	607b      	str	r3, [r7, #4]
  return(result);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <osKernelStart+0x32>
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <osKernelStart+0x64>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d109      	bne.n	800386a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003856:	f3ef 8311 	mrs	r3, BASEPRI
 800385a:	603b      	str	r3, [r7, #0]
  return(result);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003862:	f06f 0305 	mvn.w	r3, #5
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e00e      	b.n	8003888 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <osKernelStart+0x64>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <osKernelStart+0x64>)
 8003874:	2202      	movs	r2, #2
 8003876:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003878:	f001 fad4 	bl	8004e24 <vTaskStartScheduler>
      stat = osOK;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e002      	b.n	8003888 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003888:	68fb      	ldr	r3, [r7, #12]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000094 	.word	0x20000094

08003898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b092      	sub	sp, #72	; 0x48
 800389c:	af04      	add	r7, sp, #16
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038a8:	f3ef 8305 	mrs	r3, IPSR
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f040 8094 	bne.w	80039de <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ba:	623b      	str	r3, [r7, #32]
  return(result);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f040 808d 	bne.w	80039de <osThreadNew+0x146>
 80038c4:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <osThreadNew+0x150>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d106      	bne.n	80038da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038cc:	f3ef 8311 	mrs	r3, BASEPRI
 80038d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 8082 	bne.w	80039de <osThreadNew+0x146>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d07e      	beq.n	80039de <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80038e4:	2318      	movs	r3, #24
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80038e8:	2300      	movs	r3, #0
 80038ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80038ec:	f107 031b 	add.w	r3, r7, #27
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d045      	beq.n	800398a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <osThreadNew+0x74>
        name = attr->name;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <osThreadNew+0x9a>
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	2b38      	cmp	r3, #56	; 0x38
 8003924:	d805      	bhi.n	8003932 <osThreadNew+0x9a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <osThreadNew+0x9e>
        return (NULL);
 8003932:	2300      	movs	r3, #0
 8003934:	e054      	b.n	80039e0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00e      	beq.n	800396c <osThreadNew+0xd4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b5b      	cmp	r3, #91	; 0x5b
 8003954:	d90a      	bls.n	800396c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800395a:	2b00      	cmp	r3, #0
 800395c:	d006      	beq.n	800396c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <osThreadNew+0xd4>
        mem = 1;
 8003966:	2301      	movs	r3, #1
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
 800396a:	e010      	b.n	800398e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10c      	bne.n	800398e <osThreadNew+0xf6>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <osThreadNew+0xf6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <osThreadNew+0xf6>
          mem = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
 8003988:	e001      	b.n	800398e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	2b01      	cmp	r3, #1
 8003992:	d110      	bne.n	80039b6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800399c:	9202      	str	r2, [sp, #8]
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f001 f86e 	bl	8004a8c <xTaskCreateStatic>
 80039b0:	4603      	mov	r3, r0
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e013      	b.n	80039de <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d110      	bne.n	80039de <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	b29a      	uxth	r2, r3
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f001 f8b8 	bl	8004b44 <xTaskCreate>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <osThreadNew+0x146>
          hTask = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039de:	697b      	ldr	r3, [r7, #20]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3738      	adds	r7, #56	; 0x38
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000094 	.word	0x20000094

080039ec <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f2:	f3ef 8305 	mrs	r3, IPSR
 80039f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80039f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	607b      	str	r3, [r7, #4]
  return(result);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <osThreadYield+0x32>
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <osThreadYield+0x5c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d109      	bne.n	8003a26 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a12:	f3ef 8311 	mrs	r3, BASEPRI
 8003a16:	603b      	str	r3, [r7, #0]
  return(result);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <osThreadYield+0x3a>
    stat = osErrorISR;
 8003a1e:	f06f 0305 	mvn.w	r3, #5
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e009      	b.n	8003a3a <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <osThreadYield+0x60>)
 8003a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000094 	.word	0x20000094
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a58:	f3ef 8305 	mrs	r3, IPSR
 8003a5c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a5e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10f      	bne.n	8003a84 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a64:	f3ef 8310 	mrs	r3, PRIMASK
 8003a68:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <osDelay+0x34>
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <osDelay+0x58>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d109      	bne.n	8003a8c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a78:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <osDelay+0x3c>
    stat = osErrorISR;
 8003a84:	f06f 0305 	mvn.w	r3, #5
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e007      	b.n	8003a9c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f001 f990 	bl	8004dbc <vTaskDelay>
    }
  }

  return (stat);
 8003a9c:	697b      	ldr	r3, [r7, #20]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000094 	.word	0x20000094

08003aac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003abc:	f3ef 8305 	mrs	r3, IPSR
 8003ac0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ac2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d16f      	bne.n	8003ba8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8003acc:	617b      	str	r3, [r7, #20]
  return(result);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d169      	bne.n	8003ba8 <osMessageQueueNew+0xfc>
 8003ad4:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <osMessageQueueNew+0x108>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d105      	bne.n	8003ae8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003adc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d15f      	bne.n	8003ba8 <osMessageQueueNew+0xfc>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d05c      	beq.n	8003ba8 <osMessageQueueNew+0xfc>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d059      	beq.n	8003ba8 <osMessageQueueNew+0xfc>
    mem = -1;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d029      	beq.n	8003b54 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <osMessageQueueNew+0x82>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b4f      	cmp	r3, #79	; 0x4f
 8003b0e:	d90e      	bls.n	8003b2e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <osMessageQueueNew+0x82>
        mem = 1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	623b      	str	r3, [r7, #32]
 8003b2c:	e014      	b.n	8003b58 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d110      	bne.n	8003b58 <osMessageQueueNew+0xac>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10c      	bne.n	8003b58 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <osMessageQueueNew+0xac>
          mem = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	e001      	b.n	8003b58 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10b      	bne.n	8003b76 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2100      	movs	r1, #0
 8003b68:	9100      	str	r1, [sp, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fa53 	bl	8004018 <xQueueGenericCreateStatic>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24
 8003b74:	e008      	b.n	8003b88 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fac0 	bl	8004106 <xQueueGenericCreate>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <osMessageQueueNew+0xf0>
        name = attr->name;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	e001      	b.n	8003ba0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003ba0:	69f9      	ldr	r1, [r7, #28]
 8003ba2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ba4:	f000 ff16 	bl	80049d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000094 	.word	0x20000094

08003bb8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd0:	f3ef 8305 	mrs	r3, IPSR
 8003bd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bd6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10f      	bne.n	8003bfc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <osMessageQueuePut+0x44>
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <osMessageQueuePut+0xe0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d12e      	bne.n	8003c4e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8003bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d028      	beq.n	8003c4e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <osMessageQueuePut+0x56>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <osMessageQueuePut+0x56>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003c0e:	f06f 0303 	mvn.w	r3, #3
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c14:	e039      	b.n	8003c8a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003c1a:	f107 0210 	add.w	r2, r7, #16
 8003c1e:	2300      	movs	r3, #0
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6a38      	ldr	r0, [r7, #32]
 8003c24:	f000 fbce 	bl	80043c4 <xQueueGenericSendFromISR>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d003      	beq.n	8003c36 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003c2e:	f06f 0302 	mvn.w	r3, #2
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c34:	e029      	b.n	8003c8a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d026      	beq.n	8003c8a <osMessageQueuePut+0xd2>
 8003c3c:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <osMessageQueuePut+0xe4>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c4c:	e01d      	b.n	8003c8a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <osMessageQueuePut+0xa2>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003c5a:	f06f 0303 	mvn.w	r3, #3
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c60:	e014      	b.n	8003c8c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c62:	2300      	movs	r3, #0
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	6a38      	ldr	r0, [r7, #32]
 8003c6a:	f000 faad 	bl	80041c8 <xQueueGenericSend>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d00b      	beq.n	8003c8c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003c7a:	f06f 0301 	mvn.w	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	e004      	b.n	8003c8c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003c82:	f06f 0302 	mvn.w	r3, #2
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e000      	b.n	8003c8c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c8a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3728      	adds	r7, #40	; 0x28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000094 	.word	0x20000094
 8003c9c:	e000ed04 	.word	0xe000ed04

08003ca0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb6:	f3ef 8305 	mrs	r3, IPSR
 8003cba:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cbc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <osMessageQueueGet+0x42>
 8003cce:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <osMessageQueueGet+0xdc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d12e      	bne.n	8003d34 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8003cda:	617b      	str	r3, [r7, #20]
  return(result);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d028      	beq.n	8003d34 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <osMessageQueueGet+0x54>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <osMessageQueueGet+0x54>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003cf4:	f06f 0303 	mvn.w	r3, #3
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cfa:	e038      	b.n	8003d6e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003d00:	f107 0310 	add.w	r3, r7, #16
 8003d04:	461a      	mov	r2, r3
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	6a38      	ldr	r0, [r7, #32]
 8003d0a:	f000 fcd3 	bl	80046b4 <xQueueReceiveFromISR>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d003      	beq.n	8003d1c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003d14:	f06f 0302 	mvn.w	r3, #2
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d1a:	e028      	b.n	8003d6e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d025      	beq.n	8003d6e <osMessageQueueGet+0xce>
 8003d22:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <osMessageQueueGet+0xe0>)
 8003d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d32:	e01c      	b.n	8003d6e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <osMessageQueueGet+0xa0>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d103      	bne.n	8003d48 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003d40:	f06f 0303 	mvn.w	r3, #3
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	e013      	b.n	8003d70 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	6a38      	ldr	r0, [r7, #32]
 8003d4e:	f000 fbd1 	bl	80044f4 <xQueueReceive>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d00b      	beq.n	8003d70 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003d5e:	f06f 0301 	mvn.w	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
 8003d64:	e004      	b.n	8003d70 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003d66:	f06f 0302 	mvn.w	r3, #2
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6c:	e000      	b.n	8003d70 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3728      	adds	r7, #40	; 0x28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000094 	.word	0x20000094
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a06      	ldr	r2, [pc, #24]	; (8003dac <vApplicationGetIdleTaskMemory+0x28>)
 8003d94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2280      	movs	r2, #128	; 0x80
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	20000098 	.word	0x20000098
 8003db0:	200000f4 	.word	0x200000f4

08003db4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003dc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a06      	ldr	r2, [pc, #24]	; (8003de4 <vApplicationGetTimerTaskMemory+0x30>)
 8003dca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	200002f4 	.word	0x200002f4
 8003de4:	20000350 	.word	0x20000350

08003de8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f103 0208 	add.w	r2, r3, #8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f103 0208 	add.w	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f103 0208 	add.w	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d103      	bne.n	8003ea4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e00c      	b.n	8003ebe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e002      	b.n	8003eb2 <vListInsert+0x2e>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d2f6      	bcs.n	8003eac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6892      	ldr	r2, [r2, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6852      	ldr	r2, [r2, #4]
 8003f14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d103      	bne.n	8003f28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1e5a      	subs	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
	...

08003f48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f72:	f002 f883 	bl	800607c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	441a      	add	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	441a      	add	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	; 0xff
 8003fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d114      	bne.n	8003ff2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01a      	beq.n	8004006 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3310      	adds	r3, #16
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 f9af 	bl	8005338 <xTaskRemoveFromEventList>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <xQueueGenericReset+0xcc>)
 8003fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	e009      	b.n	8004006 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3310      	adds	r3, #16
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fef6 	bl	8003de8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3324      	adds	r3, #36	; 0x24
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fef1 	bl	8003de8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004006:	f002 f869 	bl	80060dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800400a:	2301      	movs	r3, #1
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08e      	sub	sp, #56	; 0x38
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <xQueueGenericCreateStatic+0x52>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <xQueueGenericCreateStatic+0x56>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <xQueueGenericCreateStatic+0x58>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	623b      	str	r3, [r7, #32]
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <xQueueGenericCreateStatic+0x7e>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <xQueueGenericCreateStatic+0x82>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericCreateStatic+0x84>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	61fb      	str	r3, [r7, #28]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040b6:	2350      	movs	r3, #80	; 0x50
 80040b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b50      	cmp	r3, #80	; 0x50
 80040be:	d00a      	beq.n	80040d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	61bb      	str	r3, [r7, #24]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040e8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f843 	bl	8004182 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040fe:	4618      	mov	r0, r3
 8004100:	3730      	adds	r7, #48	; 0x30
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004106:	b580      	push	{r7, lr}
 8004108:	b08a      	sub	sp, #40	; 0x28
 800410a:	af02      	add	r7, sp, #8
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	4613      	mov	r3, r2
 8004112:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <xQueueGenericCreate+0x2a>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	613b      	str	r3, [r7, #16]
}
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e004      	b.n	8004146 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3350      	adds	r3, #80	; 0x50
 800414a:	4618      	mov	r0, r3
 800414c:	f002 f896 	bl	800627c <pvPortMalloc>
 8004150:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	3350      	adds	r3, #80	; 0x50
 800415c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004166:	79fa      	ldrb	r2, [r7, #7]
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f805 	bl	8004182 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004178:	69bb      	ldr	r3, [r7, #24]
	}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e002      	b.n	80041a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041b0:	2101      	movs	r1, #1
 80041b2:	69b8      	ldr	r0, [r7, #24]
 80041b4:	f7ff fec8 	bl	8003f48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08e      	sub	sp, #56	; 0x38
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041d6:	2300      	movs	r3, #0
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xQueueGenericSend+0x32>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d103      	bne.n	8004208 <xQueueGenericSend+0x40>
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <xQueueGenericSend+0x44>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <xQueueGenericSend+0x46>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <xQueueGenericSend+0x60>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d103      	bne.n	8004236 <xQueueGenericSend+0x6e>
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <xQueueGenericSend+0x72>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <xQueueGenericSend+0x74>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <xQueueGenericSend+0x8e>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	623b      	str	r3, [r7, #32]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004256:	f001 fa31 	bl	80056bc <xTaskGetSchedulerState>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <xQueueGenericSend+0x9e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <xQueueGenericSend+0xa2>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <xQueueGenericSend+0xa4>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <xQueueGenericSend+0xbe>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	61fb      	str	r3, [r7, #28]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004286:	f001 fef9 	bl	800607c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <xQueueGenericSend+0xd4>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d129      	bne.n	80042f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a2:	f000 fa87 	bl	80047b4 <prvCopyDataToQueue>
 80042a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d010      	beq.n	80042d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	3324      	adds	r3, #36	; 0x24
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f83f 	bl	8005338 <xTaskRemoveFromEventList>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042c0:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <xQueueGenericSend+0x1f8>)
 80042c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	e00a      	b.n	80042e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <xQueueGenericSend+0x1f8>)
 80042da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042e8:	f001 fef8 	bl	80060dc <vPortExitCritical>
				return pdPASS;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e063      	b.n	80043b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042f6:	f001 fef1 	bl	80060dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e05c      	b.n	80043b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f879 	bl	8005400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800430e:	2301      	movs	r3, #1
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004312:	f001 fee3 	bl	80060dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004316:	f000 fdeb 	bl	8004ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800431a:	f001 feaf 	bl	800607c <vPortEnterCritical>
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004324:	b25b      	sxtb	r3, r3
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d103      	bne.n	8004334 <xQueueGenericSend+0x16c>
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800433a:	b25b      	sxtb	r3, r3
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d103      	bne.n	800434a <xQueueGenericSend+0x182>
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800434a:	f001 fec7 	bl	80060dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800434e:	1d3a      	adds	r2, r7, #4
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f001 f868 	bl	800542c <xTaskCheckForTimeOut>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d124      	bne.n	80043ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004364:	f000 fb1e 	bl	80049a4 <prvIsQueueFull>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	3310      	adds	r3, #16
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 ff8e 	bl	8005298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800437c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800437e:	f000 faa9 	bl	80048d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004382:	f000 fdc3 	bl	8004f0c <xTaskResumeAll>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f af7c 	bne.w	8004286 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800438e:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <xQueueGenericSend+0x1f8>)
 8004390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	e772      	b.n	8004286 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a2:	f000 fa97 	bl	80048d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043a6:	f000 fdb1 	bl	8004f0c <xTaskResumeAll>
 80043aa:	e76c      	b.n	8004286 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ae:	f000 fa91 	bl	80048d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043b2:	f000 fdab 	bl	8004f0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043b6:	2300      	movs	r3, #0
		}
	}
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3738      	adds	r7, #56	; 0x38
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08e      	sub	sp, #56	; 0x38
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <xQueueGenericSendFromISR+0x3c>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <xQueueGenericSendFromISR+0x40>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <xQueueGenericSendFromISR+0x42>
 8004404:	2300      	movs	r3, #0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	623b      	str	r3, [r7, #32]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d103      	bne.n	800442e <xQueueGenericSendFromISR+0x6a>
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <xQueueGenericSendFromISR+0x6e>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <xQueueGenericSendFromISR+0x70>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	61fb      	str	r3, [r7, #28]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800444e:	f001 fed7 	bl	8006200 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004452:	f3ef 8211 	mrs	r2, BASEPRI
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61ba      	str	r2, [r7, #24]
 8004468:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800446a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <xQueueGenericSendFromISR+0xbc>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d12c      	bne.n	80044da <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004490:	f000 f990 	bl	80047b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004494:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d112      	bne.n	80044c4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	3324      	adds	r3, #36	; 0x24
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 ff44 	bl	8005338 <xTaskRemoveFromEventList>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00e      	beq.n	80044d4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00b      	beq.n	80044d4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e007      	b.n	80044d4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044c8:	3301      	adds	r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	b25a      	sxtb	r2, r3
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044d4:	2301      	movs	r3, #1
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80044d8:	e001      	b.n	80044de <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3738      	adds	r7, #56	; 0x38
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08c      	sub	sp, #48	; 0x30
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004500:	2300      	movs	r3, #0
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <xQueueReceive+0x30>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	623b      	str	r3, [r7, #32]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <xQueueReceive+0x3e>
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <xQueueReceive+0x42>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <xQueueReceive+0x44>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xQueueReceive+0x5e>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	61fb      	str	r3, [r7, #28]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004552:	f001 f8b3 	bl	80056bc <xTaskGetSchedulerState>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <xQueueReceive+0x6e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <xQueueReceive+0x72>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueReceive+0x74>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xQueueReceive+0x8e>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61bb      	str	r3, [r7, #24]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004582:	f001 fd7b 	bl	800607c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01f      	beq.n	80045d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004596:	f000 f977 	bl	8004888 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	1e5a      	subs	r2, r3, #1
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00f      	beq.n	80045ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	3310      	adds	r3, #16
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fec2 	bl	8005338 <xTaskRemoveFromEventList>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045ba:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <xQueueReceive+0x1bc>)
 80045bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045ca:	f001 fd87 	bl	80060dc <vPortExitCritical>
				return pdPASS;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e069      	b.n	80046a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045d8:	f001 fd80 	bl	80060dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045dc:	2300      	movs	r3, #0
 80045de:	e062      	b.n	80046a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e6:	f107 0310 	add.w	r3, r7, #16
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ff08 	bl	8005400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045f4:	f001 fd72 	bl	80060dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045f8:	f000 fc7a 	bl	8004ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045fc:	f001 fd3e 	bl	800607c <vPortEnterCritical>
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004606:	b25b      	sxtb	r3, r3
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d103      	bne.n	8004616 <xQueueReceive+0x122>
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800461c:	b25b      	sxtb	r3, r3
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d103      	bne.n	800462c <xQueueReceive+0x138>
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800462c:	f001 fd56 	bl	80060dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004630:	1d3a      	adds	r2, r7, #4
 8004632:	f107 0310 	add.w	r3, r7, #16
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fef7 	bl	800542c <xTaskCheckForTimeOut>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d123      	bne.n	800468c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004646:	f000 f997 	bl	8004978 <prvIsQueueEmpty>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d017      	beq.n	8004680 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	3324      	adds	r3, #36	; 0x24
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fe1d 	bl	8005298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800465e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004660:	f000 f938 	bl	80048d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004664:	f000 fc52 	bl	8004f0c <xTaskResumeAll>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d189      	bne.n	8004582 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <xQueueReceive+0x1bc>)
 8004670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	e780      	b.n	8004582 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004682:	f000 f927 	bl	80048d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004686:	f000 fc41 	bl	8004f0c <xTaskResumeAll>
 800468a:	e77a      	b.n	8004582 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800468c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800468e:	f000 f921 	bl	80048d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004692:	f000 fc3b 	bl	8004f0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004698:	f000 f96e 	bl	8004978 <prvIsQueueEmpty>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f43f af6f 	beq.w	8004582 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3730      	adds	r7, #48	; 0x30
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08e      	sub	sp, #56	; 0x38
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	623b      	str	r3, [r7, #32]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <xQueueReceiveFromISR+0x3a>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <xQueueReceiveFromISR+0x3e>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <xQueueReceiveFromISR+0x40>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	61fb      	str	r3, [r7, #28]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800470e:	f001 fd77 	bl	8006200 <vPortValidateInterruptPriority>
	__asm volatile
 8004712:	f3ef 8211 	mrs	r2, BASEPRI
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	61ba      	str	r2, [r7, #24]
 8004728:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800472a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d02f      	beq.n	800479a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004748:	f000 f89e 	bl	8004888 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d112      	bne.n	8004784 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	3310      	adds	r3, #16
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fde4 	bl	8005338 <xTaskRemoveFromEventList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e007      	b.n	8004794 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004788:	3301      	adds	r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	b25a      	sxtb	r2, r3
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
 8004798:	e001      	b.n	800479e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f383 8811 	msr	BASEPRI, r3
}
 80047a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3738      	adds	r7, #56	; 0x38
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10d      	bne.n	80047ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d14d      	bne.n	8004876 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 ff8a 	bl	80056f8 <xTaskPriorityDisinherit>
 80047e4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	e043      	b.n	8004876 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d119      	bne.n	8004828 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6898      	ldr	r0, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	461a      	mov	r2, r3
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	f001 ff3e 	bl	8006680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d32b      	bcc.n	8004876 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	609a      	str	r2, [r3, #8]
 8004826:	e026      	b.n	8004876 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68d8      	ldr	r0, [r3, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	461a      	mov	r2, r3
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	f001 ff24 	bl	8006680 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	425b      	negs	r3, r3
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d207      	bcs.n	8004864 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	425b      	negs	r3, r3
 800485e:	441a      	add	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d105      	bne.n	8004876 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	3b01      	subs	r3, #1
 8004874:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800487e:	697b      	ldr	r3, [r7, #20]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d018      	beq.n	80048cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	441a      	add	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d303      	bcc.n	80048bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68d9      	ldr	r1, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	461a      	mov	r2, r3
 80048c6:	6838      	ldr	r0, [r7, #0]
 80048c8:	f001 feda 	bl	8006680 <memcpy>
	}
}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048dc:	f001 fbce 	bl	800607c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048e8:	e011      	b.n	800490e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d012      	beq.n	8004918 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3324      	adds	r3, #36	; 0x24
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fd1e 	bl	8005338 <xTaskRemoveFromEventList>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004902:	f000 fdf5 	bl	80054f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	3b01      	subs	r3, #1
 800490a:	b2db      	uxtb	r3, r3
 800490c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800490e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	dce9      	bgt.n	80048ea <prvUnlockQueue+0x16>
 8004916:	e000      	b.n	800491a <prvUnlockQueue+0x46>
					break;
 8004918:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	22ff      	movs	r2, #255	; 0xff
 800491e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004922:	f001 fbdb 	bl	80060dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004926:	f001 fba9 	bl	800607c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004930:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004932:	e011      	b.n	8004958 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d012      	beq.n	8004962 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3310      	adds	r3, #16
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fcf9 	bl	8005338 <xTaskRemoveFromEventList>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800494c:	f000 fdd0 	bl	80054f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004950:	7bbb      	ldrb	r3, [r7, #14]
 8004952:	3b01      	subs	r3, #1
 8004954:	b2db      	uxtb	r3, r3
 8004956:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800495c:	2b00      	cmp	r3, #0
 800495e:	dce9      	bgt.n	8004934 <prvUnlockQueue+0x60>
 8004960:	e000      	b.n	8004964 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004962:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	22ff      	movs	r2, #255	; 0xff
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800496c:	f001 fbb6 	bl	80060dc <vPortExitCritical>
}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004980:	f001 fb7c 	bl	800607c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e001      	b.n	8004996 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004996:	f001 fba1 	bl	80060dc <vPortExitCritical>

	return xReturn;
 800499a:	68fb      	ldr	r3, [r7, #12]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049ac:	f001 fb66 	bl	800607c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d102      	bne.n	80049c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e001      	b.n	80049c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049c6:	f001 fb89 	bl	80060dc <vPortExitCritical>

	return xReturn;
 80049ca:	68fb      	ldr	r3, [r7, #12]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e014      	b.n	8004a0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049e4:	4a0e      	ldr	r2, [pc, #56]	; (8004a20 <vQueueAddToRegistry+0x4c>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049f0:	490b      	ldr	r1, [pc, #44]	; (8004a20 <vQueueAddToRegistry+0x4c>)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <vQueueAddToRegistry+0x4c>)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a06:	e006      	b.n	8004a16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b07      	cmp	r3, #7
 8004a12:	d9e7      	bls.n	80049e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr
 8004a20:	20001afc 	.word	0x20001afc

08004a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a34:	f001 fb22 	bl	800607c <vPortEnterCritical>
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a3e:	b25b      	sxtb	r3, r3
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d103      	bne.n	8004a4e <vQueueWaitForMessageRestricted+0x2a>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a54:	b25b      	sxtb	r3, r3
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d103      	bne.n	8004a64 <vQueueWaitForMessageRestricted+0x40>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a64:	f001 fb3a 	bl	80060dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3324      	adds	r3, #36	; 0x24
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fc31 	bl	80052e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a7e:	6978      	ldr	r0, [r7, #20]
 8004a80:	f7ff ff28 	bl	80048d4 <prvUnlockQueue>
	}
 8004a84:	bf00      	nop
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08e      	sub	sp, #56	; 0x38
 8004a90:	af04      	add	r7, sp, #16
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	623b      	str	r3, [r7, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	61fb      	str	r3, [r7, #28]
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ad2:	235c      	movs	r3, #92	; 0x5c
 8004ad4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b5c      	cmp	r3, #92	; 0x5c
 8004ada:	d00a      	beq.n	8004af2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	61bb      	str	r3, [r7, #24]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01e      	beq.n	8004b36 <xTaskCreateStatic+0xaa>
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01b      	beq.n	8004b36 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b10:	2300      	movs	r3, #0
 8004b12:	9303      	str	r3, [sp, #12]
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	9302      	str	r3, [sp, #8]
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f850 	bl	8004bce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b30:	f000 f8d4 	bl	8004cdc <prvAddNewTaskToReadyList>
 8004b34:	e001      	b.n	8004b3a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b3a:	697b      	ldr	r3, [r7, #20]
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3728      	adds	r7, #40	; 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af04      	add	r7, sp, #16
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 fb8f 	bl	800627c <pvPortMalloc>
 8004b5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00e      	beq.n	8004b84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b66:	205c      	movs	r0, #92	; 0x5c
 8004b68:	f001 fb88 	bl	800627c <pvPortMalloc>
 8004b6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
 8004b7a:	e005      	b.n	8004b88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b7c:	6978      	ldr	r0, [r7, #20]
 8004b7e:	f001 fc41 	bl	8006404 <vPortFree>
 8004b82:	e001      	b.n	8004b88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d017      	beq.n	8004bbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9303      	str	r3, [sp, #12]
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	9302      	str	r3, [sp, #8]
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f80e 	bl	8004bce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bb2:	69f8      	ldr	r0, [r7, #28]
 8004bb4:	f000 f892 	bl	8004cdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	e002      	b.n	8004bc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
	}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	461a      	mov	r2, r3
 8004be6:	21a5      	movs	r1, #165	; 0xa5
 8004be8:	f001 fd58 	bl	800669c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f023 0307 	bic.w	r3, r3, #7
 8004c04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	617b      	str	r3, [r7, #20]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e012      	b.n	8004c52 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	7819      	ldrb	r1, [r3, #0]
 8004c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	3334      	adds	r3, #52	; 0x34
 8004c3c:	460a      	mov	r2, r1
 8004c3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b0f      	cmp	r3, #15
 8004c56:	d9e9      	bls.n	8004c2c <prvInitialiseNewTask+0x5e>
 8004c58:	e000      	b.n	8004c5c <prvInitialiseNewTask+0x8e>
		{
			break;
 8004c5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	2b37      	cmp	r3, #55	; 0x37
 8004c68:	d901      	bls.n	8004c6e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c6a:	2337      	movs	r3, #55	; 0x37
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	3304      	adds	r3, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff f8ce 	bl	8003e26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	3318      	adds	r3, #24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff f8c9 	bl	8003e26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2200      	movs	r2, #0
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	69b8      	ldr	r0, [r7, #24]
 8004cbe:	f001 f8ef 	bl	8005ea0 <pxPortInitialiseStack>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cd4:	bf00      	nop
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ce4:	f001 f9ca 	bl	800607c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <prvAddNewTaskToReadyList+0xc4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3301      	adds	r3, #1
 8004cee:	4a2c      	ldr	r2, [pc, #176]	; (8004da0 <prvAddNewTaskToReadyList+0xc4>)
 8004cf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cf2:	4b2c      	ldr	r3, [pc, #176]	; (8004da4 <prvAddNewTaskToReadyList+0xc8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <prvAddNewTaskToReadyList+0xc8>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d00:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <prvAddNewTaskToReadyList+0xc4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d110      	bne.n	8004d2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d08:	f000 fc16 	bl	8005538 <prvInitialiseTaskLists>
 8004d0c:	e00d      	b.n	8004d2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d0e:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <prvAddNewTaskToReadyList+0xcc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d16:	4b23      	ldr	r3, [pc, #140]	; (8004da4 <prvAddNewTaskToReadyList+0xc8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d802      	bhi.n	8004d2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d24:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <prvAddNewTaskToReadyList+0xc8>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d2a:	4b20      	ldr	r3, [pc, #128]	; (8004dac <prvAddNewTaskToReadyList+0xd0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	4a1e      	ldr	r2, [pc, #120]	; (8004dac <prvAddNewTaskToReadyList+0xd0>)
 8004d32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <prvAddNewTaskToReadyList+0xd0>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <prvAddNewTaskToReadyList+0xd4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d903      	bls.n	8004d50 <prvAddNewTaskToReadyList+0x74>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <prvAddNewTaskToReadyList+0xd4>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <prvAddNewTaskToReadyList+0xd8>)
 8004d5e:	441a      	add	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f7ff f869 	bl	8003e3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d6c:	f001 f9b6 	bl	80060dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <prvAddNewTaskToReadyList+0xcc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00e      	beq.n	8004d96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <prvAddNewTaskToReadyList+0xc8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d207      	bcs.n	8004d96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <prvAddNewTaskToReadyList+0xdc>)
 8004d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000c24 	.word	0x20000c24
 8004da4:	20000750 	.word	0x20000750
 8004da8:	20000c30 	.word	0x20000c30
 8004dac:	20000c40 	.word	0x20000c40
 8004db0:	20000c2c 	.word	0x20000c2c
 8004db4:	20000754 	.word	0x20000754
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dce:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <vTaskDelay+0x60>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <vTaskDelay+0x30>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	60bb      	str	r3, [r7, #8]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004dec:	f000 f880 	bl	8004ef0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004df0:	2100      	movs	r1, #0
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fcee 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004df8:	f000 f888 	bl	8004f0c <xTaskResumeAll>
 8004dfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d107      	bne.n	8004e14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <vTaskDelay+0x64>)
 8004e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000c4c 	.word	0x20000c4c
 8004e20:	e000ed04 	.word	0xe000ed04

08004e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e32:	463a      	mov	r2, r7
 8004e34:	1d39      	adds	r1, r7, #4
 8004e36:	f107 0308 	add.w	r3, r7, #8
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe ffa2 	bl	8003d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	9202      	str	r2, [sp, #8]
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	460a      	mov	r2, r1
 8004e52:	4921      	ldr	r1, [pc, #132]	; (8004ed8 <vTaskStartScheduler+0xb4>)
 8004e54:	4821      	ldr	r0, [pc, #132]	; (8004edc <vTaskStartScheduler+0xb8>)
 8004e56:	f7ff fe19 	bl	8004a8c <xTaskCreateStatic>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <vTaskStartScheduler+0xbc>)
 8004e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e60:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <vTaskStartScheduler+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e001      	b.n	8004e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d102      	bne.n	8004e7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e78:	f000 fd00 	bl	800587c <xTimerCreateTimerTask>
 8004e7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d116      	bne.n	8004eb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	613b      	str	r3, [r7, #16]
}
 8004e96:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <vTaskStartScheduler+0xc0>)
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <vTaskStartScheduler+0xc4>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <vTaskStartScheduler+0xc8>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004eac:	f001 f874 	bl	8005f98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004eb0:	e00e      	b.n	8004ed0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d10a      	bne.n	8004ed0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60fb      	str	r3, [r7, #12]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <vTaskStartScheduler+0xaa>
}
 8004ed0:	bf00      	nop
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	08006fb4 	.word	0x08006fb4
 8004edc:	08005509 	.word	0x08005509
 8004ee0:	20000c48 	.word	0x20000c48
 8004ee4:	20000c44 	.word	0x20000c44
 8004ee8:	20000c30 	.word	0x20000c30
 8004eec:	20000c28 	.word	0x20000c28

08004ef0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <vTaskSuspendAll+0x18>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <vTaskSuspendAll+0x18>)
 8004efc:	6013      	str	r3, [r2, #0]
}
 8004efe:	bf00      	nop
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000c4c 	.word	0x20000c4c

08004f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f1a:	4b42      	ldr	r3, [pc, #264]	; (8005024 <xTaskResumeAll+0x118>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	603b      	str	r3, [r7, #0]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f38:	f001 f8a0 	bl	800607c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f3c:	4b39      	ldr	r3, [pc, #228]	; (8005024 <xTaskResumeAll+0x118>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	4a38      	ldr	r2, [pc, #224]	; (8005024 <xTaskResumeAll+0x118>)
 8004f44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f46:	4b37      	ldr	r3, [pc, #220]	; (8005024 <xTaskResumeAll+0x118>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d162      	bne.n	8005014 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f4e:	4b36      	ldr	r3, [pc, #216]	; (8005028 <xTaskResumeAll+0x11c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d05e      	beq.n	8005014 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f56:	e02f      	b.n	8004fb8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f58:	4b34      	ldr	r3, [pc, #208]	; (800502c <xTaskResumeAll+0x120>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3318      	adds	r3, #24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe ffc5 	bl	8003ef4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe ffc0 	bl	8003ef4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <xTaskResumeAll+0x124>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d903      	bls.n	8004f88 <xTaskResumeAll+0x7c>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	4a2a      	ldr	r2, [pc, #168]	; (8005030 <xTaskResumeAll+0x124>)
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <xTaskResumeAll+0x128>)
 8004f96:	441a      	add	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f7fe ff4d 	bl	8003e3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	4b23      	ldr	r3, [pc, #140]	; (8005038 <xTaskResumeAll+0x12c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004fb2:	4b22      	ldr	r3, [pc, #136]	; (800503c <xTaskResumeAll+0x130>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fb8:	4b1c      	ldr	r3, [pc, #112]	; (800502c <xTaskResumeAll+0x120>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1cb      	bne.n	8004f58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fc6:	f000 fb55 	bl	8005674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <xTaskResumeAll+0x134>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d010      	beq.n	8004ff8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fd6:	f000 f845 	bl	8005064 <xTaskIncrementTick>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fe0:	4b16      	ldr	r3, [pc, #88]	; (800503c <xTaskResumeAll+0x130>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f1      	bne.n	8004fd6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <xTaskResumeAll+0x134>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ff8:	4b10      	ldr	r3, [pc, #64]	; (800503c <xTaskResumeAll+0x130>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d009      	beq.n	8005014 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005000:	2301      	movs	r3, #1
 8005002:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <xTaskResumeAll+0x138>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005014:	f001 f862 	bl	80060dc <vPortExitCritical>

	return xAlreadyYielded;
 8005018:	68bb      	ldr	r3, [r7, #8]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000c4c 	.word	0x20000c4c
 8005028:	20000c24 	.word	0x20000c24
 800502c:	20000be4 	.word	0x20000be4
 8005030:	20000c2c 	.word	0x20000c2c
 8005034:	20000754 	.word	0x20000754
 8005038:	20000750 	.word	0x20000750
 800503c:	20000c38 	.word	0x20000c38
 8005040:	20000c34 	.word	0x20000c34
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <xTaskGetTickCount+0x18>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005054:	687b      	ldr	r3, [r7, #4]
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	20000c28 	.word	0x20000c28

08005064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800506e:	4b51      	ldr	r3, [pc, #324]	; (80051b4 <xTaskIncrementTick+0x150>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 808e 	bne.w	8005194 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005078:	4b4f      	ldr	r3, [pc, #316]	; (80051b8 <xTaskIncrementTick+0x154>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005080:	4a4d      	ldr	r2, [pc, #308]	; (80051b8 <xTaskIncrementTick+0x154>)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d120      	bne.n	80050ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800508c:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <xTaskIncrementTick+0x158>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <xTaskIncrementTick+0x48>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	603b      	str	r3, [r7, #0]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <xTaskIncrementTick+0x46>
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <xTaskIncrementTick+0x158>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <xTaskIncrementTick+0x15c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a41      	ldr	r2, [pc, #260]	; (80051bc <xTaskIncrementTick+0x158>)
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4a41      	ldr	r2, [pc, #260]	; (80051c0 <xTaskIncrementTick+0x15c>)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	4b40      	ldr	r3, [pc, #256]	; (80051c4 <xTaskIncrementTick+0x160>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a3f      	ldr	r2, [pc, #252]	; (80051c4 <xTaskIncrementTick+0x160>)
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	f000 fad3 	bl	8005674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050ce:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <xTaskIncrementTick+0x164>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d34e      	bcc.n	8005176 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d8:	4b38      	ldr	r3, [pc, #224]	; (80051bc <xTaskIncrementTick+0x158>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <xTaskIncrementTick+0x82>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xTaskIncrementTick+0x84>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ec:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <xTaskIncrementTick+0x164>)
 80050ee:	f04f 32ff 	mov.w	r2, #4294967295
 80050f2:	601a      	str	r2, [r3, #0]
					break;
 80050f4:	e03f      	b.n	8005176 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050f6:	4b31      	ldr	r3, [pc, #196]	; (80051bc <xTaskIncrementTick+0x158>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d203      	bcs.n	8005116 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800510e:	4a2e      	ldr	r2, [pc, #184]	; (80051c8 <xTaskIncrementTick+0x164>)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6013      	str	r3, [r2, #0]
						break;
 8005114:	e02f      	b.n	8005176 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	3304      	adds	r3, #4
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe feea 	bl	8003ef4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	3318      	adds	r3, #24
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe fee1 	bl	8003ef4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <xTaskIncrementTick+0x168>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d903      	bls.n	8005146 <xTaskIncrementTick+0xe2>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	4a22      	ldr	r2, [pc, #136]	; (80051cc <xTaskIncrementTick+0x168>)
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <xTaskIncrementTick+0x16c>)
 8005154:	441a      	add	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	3304      	adds	r3, #4
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f7fe fe6e 	bl	8003e3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <xTaskIncrementTick+0x170>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d3b3      	bcc.n	80050d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005174:	e7b0      	b.n	80050d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005176:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <xTaskIncrementTick+0x170>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4914      	ldr	r1, [pc, #80]	; (80051d0 <xTaskIncrementTick+0x16c>)
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d907      	bls.n	800519e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	e004      	b.n	800519e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <xTaskIncrementTick+0x174>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	4a0f      	ldr	r2, [pc, #60]	; (80051d8 <xTaskIncrementTick+0x174>)
 800519c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <xTaskIncrementTick+0x178>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80051a6:	2301      	movs	r3, #1
 80051a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80051aa:	697b      	ldr	r3, [r7, #20]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000c4c 	.word	0x20000c4c
 80051b8:	20000c28 	.word	0x20000c28
 80051bc:	20000bdc 	.word	0x20000bdc
 80051c0:	20000be0 	.word	0x20000be0
 80051c4:	20000c3c 	.word	0x20000c3c
 80051c8:	20000c44 	.word	0x20000c44
 80051cc:	20000c2c 	.word	0x20000c2c
 80051d0:	20000754 	.word	0x20000754
 80051d4:	20000750 	.word	0x20000750
 80051d8:	20000c34 	.word	0x20000c34
 80051dc:	20000c38 	.word	0x20000c38

080051e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <vTaskSwitchContext+0xa4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051ee:	4b26      	ldr	r3, [pc, #152]	; (8005288 <vTaskSwitchContext+0xa8>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051f4:	e041      	b.n	800527a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <vTaskSwitchContext+0xa8>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80051fc:	4b23      	ldr	r3, [pc, #140]	; (800528c <vTaskSwitchContext+0xac>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e010      	b.n	8005226 <vTaskSwitchContext+0x46>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <vTaskSwitchContext+0x40>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	607b      	str	r3, [r7, #4]
}
 800521c:	bf00      	nop
 800521e:	e7fe      	b.n	800521e <vTaskSwitchContext+0x3e>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3b01      	subs	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	491a      	ldr	r1, [pc, #104]	; (8005290 <vTaskSwitchContext+0xb0>)
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0e4      	beq.n	8005204 <vTaskSwitchContext+0x24>
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4a12      	ldr	r2, [pc, #72]	; (8005290 <vTaskSwitchContext+0xb0>)
 8005246:	4413      	add	r3, r2
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	3308      	adds	r3, #8
 800525c:	429a      	cmp	r2, r3
 800525e:	d104      	bne.n	800526a <vTaskSwitchContext+0x8a>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	4a08      	ldr	r2, [pc, #32]	; (8005294 <vTaskSwitchContext+0xb4>)
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	4a05      	ldr	r2, [pc, #20]	; (800528c <vTaskSwitchContext+0xac>)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6013      	str	r3, [r2, #0]
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	20000c4c 	.word	0x20000c4c
 8005288:	20000c38 	.word	0x20000c38
 800528c:	20000c2c 	.word	0x20000c2c
 8005290:	20000754 	.word	0x20000754
 8005294:	20000750 	.word	0x20000750

08005298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	60fb      	str	r3, [r7, #12]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <vTaskPlaceOnEventList+0x44>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3318      	adds	r3, #24
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fe fddc 	bl	8003e84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052cc:	2101      	movs	r1, #1
 80052ce:	6838      	ldr	r0, [r7, #0]
 80052d0:	f000 fa80 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000750 	.word	0x20000750

080052e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	617b      	str	r3, [r7, #20]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <vTaskPlaceOnEventListRestricted+0x54>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3318      	adds	r3, #24
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7fe fd94 	bl	8003e3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	68b8      	ldr	r0, [r7, #8]
 8005326:	f000 fa55 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
	}
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000750 	.word	0x20000750

08005338 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3318      	adds	r3, #24
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fdc3 	bl	8003ef4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800536e:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <xTaskRemoveFromEventList+0xb0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11d      	bne.n	80053b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3304      	adds	r3, #4
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fdba 	bl	8003ef4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <xTaskRemoveFromEventList+0xb4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d903      	bls.n	8005394 <xTaskRemoveFromEventList+0x5c>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4a16      	ldr	r2, [pc, #88]	; (80053ec <xTaskRemoveFromEventList+0xb4>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <xTaskRemoveFromEventList+0xb8>)
 80053a2:	441a      	add	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f7fe fd47 	bl	8003e3e <vListInsertEnd>
 80053b0:	e005      	b.n	80053be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3318      	adds	r3, #24
 80053b6:	4619      	mov	r1, r3
 80053b8:	480e      	ldr	r0, [pc, #56]	; (80053f4 <xTaskRemoveFromEventList+0xbc>)
 80053ba:	f7fe fd40 	bl	8003e3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <xTaskRemoveFromEventList+0xc0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d905      	bls.n	80053d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <xTaskRemoveFromEventList+0xc4>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e001      	b.n	80053dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80053dc:	697b      	ldr	r3, [r7, #20]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000c4c 	.word	0x20000c4c
 80053ec:	20000c2c 	.word	0x20000c2c
 80053f0:	20000754 	.word	0x20000754
 80053f4:	20000be4 	.word	0x20000be4
 80053f8:	20000750 	.word	0x20000750
 80053fc:	20000c38 	.word	0x20000c38

08005400 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <vTaskInternalSetTimeOutState+0x24>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <vTaskInternalSetTimeOutState+0x28>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000c3c 	.word	0x20000c3c
 8005428:	20000c28 	.word	0x20000c28

0800542c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	613b      	str	r3, [r7, #16]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	60fb      	str	r3, [r7, #12]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800546e:	f000 fe05 	bl	800607c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005472:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <xTaskCheckForTimeOut+0xbc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d102      	bne.n	8005492 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e023      	b.n	80054da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <xTaskCheckForTimeOut+0xc0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d007      	beq.n	80054ae <xTaskCheckForTimeOut+0x82>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e015      	b.n	80054da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d20b      	bcs.n	80054d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ff9b 	bl	8005400 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e004      	b.n	80054da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054da:	f000 fdff 	bl	80060dc <vPortExitCritical>

	return xReturn;
 80054de:	69fb      	ldr	r3, [r7, #28]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000c28 	.word	0x20000c28
 80054ec:	20000c3c 	.word	0x20000c3c

080054f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <vTaskMissedYield+0x14>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000c38 	.word	0x20000c38

08005508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005510:	f000 f852 	bl	80055b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005514:	4b06      	ldr	r3, [pc, #24]	; (8005530 <prvIdleTask+0x28>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d9f9      	bls.n	8005510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <prvIdleTask+0x2c>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800552c:	e7f0      	b.n	8005510 <prvIdleTask+0x8>
 800552e:	bf00      	nop
 8005530:	20000754 	.word	0x20000754
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	e00c      	b.n	800555e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4a12      	ldr	r2, [pc, #72]	; (8005598 <prvInitialiseTaskLists+0x60>)
 8005550:	4413      	add	r3, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fc48 	bl	8003de8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3301      	adds	r3, #1
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b37      	cmp	r3, #55	; 0x37
 8005562:	d9ef      	bls.n	8005544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005564:	480d      	ldr	r0, [pc, #52]	; (800559c <prvInitialiseTaskLists+0x64>)
 8005566:	f7fe fc3f 	bl	8003de8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800556a:	480d      	ldr	r0, [pc, #52]	; (80055a0 <prvInitialiseTaskLists+0x68>)
 800556c:	f7fe fc3c 	bl	8003de8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005570:	480c      	ldr	r0, [pc, #48]	; (80055a4 <prvInitialiseTaskLists+0x6c>)
 8005572:	f7fe fc39 	bl	8003de8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005576:	480c      	ldr	r0, [pc, #48]	; (80055a8 <prvInitialiseTaskLists+0x70>)
 8005578:	f7fe fc36 	bl	8003de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800557c:	480b      	ldr	r0, [pc, #44]	; (80055ac <prvInitialiseTaskLists+0x74>)
 800557e:	f7fe fc33 	bl	8003de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <prvInitialiseTaskLists+0x78>)
 8005584:	4a05      	ldr	r2, [pc, #20]	; (800559c <prvInitialiseTaskLists+0x64>)
 8005586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <prvInitialiseTaskLists+0x7c>)
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <prvInitialiseTaskLists+0x68>)
 800558c:	601a      	str	r2, [r3, #0]
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000754 	.word	0x20000754
 800559c:	20000bb4 	.word	0x20000bb4
 80055a0:	20000bc8 	.word	0x20000bc8
 80055a4:	20000be4 	.word	0x20000be4
 80055a8:	20000bf8 	.word	0x20000bf8
 80055ac:	20000c10 	.word	0x20000c10
 80055b0:	20000bdc 	.word	0x20000bdc
 80055b4:	20000be0 	.word	0x20000be0

080055b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055be:	e019      	b.n	80055f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055c0:	f000 fd5c 	bl	800607c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80055c4:	4b10      	ldr	r3, [pc, #64]	; (8005608 <prvCheckTasksWaitingTermination+0x50>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fc8f 	bl	8003ef4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <prvCheckTasksWaitingTermination+0x54>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3b01      	subs	r3, #1
 80055dc:	4a0b      	ldr	r2, [pc, #44]	; (800560c <prvCheckTasksWaitingTermination+0x54>)
 80055de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ea:	f000 fd77 	bl	80060dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f810 	bl	8005614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e1      	bne.n	80055c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000bf8 	.word	0x20000bf8
 800560c:	20000c24 	.word	0x20000c24
 8005610:	20000c0c 	.word	0x20000c0c

08005614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005622:	2b00      	cmp	r3, #0
 8005624:	d108      	bne.n	8005638 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	4618      	mov	r0, r3
 800562c:	f000 feea 	bl	8006404 <vPortFree>
				vPortFree( pxTCB );
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fee7 	bl	8006404 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005636:	e018      	b.n	800566a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800563e:	2b01      	cmp	r3, #1
 8005640:	d103      	bne.n	800564a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fede 	bl	8006404 <vPortFree>
	}
 8005648:	e00f      	b.n	800566a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005650:	2b02      	cmp	r3, #2
 8005652:	d00a      	beq.n	800566a <prvDeleteTCB+0x56>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	60fb      	str	r3, [r7, #12]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <prvDeleteTCB+0x54>
	}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800567a:	4b0e      	ldr	r3, [pc, #56]	; (80056b4 <prvResetNextTaskUnblockTime+0x40>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <prvResetNextTaskUnblockTime+0x14>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <prvResetNextTaskUnblockTime+0x16>
 8005688:	2300      	movs	r3, #0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <prvResetNextTaskUnblockTime+0x44>)
 8005690:	f04f 32ff 	mov.w	r2, #4294967295
 8005694:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005696:	e008      	b.n	80056aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <prvResetNextTaskUnblockTime+0x40>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <prvResetNextTaskUnblockTime+0x44>)
 80056a8:	6013      	str	r3, [r2, #0]
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	20000bdc 	.word	0x20000bdc
 80056b8:	20000c44 	.word	0x20000c44

080056bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056c2:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <xTaskGetSchedulerState+0x34>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ca:	2301      	movs	r3, #1
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	e008      	b.n	80056e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <xTaskGetSchedulerState+0x38>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056d8:	2302      	movs	r3, #2
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	e001      	b.n	80056e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056e2:	687b      	ldr	r3, [r7, #4]
	}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000c30 	.word	0x20000c30
 80056f4:	20000c4c 	.word	0x20000c4c

080056f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d056      	beq.n	80057bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <xTaskPriorityDisinherit+0xd0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	d00a      	beq.n	800572e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60bb      	str	r3, [r7, #8]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005750:	1e5a      	subs	r2, r3, #1
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575e:	429a      	cmp	r2, r3
 8005760:	d02c      	beq.n	80057bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005766:	2b00      	cmp	r3, #0
 8005768:	d128      	bne.n	80057bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3304      	adds	r3, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fbc0 	bl	8003ef4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <xTaskPriorityDisinherit+0xd4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d903      	bls.n	800579c <xTaskPriorityDisinherit+0xa4>
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <xTaskPriorityDisinherit+0xd4>)
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <xTaskPriorityDisinherit+0xd8>)
 80057aa:	441a      	add	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f7fe fb43 	bl	8003e3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057bc:	697b      	ldr	r3, [r7, #20]
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000750 	.word	0x20000750
 80057cc:	20000c2c 	.word	0x20000c2c
 80057d0:	20000754 	.word	0x20000754

080057d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <prvAddCurrentTaskToDelayedList+0x90>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e4:	4b20      	ldr	r3, [pc, #128]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fb82 	bl	8003ef4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d10a      	bne.n	800580e <prvAddCurrentTaskToDelayedList+0x3a>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4819      	ldr	r0, [pc, #100]	; (800586c <prvAddCurrentTaskToDelayedList+0x98>)
 8005808:	f7fe fb19 	bl	8003e3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800580c:	e026      	b.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	429a      	cmp	r2, r3
 8005824:	d209      	bcs.n	800583a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7fe fb26 	bl	8003e84 <vListInsert>
}
 8005838:	e010      	b.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800583a:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe fb1c 	bl	8003e84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	429a      	cmp	r2, r3
 8005854:	d202      	bcs.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000c28 	.word	0x20000c28
 8005868:	20000750 	.word	0x20000750
 800586c:	20000c10 	.word	0x20000c10
 8005870:	20000be0 	.word	0x20000be0
 8005874:	20000bdc 	.word	0x20000bdc
 8005878:	20000c44 	.word	0x20000c44

0800587c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005886:	f000 facb 	bl	8005e20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800588a:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <xTimerCreateTimerTask+0x80>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d021      	beq.n	80058d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800589a:	1d3a      	adds	r2, r7, #4
 800589c:	f107 0108 	add.w	r1, r7, #8
 80058a0:	f107 030c 	add.w	r3, r7, #12
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fe fa85 	bl	8003db4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	9202      	str	r2, [sp, #8]
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	2302      	movs	r3, #2
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	460a      	mov	r2, r1
 80058bc:	4910      	ldr	r1, [pc, #64]	; (8005900 <xTimerCreateTimerTask+0x84>)
 80058be:	4811      	ldr	r0, [pc, #68]	; (8005904 <xTimerCreateTimerTask+0x88>)
 80058c0:	f7ff f8e4 	bl	8004a8c <xTaskCreateStatic>
 80058c4:	4603      	mov	r3, r0
 80058c6:	4a10      	ldr	r2, [pc, #64]	; (8005908 <xTimerCreateTimerTask+0x8c>)
 80058c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <xTimerCreateTimerTask+0x8c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058d2:	2301      	movs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	613b      	str	r3, [r7, #16]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058f2:	697b      	ldr	r3, [r7, #20]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000c80 	.word	0x20000c80
 8005900:	08006fbc 	.word	0x08006fbc
 8005904:	08005a29 	.word	0x08005a29
 8005908:	20000c84 	.word	0x20000c84

0800590c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08a      	sub	sp, #40	; 0x28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800591a:	2300      	movs	r3, #0
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	623b      	str	r3, [r7, #32]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800593a:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <xTimerGenericCommand+0x98>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02a      	beq.n	8005998 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b05      	cmp	r3, #5
 8005952:	dc18      	bgt.n	8005986 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005954:	f7ff feb2 	bl	80056bc <xTaskGetSchedulerState>
 8005958:	4603      	mov	r3, r0
 800595a:	2b02      	cmp	r3, #2
 800595c:	d109      	bne.n	8005972 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <xTimerGenericCommand+0x98>)
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	f107 0110 	add.w	r1, r7, #16
 8005966:	2300      	movs	r3, #0
 8005968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596a:	f7fe fc2d 	bl	80041c8 <xQueueGenericSend>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24
 8005970:	e012      	b.n	8005998 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005972:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <xTimerGenericCommand+0x98>)
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	f107 0110 	add.w	r1, r7, #16
 800597a:	2300      	movs	r3, #0
 800597c:	2200      	movs	r2, #0
 800597e:	f7fe fc23 	bl	80041c8 <xQueueGenericSend>
 8005982:	6278      	str	r0, [r7, #36]	; 0x24
 8005984:	e008      	b.n	8005998 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005986:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <xTimerGenericCommand+0x98>)
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f107 0110 	add.w	r1, r7, #16
 800598e:	2300      	movs	r3, #0
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	f7fe fd17 	bl	80043c4 <xQueueGenericSendFromISR>
 8005996:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800599a:	4618      	mov	r0, r3
 800599c:	3728      	adds	r7, #40	; 0x28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000c80 	.word	0x20000c80

080059a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <prvProcessExpiredTimer+0x7c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	3304      	adds	r3, #4
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe fa97 	bl	8003ef4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d122      	bne.n	8005a14 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	18d1      	adds	r1, r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f000 f8c8 	bl	8005b70 <prvInsertTimerInActiveList>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d016      	beq.n	8005a14 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059e6:	2300      	movs	r3, #0
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	2100      	movs	r1, #0
 80059f0:	6978      	ldr	r0, [r7, #20]
 80059f2:	f7ff ff8b 	bl	800590c <xTimerGenericCommand>
 80059f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60fb      	str	r3, [r7, #12]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	6978      	ldr	r0, [r7, #20]
 8005a1a:	4798      	blx	r3
}
 8005a1c:	bf00      	nop
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000c78 	.word	0x20000c78

08005a28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a30:	f107 0308 	add.w	r3, r7, #8
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f857 	bl	8005ae8 <prvGetNextExpireTime>
 8005a3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f803 	bl	8005a4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a46:	f000 f8d5 	bl	8005bf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a4a:	e7f1      	b.n	8005a30 <prvTimerTask+0x8>

08005a4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a56:	f7ff fa4b 	bl	8004ef0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a5a:	f107 0308 	add.w	r3, r7, #8
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f866 	bl	8005b30 <prvSampleTimeNow>
 8005a64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d130      	bne.n	8005ace <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <prvProcessTimerOrBlockTask+0x3c>
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d806      	bhi.n	8005a88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a7a:	f7ff fa47 	bl	8004f0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff91 	bl	80059a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a86:	e024      	b.n	8005ad2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <prvProcessTimerOrBlockTask+0x90>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <prvProcessTimerOrBlockTask+0x94>)
 8005aa2:	6818      	ldr	r0, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	4619      	mov	r1, r3
 8005aae:	f7fe ffb9 	bl	8004a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ab2:	f7ff fa2b 	bl	8004f0c <xTaskResumeAll>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <prvProcessTimerOrBlockTask+0x98>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
}
 8005acc:	e001      	b.n	8005ad2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ace:	f7ff fa1d 	bl	8004f0c <xTaskResumeAll>
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000c7c 	.word	0x20000c7c
 8005ae0:	20000c80 	.word	0x20000c80
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005af0:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <prvGetNextExpireTime+0x44>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf0c      	ite	eq
 8005afa:	2301      	moveq	r3, #1
 8005afc:	2300      	movne	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d105      	bne.n	8005b1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <prvGetNextExpireTime+0x44>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e001      	b.n	8005b1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000c78 	.word	0x20000c78

08005b30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b38:	f7ff fa86 	bl	8005048 <xTaskGetTickCount>
 8005b3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <prvSampleTimeNow+0x3c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d205      	bcs.n	8005b54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b48:	f000 f908 	bl	8005d5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b5a:	4a04      	ldr	r2, [pc, #16]	; (8005b6c <prvSampleTimeNow+0x3c>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000c88 	.word	0x20000c88

08005b70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d812      	bhi.n	8005bbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e01b      	b.n	8005be2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005baa:	4b10      	ldr	r3, [pc, #64]	; (8005bec <prvInsertTimerInActiveList+0x7c>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f7fe f965 	bl	8003e84 <vListInsert>
 8005bba:	e012      	b.n	8005be2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d206      	bcs.n	8005bd2 <prvInsertTimerInActiveList+0x62>
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d302      	bcc.n	8005bd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e007      	b.n	8005be2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bd2:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <prvInsertTimerInActiveList+0x80>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f7fe f951 	bl	8003e84 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000c7c 	.word	0x20000c7c
 8005bf0:	20000c78 	.word	0x20000c78

08005bf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08e      	sub	sp, #56	; 0x38
 8005bf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bfa:	e09d      	b.n	8005d38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da18      	bge.n	8005c34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	3304      	adds	r3, #4
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	61fb      	str	r3, [r7, #28]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2a:	6850      	ldr	r0, [r2, #4]
 8005c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2e:	6892      	ldr	r2, [r2, #8]
 8005c30:	4611      	mov	r1, r2
 8005c32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	db7d      	blt.n	8005d36 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe f952 	bl	8003ef4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c50:	463b      	mov	r3, r7
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff ff6c 	bl	8005b30 <prvSampleTimeNow>
 8005c58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b09      	cmp	r3, #9
 8005c5e:	d86b      	bhi.n	8005d38 <prvProcessReceivedCommands+0x144>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <prvProcessReceivedCommands+0x74>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005c91 	.word	0x08005c91
 8005c74:	08005d39 	.word	0x08005d39
 8005c78:	08005ced 	.word	0x08005ced
 8005c7c:	08005d25 	.word	0x08005d25
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005c91 	.word	0x08005c91
 8005c88:	08005d39 	.word	0x08005d39
 8005c8c:	08005ced 	.word	0x08005ced
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	18d1      	adds	r1, r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9e:	f7ff ff67 	bl	8005b70 <prvInsertTimerInActiveList>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d047      	beq.n	8005d38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d13f      	bne.n	8005d38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	441a      	add	r2, r3
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cca:	f7ff fe1f 	bl	800590c <xTimerGenericCommand>
 8005cce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d130      	bne.n	8005d38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	61bb      	str	r3, [r7, #24]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	617b      	str	r3, [r7, #20]
}
 8005d0c:	bf00      	nop
 8005d0e:	e7fe      	b.n	8005d0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	18d1      	adds	r1, r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d1e:	f7ff ff27 	bl	8005b70 <prvInsertTimerInActiveList>
					break;
 8005d22:	e009      	b.n	8005d38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d30:	f000 fb68 	bl	8006404 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d34:	e000      	b.n	8005d38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <prvProcessReceivedCommands+0x164>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	1d39      	adds	r1, r7, #4
 8005d3e:	2200      	movs	r2, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fe fbd7 	bl	80044f4 <xQueueReceive>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f47f af57 	bne.w	8005bfc <prvProcessReceivedCommands+0x8>
	}
}
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	3730      	adds	r7, #48	; 0x30
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000c80 	.word	0x20000c80

08005d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d62:	e045      	b.n	8005df0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d64:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <prvSwitchTimerLists+0xbc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d6e:	4b2a      	ldr	r3, [pc, #168]	; (8005e18 <prvSwitchTimerLists+0xbc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe f8b9 	bl	8003ef4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d12e      	bne.n	8005df0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d90e      	bls.n	8005dc2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005db0:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <prvSwitchTimerLists+0xbc>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f7fe f862 	bl	8003e84 <vListInsert>
 8005dc0:	e016      	b.n	8005df0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff fd9d 	bl	800590c <xTimerGenericCommand>
 8005dd2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	603b      	str	r3, [r7, #0]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <prvSwitchTimerLists+0xbc>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1b4      	bne.n	8005d64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005dfa:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <prvSwitchTimerLists+0xbc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <prvSwitchTimerLists+0xc0>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <prvSwitchTimerLists+0xbc>)
 8005e06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <prvSwitchTimerLists+0xc0>)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6013      	str	r3, [r2, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000c78 	.word	0x20000c78
 8005e1c:	20000c7c 	.word	0x20000c7c

08005e20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e26:	f000 f929 	bl	800607c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <prvCheckForValidListAndQueue+0x60>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d120      	bne.n	8005e74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e32:	4814      	ldr	r0, [pc, #80]	; (8005e84 <prvCheckForValidListAndQueue+0x64>)
 8005e34:	f7fd ffd8 	bl	8003de8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e38:	4813      	ldr	r0, [pc, #76]	; (8005e88 <prvCheckForValidListAndQueue+0x68>)
 8005e3a:	f7fd ffd5 	bl	8003de8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <prvCheckForValidListAndQueue+0x6c>)
 8005e40:	4a10      	ldr	r2, [pc, #64]	; (8005e84 <prvCheckForValidListAndQueue+0x64>)
 8005e42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e44:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <prvCheckForValidListAndQueue+0x70>)
 8005e46:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <prvCheckForValidListAndQueue+0x68>)
 8005e48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <prvCheckForValidListAndQueue+0x74>)
 8005e50:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <prvCheckForValidListAndQueue+0x78>)
 8005e52:	2110      	movs	r1, #16
 8005e54:	200a      	movs	r0, #10
 8005e56:	f7fe f8df 	bl	8004018 <xQueueGenericCreateStatic>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <prvCheckForValidListAndQueue+0x60>)
 8005e5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <prvCheckForValidListAndQueue+0x60>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <prvCheckForValidListAndQueue+0x60>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	490b      	ldr	r1, [pc, #44]	; (8005e9c <prvCheckForValidListAndQueue+0x7c>)
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe fdb0 	bl	80049d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e74:	f000 f932 	bl	80060dc <vPortExitCritical>
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000c80 	.word	0x20000c80
 8005e84:	20000c50 	.word	0x20000c50
 8005e88:	20000c64 	.word	0x20000c64
 8005e8c:	20000c78 	.word	0x20000c78
 8005e90:	20000c7c 	.word	0x20000c7c
 8005e94:	20000d2c 	.word	0x20000d2c
 8005e98:	20000c8c 	.word	0x20000c8c
 8005e9c:	08006fc4 	.word	0x08006fc4

08005ea0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3b04      	subs	r3, #4
 8005eb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3b04      	subs	r3, #4
 8005ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f023 0201 	bic.w	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3b04      	subs	r3, #4
 8005ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ed0:	4a08      	ldr	r2, [pc, #32]	; (8005ef4 <pxPortInitialiseStack+0x54>)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3b14      	subs	r3, #20
 8005eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b20      	subs	r3, #32
 8005ee6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr
 8005ef4:	08005ef9 	.word	0x08005ef9

08005ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <prvTaskExitError+0x54>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d00a      	beq.n	8005f22 <prvTaskExitError+0x2a>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	60fb      	str	r3, [r7, #12]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <prvTaskExitError+0x28>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60bb      	str	r3, [r7, #8]
}
 8005f34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f36:	bf00      	nop
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0fc      	beq.n	8005f38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	2000000c 	.word	0x2000000c

08005f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <pxCurrentTCBConst2>)
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	6808      	ldr	r0, [r1, #0]
 8005f56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f5a:	f380 8809 	msr	PSP, r0
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f380 8811 	msr	BASEPRI, r0
 8005f6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005f6e:	4770      	bx	lr

08005f70 <pxCurrentTCBConst2>:
 8005f70:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop

08005f78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005f78:	4806      	ldr	r0, [pc, #24]	; (8005f94 <prvPortStartFirstTask+0x1c>)
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	6800      	ldr	r0, [r0, #0]
 8005f7e:	f380 8808 	msr	MSP, r0
 8005f82:	b662      	cpsie	i
 8005f84:	b661      	cpsie	f
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	df00      	svc	0
 8005f90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f92:	bf00      	nop
 8005f94:	e000ed08 	.word	0xe000ed08

08005f98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f9e:	4b32      	ldr	r3, [pc, #200]	; (8006068 <xPortStartScheduler+0xd0>)
 8005fa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	22ff      	movs	r2, #255	; 0xff
 8005fae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	4b2a      	ldr	r3, [pc, #168]	; (800606c <xPortStartScheduler+0xd4>)
 8005fc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fc6:	4b2a      	ldr	r3, [pc, #168]	; (8006070 <xPortStartScheduler+0xd8>)
 8005fc8:	2207      	movs	r2, #7
 8005fca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fcc:	e009      	b.n	8005fe2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005fce:	4b28      	ldr	r3, [pc, #160]	; (8006070 <xPortStartScheduler+0xd8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	4a26      	ldr	r2, [pc, #152]	; (8006070 <xPortStartScheduler+0xd8>)
 8005fd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b80      	cmp	r3, #128	; 0x80
 8005fec:	d0ef      	beq.n	8005fce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fee:	4b20      	ldr	r3, [pc, #128]	; (8006070 <xPortStartScheduler+0xd8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1c3 0307 	rsb	r3, r3, #7
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d00a      	beq.n	8006010 <xPortStartScheduler+0x78>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60bb      	str	r3, [r7, #8]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006010:	4b17      	ldr	r3, [pc, #92]	; (8006070 <xPortStartScheduler+0xd8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	4a16      	ldr	r2, [pc, #88]	; (8006070 <xPortStartScheduler+0xd8>)
 8006018:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800601a:	4b15      	ldr	r3, [pc, #84]	; (8006070 <xPortStartScheduler+0xd8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006022:	4a13      	ldr	r2, [pc, #76]	; (8006070 <xPortStartScheduler+0xd8>)
 8006024:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <xPortStartScheduler+0xdc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a10      	ldr	r2, [pc, #64]	; (8006074 <xPortStartScheduler+0xdc>)
 8006034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <xPortStartScheduler+0xdc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a0d      	ldr	r2, [pc, #52]	; (8006074 <xPortStartScheduler+0xdc>)
 8006040:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006044:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006046:	f000 f8b9 	bl	80061bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800604a:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <xPortStartScheduler+0xe0>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006050:	f7ff ff92 	bl	8005f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006054:	f7ff f8c4 	bl	80051e0 <vTaskSwitchContext>
	prvTaskExitError();
 8006058:	f7ff ff4e 	bl	8005ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	e000e400 	.word	0xe000e400
 800606c:	20000d7c 	.word	0x20000d7c
 8006070:	20000d80 	.word	0x20000d80
 8006074:	e000ed20 	.word	0xe000ed20
 8006078:	2000000c 	.word	0x2000000c

0800607c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
}
 8006094:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006096:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <vPortEnterCritical+0x58>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	4a0d      	ldr	r2, [pc, #52]	; (80060d4 <vPortEnterCritical+0x58>)
 800609e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060a0:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <vPortEnterCritical+0x58>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d10f      	bne.n	80060c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <vPortEnterCritical+0x5c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	603b      	str	r3, [r7, #0]
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <vPortEnterCritical+0x4a>
	}
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	2000000c 	.word	0x2000000c
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060e2:	4b11      	ldr	r3, [pc, #68]	; (8006128 <vPortExitCritical+0x4c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <vPortExitCritical+0x24>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	607b      	str	r3, [r7, #4]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006100:	4b09      	ldr	r3, [pc, #36]	; (8006128 <vPortExitCritical+0x4c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3b01      	subs	r3, #1
 8006106:	4a08      	ldr	r2, [pc, #32]	; (8006128 <vPortExitCritical+0x4c>)
 8006108:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <vPortExitCritical+0x4c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d105      	bne.n	800611e <vPortExitCritical+0x42>
 8006112:	2300      	movs	r3, #0
 8006114:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	f383 8811 	msr	BASEPRI, r3
}
 800611c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	2000000c 	.word	0x2000000c
 800612c:	00000000 	.word	0x00000000

08006130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006130:	f3ef 8009 	mrs	r0, PSP
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <pxCurrentTCBConst>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006140:	6010      	str	r0, [r2, #0]
 8006142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006146:	f04f 0050 	mov.w	r0, #80	; 0x50
 800614a:	f380 8811 	msr	BASEPRI, r0
 800614e:	f7ff f847 	bl	80051e0 <vTaskSwitchContext>
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8811 	msr	BASEPRI, r0
 800615a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800615e:	6819      	ldr	r1, [r3, #0]
 8006160:	6808      	ldr	r0, [r1, #0]
 8006162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006166:	f380 8809 	msr	PSP, r0
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	4770      	bx	lr

08006170 <pxCurrentTCBConst>:
 8006170:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop

08006178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
}
 8006190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006192:	f7fe ff67 	bl	8005064 <xTaskIncrementTick>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800619c:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <SysTick_Handler+0x40>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f383 8811 	msr	BASEPRI, r3
}
 80061ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <vPortSetupTimerInterrupt+0x30>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <vPortSetupTimerInterrupt+0x34>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <vPortSetupTimerInterrupt+0x38>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <vPortSetupTimerInterrupt+0x3c>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	099b      	lsrs	r3, r3, #6
 80061d8:	4a08      	ldr	r2, [pc, #32]	; (80061fc <vPortSetupTimerInterrupt+0x40>)
 80061da:	3b01      	subs	r3, #1
 80061dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061de:	4b03      	ldr	r3, [pc, #12]	; (80061ec <vPortSetupTimerInterrupt+0x30>)
 80061e0:	2207      	movs	r2, #7
 80061e2:	601a      	str	r2, [r3, #0]
}
 80061e4:	bf00      	nop
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr
 80061ec:	e000e010 	.word	0xe000e010
 80061f0:	e000e018 	.word	0xe000e018
 80061f4:	20000000 	.word	0x20000000
 80061f8:	10624dd3 	.word	0x10624dd3
 80061fc:	e000e014 	.word	0xe000e014

08006200 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006206:	f3ef 8305 	mrs	r3, IPSR
 800620a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b0f      	cmp	r3, #15
 8006210:	d914      	bls.n	800623c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006212:	4a16      	ldr	r2, [pc, #88]	; (800626c <vPortValidateInterruptPriority+0x6c>)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800621c:	4b14      	ldr	r3, [pc, #80]	; (8006270 <vPortValidateInterruptPriority+0x70>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	7afa      	ldrb	r2, [r7, #11]
 8006222:	429a      	cmp	r2, r3
 8006224:	d20a      	bcs.n	800623c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	607b      	str	r3, [r7, #4]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800623c:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <vPortValidateInterruptPriority+0x74>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <vPortValidateInterruptPriority+0x78>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d90a      	bls.n	8006262 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	603b      	str	r3, [r7, #0]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <vPortValidateInterruptPriority+0x60>
	}
 8006262:	bf00      	nop
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	e000e3f0 	.word	0xe000e3f0
 8006270:	20000d7c 	.word	0x20000d7c
 8006274:	e000ed0c 	.word	0xe000ed0c
 8006278:	20000d80 	.word	0x20000d80

0800627c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006288:	f7fe fe32 	bl	8004ef0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800628c:	4b58      	ldr	r3, [pc, #352]	; (80063f0 <pvPortMalloc+0x174>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006294:	f000 f910 	bl	80064b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006298:	4b56      	ldr	r3, [pc, #344]	; (80063f4 <pvPortMalloc+0x178>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f040 808e 	bne.w	80063c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01d      	beq.n	80062e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062ac:	2208      	movs	r2, #8
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4413      	add	r3, r2
 80062b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d014      	beq.n	80062e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f023 0307 	bic.w	r3, r3, #7
 80062c4:	3308      	adds	r3, #8
 80062c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <pvPortMalloc+0x6c>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	617b      	str	r3, [r7, #20]
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d069      	beq.n	80063c2 <pvPortMalloc+0x146>
 80062ee:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <pvPortMalloc+0x17c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d864      	bhi.n	80063c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062f8:	4b40      	ldr	r3, [pc, #256]	; (80063fc <pvPortMalloc+0x180>)
 80062fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062fc:	4b3f      	ldr	r3, [pc, #252]	; (80063fc <pvPortMalloc+0x180>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006302:	e004      	b.n	800630e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	429a      	cmp	r2, r3
 8006316:	d903      	bls.n	8006320 <pvPortMalloc+0xa4>
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f1      	bne.n	8006304 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006320:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <pvPortMalloc+0x174>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006326:	429a      	cmp	r2, r3
 8006328:	d04b      	beq.n	80063c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2208      	movs	r2, #8
 8006330:	4413      	add	r3, r2
 8006332:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	1ad2      	subs	r2, r2, r3
 8006344:	2308      	movs	r3, #8
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	429a      	cmp	r2, r3
 800634a:	d91f      	bls.n	800638c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800634c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4413      	add	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <pvPortMalloc+0xf8>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	613b      	str	r3, [r7, #16]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	1ad2      	subs	r2, r2, r3
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006386:	69b8      	ldr	r0, [r7, #24]
 8006388:	f000 f8f8 	bl	800657c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <pvPortMalloc+0x17c>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <pvPortMalloc+0x17c>)
 8006398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800639a:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <pvPortMalloc+0x17c>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b18      	ldr	r3, [pc, #96]	; (8006400 <pvPortMalloc+0x184>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d203      	bcs.n	80063ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <pvPortMalloc+0x17c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <pvPortMalloc+0x184>)
 80063ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <pvPortMalloc+0x178>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063c2:	f7fe fda3 	bl	8004f0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <pvPortMalloc+0x16a>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <pvPortMalloc+0x168>
	return pvReturn;
 80063e6:	69fb      	ldr	r3, [r7, #28]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3728      	adds	r7, #40	; 0x28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	2000198c 	.word	0x2000198c
 80063f4:	20001998 	.word	0x20001998
 80063f8:	20001990 	.word	0x20001990
 80063fc:	20001984 	.word	0x20001984
 8006400:	20001994 	.word	0x20001994

08006404 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d048      	beq.n	80064a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006416:	2308      	movs	r3, #8
 8006418:	425b      	negs	r3, r3
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4413      	add	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	4b21      	ldr	r3, [pc, #132]	; (80064b0 <vPortFree+0xac>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <vPortFree+0x44>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60fb      	str	r3, [r7, #12]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <vPortFree+0x62>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60bb      	str	r3, [r7, #8]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <vPortFree+0xac>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4013      	ands	r3, r2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d019      	beq.n	80064a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d115      	bne.n	80064a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <vPortFree+0xac>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	43db      	mvns	r3, r3
 8006486:	401a      	ands	r2, r3
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800648c:	f7fe fd30 	bl	8004ef0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <vPortFree+0xb0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4413      	add	r3, r2
 800649a:	4a06      	ldr	r2, [pc, #24]	; (80064b4 <vPortFree+0xb0>)
 800649c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f000 f86c 	bl	800657c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80064a4:	f7fe fd32 	bl	8004f0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064a8:	bf00      	nop
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20001998 	.word	0x20001998
 80064b4:	20001990 	.word	0x20001990

080064b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80064c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064c4:	4b27      	ldr	r3, [pc, #156]	; (8006564 <prvHeapInit+0xac>)
 80064c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00c      	beq.n	80064ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3307      	adds	r3, #7
 80064d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0307 	bic.w	r3, r3, #7
 80064de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <prvHeapInit+0xac>)
 80064e8:	4413      	add	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064f0:	4a1d      	ldr	r2, [pc, #116]	; (8006568 <prvHeapInit+0xb0>)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064f6:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <prvHeapInit+0xb0>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4413      	add	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006504:	2208      	movs	r2, #8
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0307 	bic.w	r3, r3, #7
 8006512:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4a15      	ldr	r2, [pc, #84]	; (800656c <prvHeapInit+0xb4>)
 8006518:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800651a:	4b14      	ldr	r3, [pc, #80]	; (800656c <prvHeapInit+0xb4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <prvHeapInit+0xb4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <prvHeapInit+0xb4>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <prvHeapInit+0xb8>)
 8006546:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4a09      	ldr	r2, [pc, #36]	; (8006574 <prvHeapInit+0xbc>)
 800654e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006550:	4b09      	ldr	r3, [pc, #36]	; (8006578 <prvHeapInit+0xc0>)
 8006552:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006556:	601a      	str	r2, [r3, #0]
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000d84 	.word	0x20000d84
 8006568:	20001984 	.word	0x20001984
 800656c:	2000198c 	.word	0x2000198c
 8006570:	20001994 	.word	0x20001994
 8006574:	20001990 	.word	0x20001990
 8006578:	20001998 	.word	0x20001998

0800657c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006584:	4b27      	ldr	r3, [pc, #156]	; (8006624 <prvInsertBlockIntoFreeList+0xa8>)
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	e002      	b.n	8006590 <prvInsertBlockIntoFreeList+0x14>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d8f7      	bhi.n	800658a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	4413      	add	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d108      	bne.n	80065be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	441a      	add	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	441a      	add	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d118      	bne.n	8006604 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <prvInsertBlockIntoFreeList+0xac>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d00d      	beq.n	80065fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	441a      	add	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	e008      	b.n	800660c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <prvInsertBlockIntoFreeList+0xac>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	e003      	b.n	800660c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d002      	beq.n	800661a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	20001984 	.word	0x20001984
 8006628:	2000198c 	.word	0x2000198c

0800662c <__errno>:
 800662c:	4b01      	ldr	r3, [pc, #4]	; (8006634 <__errno+0x8>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000010 	.word	0x20000010

08006638 <__libc_init_array>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	2600      	movs	r6, #0
 800663c:	4d0c      	ldr	r5, [pc, #48]	; (8006670 <__libc_init_array+0x38>)
 800663e:	4c0d      	ldr	r4, [pc, #52]	; (8006674 <__libc_init_array+0x3c>)
 8006640:	1b64      	subs	r4, r4, r5
 8006642:	10a4      	asrs	r4, r4, #2
 8006644:	42a6      	cmp	r6, r4
 8006646:	d109      	bne.n	800665c <__libc_init_array+0x24>
 8006648:	f000 fc5c 	bl	8006f04 <_init>
 800664c:	2600      	movs	r6, #0
 800664e:	4d0a      	ldr	r5, [pc, #40]	; (8006678 <__libc_init_array+0x40>)
 8006650:	4c0a      	ldr	r4, [pc, #40]	; (800667c <__libc_init_array+0x44>)
 8006652:	1b64      	subs	r4, r4, r5
 8006654:	10a4      	asrs	r4, r4, #2
 8006656:	42a6      	cmp	r6, r4
 8006658:	d105      	bne.n	8006666 <__libc_init_array+0x2e>
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006660:	4798      	blx	r3
 8006662:	3601      	adds	r6, #1
 8006664:	e7ee      	b.n	8006644 <__libc_init_array+0xc>
 8006666:	f855 3b04 	ldr.w	r3, [r5], #4
 800666a:	4798      	blx	r3
 800666c:	3601      	adds	r6, #1
 800666e:	e7f2      	b.n	8006656 <__libc_init_array+0x1e>
 8006670:	08007078 	.word	0x08007078
 8006674:	08007078 	.word	0x08007078
 8006678:	08007078 	.word	0x08007078
 800667c:	0800707c 	.word	0x0800707c

08006680 <memcpy>:
 8006680:	440a      	add	r2, r1
 8006682:	4291      	cmp	r1, r2
 8006684:	f100 33ff 	add.w	r3, r0, #4294967295
 8006688:	d100      	bne.n	800668c <memcpy+0xc>
 800668a:	4770      	bx	lr
 800668c:	b510      	push	{r4, lr}
 800668e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006692:	4291      	cmp	r1, r2
 8006694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006698:	d1f9      	bne.n	800668e <memcpy+0xe>
 800669a:	bd10      	pop	{r4, pc}

0800669c <memset>:
 800669c:	4603      	mov	r3, r0
 800669e:	4402      	add	r2, r0
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d100      	bne.n	80066a6 <memset+0xa>
 80066a4:	4770      	bx	lr
 80066a6:	f803 1b01 	strb.w	r1, [r3], #1
 80066aa:	e7f9      	b.n	80066a0 <memset+0x4>

080066ac <siprintf>:
 80066ac:	b40e      	push	{r1, r2, r3}
 80066ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066b2:	b500      	push	{lr}
 80066b4:	b09c      	sub	sp, #112	; 0x70
 80066b6:	ab1d      	add	r3, sp, #116	; 0x74
 80066b8:	9002      	str	r0, [sp, #8]
 80066ba:	9006      	str	r0, [sp, #24]
 80066bc:	9107      	str	r1, [sp, #28]
 80066be:	9104      	str	r1, [sp, #16]
 80066c0:	4808      	ldr	r0, [pc, #32]	; (80066e4 <siprintf+0x38>)
 80066c2:	4909      	ldr	r1, [pc, #36]	; (80066e8 <siprintf+0x3c>)
 80066c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c8:	9105      	str	r1, [sp, #20]
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	a902      	add	r1, sp, #8
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	f000 f868 	bl	80067a4 <_svfiprintf_r>
 80066d4:	2200      	movs	r2, #0
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	b01c      	add	sp, #112	; 0x70
 80066dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80066e0:	b003      	add	sp, #12
 80066e2:	4770      	bx	lr
 80066e4:	20000010 	.word	0x20000010
 80066e8:	ffff0208 	.word	0xffff0208

080066ec <__ssputs_r>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	688e      	ldr	r6, [r1, #8]
 80066f2:	4682      	mov	sl, r0
 80066f4:	429e      	cmp	r6, r3
 80066f6:	460c      	mov	r4, r1
 80066f8:	4690      	mov	r8, r2
 80066fa:	461f      	mov	r7, r3
 80066fc:	d838      	bhi.n	8006770 <__ssputs_r+0x84>
 80066fe:	898a      	ldrh	r2, [r1, #12]
 8006700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006704:	d032      	beq.n	800676c <__ssputs_r+0x80>
 8006706:	6825      	ldr	r5, [r4, #0]
 8006708:	6909      	ldr	r1, [r1, #16]
 800670a:	3301      	adds	r3, #1
 800670c:	eba5 0901 	sub.w	r9, r5, r1
 8006710:	6965      	ldr	r5, [r4, #20]
 8006712:	444b      	add	r3, r9
 8006714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800671c:	106d      	asrs	r5, r5, #1
 800671e:	429d      	cmp	r5, r3
 8006720:	bf38      	it	cc
 8006722:	461d      	movcc	r5, r3
 8006724:	0553      	lsls	r3, r2, #21
 8006726:	d531      	bpl.n	800678c <__ssputs_r+0xa0>
 8006728:	4629      	mov	r1, r5
 800672a:	f000 fb45 	bl	8006db8 <_malloc_r>
 800672e:	4606      	mov	r6, r0
 8006730:	b950      	cbnz	r0, 8006748 <__ssputs_r+0x5c>
 8006732:	230c      	movs	r3, #12
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	f8ca 3000 	str.w	r3, [sl]
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006748:	464a      	mov	r2, r9
 800674a:	6921      	ldr	r1, [r4, #16]
 800674c:	f7ff ff98 	bl	8006680 <memcpy>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675a:	81a3      	strh	r3, [r4, #12]
 800675c:	6126      	str	r6, [r4, #16]
 800675e:	444e      	add	r6, r9
 8006760:	6026      	str	r6, [r4, #0]
 8006762:	463e      	mov	r6, r7
 8006764:	6165      	str	r5, [r4, #20]
 8006766:	eba5 0509 	sub.w	r5, r5, r9
 800676a:	60a5      	str	r5, [r4, #8]
 800676c:	42be      	cmp	r6, r7
 800676e:	d900      	bls.n	8006772 <__ssputs_r+0x86>
 8006770:	463e      	mov	r6, r7
 8006772:	4632      	mov	r2, r6
 8006774:	4641      	mov	r1, r8
 8006776:	6820      	ldr	r0, [r4, #0]
 8006778:	f000 fab8 	bl	8006cec <memmove>
 800677c:	68a3      	ldr	r3, [r4, #8]
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	1b9b      	subs	r3, r3, r6
 8006782:	4432      	add	r2, r6
 8006784:	2000      	movs	r0, #0
 8006786:	60a3      	str	r3, [r4, #8]
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	e7db      	b.n	8006744 <__ssputs_r+0x58>
 800678c:	462a      	mov	r2, r5
 800678e:	f000 fb6d 	bl	8006e6c <_realloc_r>
 8006792:	4606      	mov	r6, r0
 8006794:	2800      	cmp	r0, #0
 8006796:	d1e1      	bne.n	800675c <__ssputs_r+0x70>
 8006798:	4650      	mov	r0, sl
 800679a:	6921      	ldr	r1, [r4, #16]
 800679c:	f000 fac0 	bl	8006d20 <_free_r>
 80067a0:	e7c7      	b.n	8006732 <__ssputs_r+0x46>
	...

080067a4 <_svfiprintf_r>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	4698      	mov	r8, r3
 80067aa:	898b      	ldrh	r3, [r1, #12]
 80067ac:	4607      	mov	r7, r0
 80067ae:	061b      	lsls	r3, r3, #24
 80067b0:	460d      	mov	r5, r1
 80067b2:	4614      	mov	r4, r2
 80067b4:	b09d      	sub	sp, #116	; 0x74
 80067b6:	d50e      	bpl.n	80067d6 <_svfiprintf_r+0x32>
 80067b8:	690b      	ldr	r3, [r1, #16]
 80067ba:	b963      	cbnz	r3, 80067d6 <_svfiprintf_r+0x32>
 80067bc:	2140      	movs	r1, #64	; 0x40
 80067be:	f000 fafb 	bl	8006db8 <_malloc_r>
 80067c2:	6028      	str	r0, [r5, #0]
 80067c4:	6128      	str	r0, [r5, #16]
 80067c6:	b920      	cbnz	r0, 80067d2 <_svfiprintf_r+0x2e>
 80067c8:	230c      	movs	r3, #12
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	e0d1      	b.n	8006976 <_svfiprintf_r+0x1d2>
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	616b      	str	r3, [r5, #20]
 80067d6:	2300      	movs	r3, #0
 80067d8:	9309      	str	r3, [sp, #36]	; 0x24
 80067da:	2320      	movs	r3, #32
 80067dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067e0:	2330      	movs	r3, #48	; 0x30
 80067e2:	f04f 0901 	mov.w	r9, #1
 80067e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006990 <_svfiprintf_r+0x1ec>
 80067ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067f2:	4623      	mov	r3, r4
 80067f4:	469a      	mov	sl, r3
 80067f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067fa:	b10a      	cbz	r2, 8006800 <_svfiprintf_r+0x5c>
 80067fc:	2a25      	cmp	r2, #37	; 0x25
 80067fe:	d1f9      	bne.n	80067f4 <_svfiprintf_r+0x50>
 8006800:	ebba 0b04 	subs.w	fp, sl, r4
 8006804:	d00b      	beq.n	800681e <_svfiprintf_r+0x7a>
 8006806:	465b      	mov	r3, fp
 8006808:	4622      	mov	r2, r4
 800680a:	4629      	mov	r1, r5
 800680c:	4638      	mov	r0, r7
 800680e:	f7ff ff6d 	bl	80066ec <__ssputs_r>
 8006812:	3001      	adds	r0, #1
 8006814:	f000 80aa 	beq.w	800696c <_svfiprintf_r+0x1c8>
 8006818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800681a:	445a      	add	r2, fp
 800681c:	9209      	str	r2, [sp, #36]	; 0x24
 800681e:	f89a 3000 	ldrb.w	r3, [sl]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80a2 	beq.w	800696c <_svfiprintf_r+0x1c8>
 8006828:	2300      	movs	r3, #0
 800682a:	f04f 32ff 	mov.w	r2, #4294967295
 800682e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006832:	f10a 0a01 	add.w	sl, sl, #1
 8006836:	9304      	str	r3, [sp, #16]
 8006838:	9307      	str	r3, [sp, #28]
 800683a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800683e:	931a      	str	r3, [sp, #104]	; 0x68
 8006840:	4654      	mov	r4, sl
 8006842:	2205      	movs	r2, #5
 8006844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006848:	4851      	ldr	r0, [pc, #324]	; (8006990 <_svfiprintf_r+0x1ec>)
 800684a:	f000 fa41 	bl	8006cd0 <memchr>
 800684e:	9a04      	ldr	r2, [sp, #16]
 8006850:	b9d8      	cbnz	r0, 800688a <_svfiprintf_r+0xe6>
 8006852:	06d0      	lsls	r0, r2, #27
 8006854:	bf44      	itt	mi
 8006856:	2320      	movmi	r3, #32
 8006858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685c:	0711      	lsls	r1, r2, #28
 800685e:	bf44      	itt	mi
 8006860:	232b      	movmi	r3, #43	; 0x2b
 8006862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006866:	f89a 3000 	ldrb.w	r3, [sl]
 800686a:	2b2a      	cmp	r3, #42	; 0x2a
 800686c:	d015      	beq.n	800689a <_svfiprintf_r+0xf6>
 800686e:	4654      	mov	r4, sl
 8006870:	2000      	movs	r0, #0
 8006872:	f04f 0c0a 	mov.w	ip, #10
 8006876:	9a07      	ldr	r2, [sp, #28]
 8006878:	4621      	mov	r1, r4
 800687a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800687e:	3b30      	subs	r3, #48	; 0x30
 8006880:	2b09      	cmp	r3, #9
 8006882:	d94e      	bls.n	8006922 <_svfiprintf_r+0x17e>
 8006884:	b1b0      	cbz	r0, 80068b4 <_svfiprintf_r+0x110>
 8006886:	9207      	str	r2, [sp, #28]
 8006888:	e014      	b.n	80068b4 <_svfiprintf_r+0x110>
 800688a:	eba0 0308 	sub.w	r3, r0, r8
 800688e:	fa09 f303 	lsl.w	r3, r9, r3
 8006892:	4313      	orrs	r3, r2
 8006894:	46a2      	mov	sl, r4
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	e7d2      	b.n	8006840 <_svfiprintf_r+0x9c>
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	1d19      	adds	r1, r3, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	9103      	str	r1, [sp, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bfbb      	ittet	lt
 80068a6:	425b      	neglt	r3, r3
 80068a8:	f042 0202 	orrlt.w	r2, r2, #2
 80068ac:	9307      	strge	r3, [sp, #28]
 80068ae:	9307      	strlt	r3, [sp, #28]
 80068b0:	bfb8      	it	lt
 80068b2:	9204      	strlt	r2, [sp, #16]
 80068b4:	7823      	ldrb	r3, [r4, #0]
 80068b6:	2b2e      	cmp	r3, #46	; 0x2e
 80068b8:	d10c      	bne.n	80068d4 <_svfiprintf_r+0x130>
 80068ba:	7863      	ldrb	r3, [r4, #1]
 80068bc:	2b2a      	cmp	r3, #42	; 0x2a
 80068be:	d135      	bne.n	800692c <_svfiprintf_r+0x188>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	3402      	adds	r4, #2
 80068c4:	1d1a      	adds	r2, r3, #4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	9203      	str	r2, [sp, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bfb8      	it	lt
 80068ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069a0 <_svfiprintf_r+0x1fc>
 80068d8:	2203      	movs	r2, #3
 80068da:	4650      	mov	r0, sl
 80068dc:	7821      	ldrb	r1, [r4, #0]
 80068de:	f000 f9f7 	bl	8006cd0 <memchr>
 80068e2:	b140      	cbz	r0, 80068f6 <_svfiprintf_r+0x152>
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	eba0 000a 	sub.w	r0, r0, sl
 80068ea:	fa03 f000 	lsl.w	r0, r3, r0
 80068ee:	9b04      	ldr	r3, [sp, #16]
 80068f0:	3401      	adds	r4, #1
 80068f2:	4303      	orrs	r3, r0
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068fa:	2206      	movs	r2, #6
 80068fc:	4825      	ldr	r0, [pc, #148]	; (8006994 <_svfiprintf_r+0x1f0>)
 80068fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006902:	f000 f9e5 	bl	8006cd0 <memchr>
 8006906:	2800      	cmp	r0, #0
 8006908:	d038      	beq.n	800697c <_svfiprintf_r+0x1d8>
 800690a:	4b23      	ldr	r3, [pc, #140]	; (8006998 <_svfiprintf_r+0x1f4>)
 800690c:	bb1b      	cbnz	r3, 8006956 <_svfiprintf_r+0x1b2>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	3307      	adds	r3, #7
 8006912:	f023 0307 	bic.w	r3, r3, #7
 8006916:	3308      	adds	r3, #8
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691c:	4433      	add	r3, r6
 800691e:	9309      	str	r3, [sp, #36]	; 0x24
 8006920:	e767      	b.n	80067f2 <_svfiprintf_r+0x4e>
 8006922:	460c      	mov	r4, r1
 8006924:	2001      	movs	r0, #1
 8006926:	fb0c 3202 	mla	r2, ip, r2, r3
 800692a:	e7a5      	b.n	8006878 <_svfiprintf_r+0xd4>
 800692c:	2300      	movs	r3, #0
 800692e:	f04f 0c0a 	mov.w	ip, #10
 8006932:	4619      	mov	r1, r3
 8006934:	3401      	adds	r4, #1
 8006936:	9305      	str	r3, [sp, #20]
 8006938:	4620      	mov	r0, r4
 800693a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800693e:	3a30      	subs	r2, #48	; 0x30
 8006940:	2a09      	cmp	r2, #9
 8006942:	d903      	bls.n	800694c <_svfiprintf_r+0x1a8>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0c5      	beq.n	80068d4 <_svfiprintf_r+0x130>
 8006948:	9105      	str	r1, [sp, #20]
 800694a:	e7c3      	b.n	80068d4 <_svfiprintf_r+0x130>
 800694c:	4604      	mov	r4, r0
 800694e:	2301      	movs	r3, #1
 8006950:	fb0c 2101 	mla	r1, ip, r1, r2
 8006954:	e7f0      	b.n	8006938 <_svfiprintf_r+0x194>
 8006956:	ab03      	add	r3, sp, #12
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	462a      	mov	r2, r5
 800695c:	4638      	mov	r0, r7
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <_svfiprintf_r+0x1f8>)
 8006960:	a904      	add	r1, sp, #16
 8006962:	f3af 8000 	nop.w
 8006966:	1c42      	adds	r2, r0, #1
 8006968:	4606      	mov	r6, r0
 800696a:	d1d6      	bne.n	800691a <_svfiprintf_r+0x176>
 800696c:	89ab      	ldrh	r3, [r5, #12]
 800696e:	065b      	lsls	r3, r3, #25
 8006970:	f53f af2c 	bmi.w	80067cc <_svfiprintf_r+0x28>
 8006974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006976:	b01d      	add	sp, #116	; 0x74
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	ab03      	add	r3, sp, #12
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	462a      	mov	r2, r5
 8006982:	4638      	mov	r0, r7
 8006984:	4b05      	ldr	r3, [pc, #20]	; (800699c <_svfiprintf_r+0x1f8>)
 8006986:	a904      	add	r1, sp, #16
 8006988:	f000 f87c 	bl	8006a84 <_printf_i>
 800698c:	e7eb      	b.n	8006966 <_svfiprintf_r+0x1c2>
 800698e:	bf00      	nop
 8006990:	08007044 	.word	0x08007044
 8006994:	0800704e 	.word	0x0800704e
 8006998:	00000000 	.word	0x00000000
 800699c:	080066ed 	.word	0x080066ed
 80069a0:	0800704a 	.word	0x0800704a

080069a4 <_printf_common>:
 80069a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a8:	4616      	mov	r6, r2
 80069aa:	4699      	mov	r9, r3
 80069ac:	688a      	ldr	r2, [r1, #8]
 80069ae:	690b      	ldr	r3, [r1, #16]
 80069b0:	4607      	mov	r7, r0
 80069b2:	4293      	cmp	r3, r2
 80069b4:	bfb8      	it	lt
 80069b6:	4613      	movlt	r3, r2
 80069b8:	6033      	str	r3, [r6, #0]
 80069ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069be:	460c      	mov	r4, r1
 80069c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069c4:	b10a      	cbz	r2, 80069ca <_printf_common+0x26>
 80069c6:	3301      	adds	r3, #1
 80069c8:	6033      	str	r3, [r6, #0]
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	0699      	lsls	r1, r3, #26
 80069ce:	bf42      	ittt	mi
 80069d0:	6833      	ldrmi	r3, [r6, #0]
 80069d2:	3302      	addmi	r3, #2
 80069d4:	6033      	strmi	r3, [r6, #0]
 80069d6:	6825      	ldr	r5, [r4, #0]
 80069d8:	f015 0506 	ands.w	r5, r5, #6
 80069dc:	d106      	bne.n	80069ec <_printf_common+0x48>
 80069de:	f104 0a19 	add.w	sl, r4, #25
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	6832      	ldr	r2, [r6, #0]
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	42ab      	cmp	r3, r5
 80069ea:	dc28      	bgt.n	8006a3e <_printf_common+0x9a>
 80069ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069f0:	1e13      	subs	r3, r2, #0
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	bf18      	it	ne
 80069f6:	2301      	movne	r3, #1
 80069f8:	0692      	lsls	r2, r2, #26
 80069fa:	d42d      	bmi.n	8006a58 <_printf_common+0xb4>
 80069fc:	4649      	mov	r1, r9
 80069fe:	4638      	mov	r0, r7
 8006a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a04:	47c0      	blx	r8
 8006a06:	3001      	adds	r0, #1
 8006a08:	d020      	beq.n	8006a4c <_printf_common+0xa8>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	68e5      	ldr	r5, [r4, #12]
 8006a0e:	f003 0306 	and.w	r3, r3, #6
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	bf18      	it	ne
 8006a16:	2500      	movne	r5, #0
 8006a18:	6832      	ldr	r2, [r6, #0]
 8006a1a:	f04f 0600 	mov.w	r6, #0
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	bf08      	it	eq
 8006a22:	1aad      	subeq	r5, r5, r2
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	bf08      	it	eq
 8006a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	bfc4      	itt	gt
 8006a30:	1a9b      	subgt	r3, r3, r2
 8006a32:	18ed      	addgt	r5, r5, r3
 8006a34:	341a      	adds	r4, #26
 8006a36:	42b5      	cmp	r5, r6
 8006a38:	d11a      	bne.n	8006a70 <_printf_common+0xcc>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	e008      	b.n	8006a50 <_printf_common+0xac>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4652      	mov	r2, sl
 8006a42:	4649      	mov	r1, r9
 8006a44:	4638      	mov	r0, r7
 8006a46:	47c0      	blx	r8
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d103      	bne.n	8006a54 <_printf_common+0xb0>
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a54:	3501      	adds	r5, #1
 8006a56:	e7c4      	b.n	80069e2 <_printf_common+0x3e>
 8006a58:	2030      	movs	r0, #48	; 0x30
 8006a5a:	18e1      	adds	r1, r4, r3
 8006a5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a66:	4422      	add	r2, r4
 8006a68:	3302      	adds	r3, #2
 8006a6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a6e:	e7c5      	b.n	80069fc <_printf_common+0x58>
 8006a70:	2301      	movs	r3, #1
 8006a72:	4622      	mov	r2, r4
 8006a74:	4649      	mov	r1, r9
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c0      	blx	r8
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d0e6      	beq.n	8006a4c <_printf_common+0xa8>
 8006a7e:	3601      	adds	r6, #1
 8006a80:	e7d9      	b.n	8006a36 <_printf_common+0x92>
	...

08006a84 <_printf_i>:
 8006a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	460c      	mov	r4, r1
 8006a8a:	7e27      	ldrb	r7, [r4, #24]
 8006a8c:	4691      	mov	r9, r2
 8006a8e:	2f78      	cmp	r7, #120	; 0x78
 8006a90:	4680      	mov	r8, r0
 8006a92:	469a      	mov	sl, r3
 8006a94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a9a:	d807      	bhi.n	8006aac <_printf_i+0x28>
 8006a9c:	2f62      	cmp	r7, #98	; 0x62
 8006a9e:	d80a      	bhi.n	8006ab6 <_printf_i+0x32>
 8006aa0:	2f00      	cmp	r7, #0
 8006aa2:	f000 80d9 	beq.w	8006c58 <_printf_i+0x1d4>
 8006aa6:	2f58      	cmp	r7, #88	; 0x58
 8006aa8:	f000 80a4 	beq.w	8006bf4 <_printf_i+0x170>
 8006aac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ab4:	e03a      	b.n	8006b2c <_printf_i+0xa8>
 8006ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aba:	2b15      	cmp	r3, #21
 8006abc:	d8f6      	bhi.n	8006aac <_printf_i+0x28>
 8006abe:	a001      	add	r0, pc, #4	; (adr r0, 8006ac4 <_printf_i+0x40>)
 8006ac0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ac4:	08006b1d 	.word	0x08006b1d
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006aad 	.word	0x08006aad
 8006ad0:	08006aad 	.word	0x08006aad
 8006ad4:	08006aad 	.word	0x08006aad
 8006ad8:	08006aad 	.word	0x08006aad
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006aad 	.word	0x08006aad
 8006ae4:	08006aad 	.word	0x08006aad
 8006ae8:	08006aad 	.word	0x08006aad
 8006aec:	08006aad 	.word	0x08006aad
 8006af0:	08006c3f 	.word	0x08006c3f
 8006af4:	08006b61 	.word	0x08006b61
 8006af8:	08006c21 	.word	0x08006c21
 8006afc:	08006aad 	.word	0x08006aad
 8006b00:	08006aad 	.word	0x08006aad
 8006b04:	08006c61 	.word	0x08006c61
 8006b08:	08006aad 	.word	0x08006aad
 8006b0c:	08006b61 	.word	0x08006b61
 8006b10:	08006aad 	.word	0x08006aad
 8006b14:	08006aad 	.word	0x08006aad
 8006b18:	08006c29 	.word	0x08006c29
 8006b1c:	680b      	ldr	r3, [r1, #0]
 8006b1e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b22:	1d1a      	adds	r2, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	600a      	str	r2, [r1, #0]
 8006b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0a4      	b.n	8006c7a <_printf_i+0x1f6>
 8006b30:	6825      	ldr	r5, [r4, #0]
 8006b32:	6808      	ldr	r0, [r1, #0]
 8006b34:	062e      	lsls	r6, r5, #24
 8006b36:	f100 0304 	add.w	r3, r0, #4
 8006b3a:	d50a      	bpl.n	8006b52 <_printf_i+0xce>
 8006b3c:	6805      	ldr	r5, [r0, #0]
 8006b3e:	600b      	str	r3, [r1, #0]
 8006b40:	2d00      	cmp	r5, #0
 8006b42:	da03      	bge.n	8006b4c <_printf_i+0xc8>
 8006b44:	232d      	movs	r3, #45	; 0x2d
 8006b46:	426d      	negs	r5, r5
 8006b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b4c:	230a      	movs	r3, #10
 8006b4e:	485e      	ldr	r0, [pc, #376]	; (8006cc8 <_printf_i+0x244>)
 8006b50:	e019      	b.n	8006b86 <_printf_i+0x102>
 8006b52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b56:	6805      	ldr	r5, [r0, #0]
 8006b58:	600b      	str	r3, [r1, #0]
 8006b5a:	bf18      	it	ne
 8006b5c:	b22d      	sxthne	r5, r5
 8006b5e:	e7ef      	b.n	8006b40 <_printf_i+0xbc>
 8006b60:	680b      	ldr	r3, [r1, #0]
 8006b62:	6825      	ldr	r5, [r4, #0]
 8006b64:	1d18      	adds	r0, r3, #4
 8006b66:	6008      	str	r0, [r1, #0]
 8006b68:	0628      	lsls	r0, r5, #24
 8006b6a:	d501      	bpl.n	8006b70 <_printf_i+0xec>
 8006b6c:	681d      	ldr	r5, [r3, #0]
 8006b6e:	e002      	b.n	8006b76 <_printf_i+0xf2>
 8006b70:	0669      	lsls	r1, r5, #25
 8006b72:	d5fb      	bpl.n	8006b6c <_printf_i+0xe8>
 8006b74:	881d      	ldrh	r5, [r3, #0]
 8006b76:	2f6f      	cmp	r7, #111	; 0x6f
 8006b78:	bf0c      	ite	eq
 8006b7a:	2308      	moveq	r3, #8
 8006b7c:	230a      	movne	r3, #10
 8006b7e:	4852      	ldr	r0, [pc, #328]	; (8006cc8 <_printf_i+0x244>)
 8006b80:	2100      	movs	r1, #0
 8006b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b86:	6866      	ldr	r6, [r4, #4]
 8006b88:	2e00      	cmp	r6, #0
 8006b8a:	bfa8      	it	ge
 8006b8c:	6821      	ldrge	r1, [r4, #0]
 8006b8e:	60a6      	str	r6, [r4, #8]
 8006b90:	bfa4      	itt	ge
 8006b92:	f021 0104 	bicge.w	r1, r1, #4
 8006b96:	6021      	strge	r1, [r4, #0]
 8006b98:	b90d      	cbnz	r5, 8006b9e <_printf_i+0x11a>
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	d04d      	beq.n	8006c3a <_printf_i+0x1b6>
 8006b9e:	4616      	mov	r6, r2
 8006ba0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ba4:	fb03 5711 	mls	r7, r3, r1, r5
 8006ba8:	5dc7      	ldrb	r7, [r0, r7]
 8006baa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bae:	462f      	mov	r7, r5
 8006bb0:	42bb      	cmp	r3, r7
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	d9f4      	bls.n	8006ba0 <_printf_i+0x11c>
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d10b      	bne.n	8006bd2 <_printf_i+0x14e>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	07df      	lsls	r7, r3, #31
 8006bbe:	d508      	bpl.n	8006bd2 <_printf_i+0x14e>
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	6861      	ldr	r1, [r4, #4]
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	bfde      	ittt	le
 8006bc8:	2330      	movle	r3, #48	; 0x30
 8006bca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bd2:	1b92      	subs	r2, r2, r6
 8006bd4:	6122      	str	r2, [r4, #16]
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4640      	mov	r0, r8
 8006bdc:	f8cd a000 	str.w	sl, [sp]
 8006be0:	aa03      	add	r2, sp, #12
 8006be2:	f7ff fedf 	bl	80069a4 <_printf_common>
 8006be6:	3001      	adds	r0, #1
 8006be8:	d14c      	bne.n	8006c84 <_printf_i+0x200>
 8006bea:	f04f 30ff 	mov.w	r0, #4294967295
 8006bee:	b004      	add	sp, #16
 8006bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf4:	4834      	ldr	r0, [pc, #208]	; (8006cc8 <_printf_i+0x244>)
 8006bf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bfa:	680e      	ldr	r6, [r1, #0]
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c02:	061f      	lsls	r7, r3, #24
 8006c04:	600e      	str	r6, [r1, #0]
 8006c06:	d514      	bpl.n	8006c32 <_printf_i+0x1ae>
 8006c08:	07d9      	lsls	r1, r3, #31
 8006c0a:	bf44      	itt	mi
 8006c0c:	f043 0320 	orrmi.w	r3, r3, #32
 8006c10:	6023      	strmi	r3, [r4, #0]
 8006c12:	b91d      	cbnz	r5, 8006c1c <_printf_i+0x198>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	f023 0320 	bic.w	r3, r3, #32
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	e7af      	b.n	8006b80 <_printf_i+0xfc>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	f043 0320 	orr.w	r3, r3, #32
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	2378      	movs	r3, #120	; 0x78
 8006c2a:	4828      	ldr	r0, [pc, #160]	; (8006ccc <_printf_i+0x248>)
 8006c2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c30:	e7e3      	b.n	8006bfa <_printf_i+0x176>
 8006c32:	065e      	lsls	r6, r3, #25
 8006c34:	bf48      	it	mi
 8006c36:	b2ad      	uxthmi	r5, r5
 8006c38:	e7e6      	b.n	8006c08 <_printf_i+0x184>
 8006c3a:	4616      	mov	r6, r2
 8006c3c:	e7bb      	b.n	8006bb6 <_printf_i+0x132>
 8006c3e:	680b      	ldr	r3, [r1, #0]
 8006c40:	6826      	ldr	r6, [r4, #0]
 8006c42:	1d1d      	adds	r5, r3, #4
 8006c44:	6960      	ldr	r0, [r4, #20]
 8006c46:	600d      	str	r5, [r1, #0]
 8006c48:	0635      	lsls	r5, r6, #24
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	d501      	bpl.n	8006c52 <_printf_i+0x1ce>
 8006c4e:	6018      	str	r0, [r3, #0]
 8006c50:	e002      	b.n	8006c58 <_printf_i+0x1d4>
 8006c52:	0671      	lsls	r1, r6, #25
 8006c54:	d5fb      	bpl.n	8006c4e <_printf_i+0x1ca>
 8006c56:	8018      	strh	r0, [r3, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4616      	mov	r6, r2
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	e7ba      	b.n	8006bd6 <_printf_i+0x152>
 8006c60:	680b      	ldr	r3, [r1, #0]
 8006c62:	1d1a      	adds	r2, r3, #4
 8006c64:	600a      	str	r2, [r1, #0]
 8006c66:	681e      	ldr	r6, [r3, #0]
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	6862      	ldr	r2, [r4, #4]
 8006c6e:	f000 f82f 	bl	8006cd0 <memchr>
 8006c72:	b108      	cbz	r0, 8006c78 <_printf_i+0x1f4>
 8006c74:	1b80      	subs	r0, r0, r6
 8006c76:	6060      	str	r0, [r4, #4]
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c82:	e7a8      	b.n	8006bd6 <_printf_i+0x152>
 8006c84:	4632      	mov	r2, r6
 8006c86:	4649      	mov	r1, r9
 8006c88:	4640      	mov	r0, r8
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	47d0      	blx	sl
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d0ab      	beq.n	8006bea <_printf_i+0x166>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	079b      	lsls	r3, r3, #30
 8006c96:	d413      	bmi.n	8006cc0 <_printf_i+0x23c>
 8006c98:	68e0      	ldr	r0, [r4, #12]
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	4298      	cmp	r0, r3
 8006c9e:	bfb8      	it	lt
 8006ca0:	4618      	movlt	r0, r3
 8006ca2:	e7a4      	b.n	8006bee <_printf_i+0x16a>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4632      	mov	r2, r6
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4640      	mov	r0, r8
 8006cac:	47d0      	blx	sl
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d09b      	beq.n	8006bea <_printf_i+0x166>
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	68e3      	ldr	r3, [r4, #12]
 8006cb6:	9903      	ldr	r1, [sp, #12]
 8006cb8:	1a5b      	subs	r3, r3, r1
 8006cba:	42ab      	cmp	r3, r5
 8006cbc:	dcf2      	bgt.n	8006ca4 <_printf_i+0x220>
 8006cbe:	e7eb      	b.n	8006c98 <_printf_i+0x214>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	f104 0619 	add.w	r6, r4, #25
 8006cc6:	e7f5      	b.n	8006cb4 <_printf_i+0x230>
 8006cc8:	08007055 	.word	0x08007055
 8006ccc:	08007066 	.word	0x08007066

08006cd0 <memchr>:
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	b2c9      	uxtb	r1, r1
 8006cd6:	4402      	add	r2, r0
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	d101      	bne.n	8006ce2 <memchr+0x12>
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e003      	b.n	8006cea <memchr+0x1a>
 8006ce2:	7804      	ldrb	r4, [r0, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	428c      	cmp	r4, r1
 8006ce8:	d1f6      	bne.n	8006cd8 <memchr+0x8>
 8006cea:	bd10      	pop	{r4, pc}

08006cec <memmove>:
 8006cec:	4288      	cmp	r0, r1
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	eb01 0402 	add.w	r4, r1, r2
 8006cf4:	d902      	bls.n	8006cfc <memmove+0x10>
 8006cf6:	4284      	cmp	r4, r0
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	d807      	bhi.n	8006d0c <memmove+0x20>
 8006cfc:	1e43      	subs	r3, r0, #1
 8006cfe:	42a1      	cmp	r1, r4
 8006d00:	d008      	beq.n	8006d14 <memmove+0x28>
 8006d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d0a:	e7f8      	b.n	8006cfe <memmove+0x12>
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	4402      	add	r2, r0
 8006d10:	428a      	cmp	r2, r1
 8006d12:	d100      	bne.n	8006d16 <memmove+0x2a>
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d1e:	e7f7      	b.n	8006d10 <memmove+0x24>

08006d20 <_free_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4605      	mov	r5, r0
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d043      	beq.n	8006db0 <_free_r+0x90>
 8006d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d2c:	1f0c      	subs	r4, r1, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfb8      	it	lt
 8006d32:	18e4      	addlt	r4, r4, r3
 8006d34:	f000 f8d0 	bl	8006ed8 <__malloc_lock>
 8006d38:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <_free_r+0x94>)
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	b933      	cbnz	r3, 8006d4e <_free_r+0x2e>
 8006d40:	6063      	str	r3, [r4, #4]
 8006d42:	6014      	str	r4, [r2, #0]
 8006d44:	4628      	mov	r0, r5
 8006d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d4a:	f000 b8cb 	b.w	8006ee4 <__malloc_unlock>
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	d90a      	bls.n	8006d68 <_free_r+0x48>
 8006d52:	6821      	ldr	r1, [r4, #0]
 8006d54:	1862      	adds	r2, r4, r1
 8006d56:	4293      	cmp	r3, r2
 8006d58:	bf01      	itttt	eq
 8006d5a:	681a      	ldreq	r2, [r3, #0]
 8006d5c:	685b      	ldreq	r3, [r3, #4]
 8006d5e:	1852      	addeq	r2, r2, r1
 8006d60:	6022      	streq	r2, [r4, #0]
 8006d62:	6063      	str	r3, [r4, #4]
 8006d64:	6004      	str	r4, [r0, #0]
 8006d66:	e7ed      	b.n	8006d44 <_free_r+0x24>
 8006d68:	461a      	mov	r2, r3
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	b10b      	cbz	r3, 8006d72 <_free_r+0x52>
 8006d6e:	42a3      	cmp	r3, r4
 8006d70:	d9fa      	bls.n	8006d68 <_free_r+0x48>
 8006d72:	6811      	ldr	r1, [r2, #0]
 8006d74:	1850      	adds	r0, r2, r1
 8006d76:	42a0      	cmp	r0, r4
 8006d78:	d10b      	bne.n	8006d92 <_free_r+0x72>
 8006d7a:	6820      	ldr	r0, [r4, #0]
 8006d7c:	4401      	add	r1, r0
 8006d7e:	1850      	adds	r0, r2, r1
 8006d80:	4283      	cmp	r3, r0
 8006d82:	6011      	str	r1, [r2, #0]
 8006d84:	d1de      	bne.n	8006d44 <_free_r+0x24>
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4401      	add	r1, r0
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	6053      	str	r3, [r2, #4]
 8006d90:	e7d8      	b.n	8006d44 <_free_r+0x24>
 8006d92:	d902      	bls.n	8006d9a <_free_r+0x7a>
 8006d94:	230c      	movs	r3, #12
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	e7d4      	b.n	8006d44 <_free_r+0x24>
 8006d9a:	6820      	ldr	r0, [r4, #0]
 8006d9c:	1821      	adds	r1, r4, r0
 8006d9e:	428b      	cmp	r3, r1
 8006da0:	bf01      	itttt	eq
 8006da2:	6819      	ldreq	r1, [r3, #0]
 8006da4:	685b      	ldreq	r3, [r3, #4]
 8006da6:	1809      	addeq	r1, r1, r0
 8006da8:	6021      	streq	r1, [r4, #0]
 8006daa:	6063      	str	r3, [r4, #4]
 8006dac:	6054      	str	r4, [r2, #4]
 8006dae:	e7c9      	b.n	8006d44 <_free_r+0x24>
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
 8006db2:	bf00      	nop
 8006db4:	2000199c 	.word	0x2000199c

08006db8 <_malloc_r>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	1ccd      	adds	r5, r1, #3
 8006dbc:	f025 0503 	bic.w	r5, r5, #3
 8006dc0:	3508      	adds	r5, #8
 8006dc2:	2d0c      	cmp	r5, #12
 8006dc4:	bf38      	it	cc
 8006dc6:	250c      	movcc	r5, #12
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	4606      	mov	r6, r0
 8006dcc:	db01      	blt.n	8006dd2 <_malloc_r+0x1a>
 8006dce:	42a9      	cmp	r1, r5
 8006dd0:	d903      	bls.n	8006dda <_malloc_r+0x22>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	6033      	str	r3, [r6, #0]
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dda:	f000 f87d 	bl	8006ed8 <__malloc_lock>
 8006dde:	4921      	ldr	r1, [pc, #132]	; (8006e64 <_malloc_r+0xac>)
 8006de0:	680a      	ldr	r2, [r1, #0]
 8006de2:	4614      	mov	r4, r2
 8006de4:	b99c      	cbnz	r4, 8006e0e <_malloc_r+0x56>
 8006de6:	4f20      	ldr	r7, [pc, #128]	; (8006e68 <_malloc_r+0xb0>)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	b923      	cbnz	r3, 8006df6 <_malloc_r+0x3e>
 8006dec:	4621      	mov	r1, r4
 8006dee:	4630      	mov	r0, r6
 8006df0:	f000 f862 	bl	8006eb8 <_sbrk_r>
 8006df4:	6038      	str	r0, [r7, #0]
 8006df6:	4629      	mov	r1, r5
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f000 f85d 	bl	8006eb8 <_sbrk_r>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d123      	bne.n	8006e4a <_malloc_r+0x92>
 8006e02:	230c      	movs	r3, #12
 8006e04:	4630      	mov	r0, r6
 8006e06:	6033      	str	r3, [r6, #0]
 8006e08:	f000 f86c 	bl	8006ee4 <__malloc_unlock>
 8006e0c:	e7e3      	b.n	8006dd6 <_malloc_r+0x1e>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	1b5b      	subs	r3, r3, r5
 8006e12:	d417      	bmi.n	8006e44 <_malloc_r+0x8c>
 8006e14:	2b0b      	cmp	r3, #11
 8006e16:	d903      	bls.n	8006e20 <_malloc_r+0x68>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	441c      	add	r4, r3
 8006e1c:	6025      	str	r5, [r4, #0]
 8006e1e:	e004      	b.n	8006e2a <_malloc_r+0x72>
 8006e20:	6863      	ldr	r3, [r4, #4]
 8006e22:	42a2      	cmp	r2, r4
 8006e24:	bf0c      	ite	eq
 8006e26:	600b      	streq	r3, [r1, #0]
 8006e28:	6053      	strne	r3, [r2, #4]
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f000 f85a 	bl	8006ee4 <__malloc_unlock>
 8006e30:	f104 000b 	add.w	r0, r4, #11
 8006e34:	1d23      	adds	r3, r4, #4
 8006e36:	f020 0007 	bic.w	r0, r0, #7
 8006e3a:	1ac2      	subs	r2, r0, r3
 8006e3c:	d0cc      	beq.n	8006dd8 <_malloc_r+0x20>
 8006e3e:	1a1b      	subs	r3, r3, r0
 8006e40:	50a3      	str	r3, [r4, r2]
 8006e42:	e7c9      	b.n	8006dd8 <_malloc_r+0x20>
 8006e44:	4622      	mov	r2, r4
 8006e46:	6864      	ldr	r4, [r4, #4]
 8006e48:	e7cc      	b.n	8006de4 <_malloc_r+0x2c>
 8006e4a:	1cc4      	adds	r4, r0, #3
 8006e4c:	f024 0403 	bic.w	r4, r4, #3
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d0e3      	beq.n	8006e1c <_malloc_r+0x64>
 8006e54:	1a21      	subs	r1, r4, r0
 8006e56:	4630      	mov	r0, r6
 8006e58:	f000 f82e 	bl	8006eb8 <_sbrk_r>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d1dd      	bne.n	8006e1c <_malloc_r+0x64>
 8006e60:	e7cf      	b.n	8006e02 <_malloc_r+0x4a>
 8006e62:	bf00      	nop
 8006e64:	2000199c 	.word	0x2000199c
 8006e68:	200019a0 	.word	0x200019a0

08006e6c <_realloc_r>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	4607      	mov	r7, r0
 8006e70:	4614      	mov	r4, r2
 8006e72:	460e      	mov	r6, r1
 8006e74:	b921      	cbnz	r1, 8006e80 <_realloc_r+0x14>
 8006e76:	4611      	mov	r1, r2
 8006e78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e7c:	f7ff bf9c 	b.w	8006db8 <_malloc_r>
 8006e80:	b922      	cbnz	r2, 8006e8c <_realloc_r+0x20>
 8006e82:	f7ff ff4d 	bl	8006d20 <_free_r>
 8006e86:	4625      	mov	r5, r4
 8006e88:	4628      	mov	r0, r5
 8006e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e8c:	f000 f830 	bl	8006ef0 <_malloc_usable_size_r>
 8006e90:	42a0      	cmp	r0, r4
 8006e92:	d20f      	bcs.n	8006eb4 <_realloc_r+0x48>
 8006e94:	4621      	mov	r1, r4
 8006e96:	4638      	mov	r0, r7
 8006e98:	f7ff ff8e 	bl	8006db8 <_malloc_r>
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d0f2      	beq.n	8006e88 <_realloc_r+0x1c>
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	f7ff fbeb 	bl	8006680 <memcpy>
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff ff37 	bl	8006d20 <_free_r>
 8006eb2:	e7e9      	b.n	8006e88 <_realloc_r+0x1c>
 8006eb4:	4635      	mov	r5, r6
 8006eb6:	e7e7      	b.n	8006e88 <_realloc_r+0x1c>

08006eb8 <_sbrk_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	2300      	movs	r3, #0
 8006ebc:	4d05      	ldr	r5, [pc, #20]	; (8006ed4 <_sbrk_r+0x1c>)
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	602b      	str	r3, [r5, #0]
 8006ec4:	f7f9 fe1a 	bl	8000afc <_sbrk>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_sbrk_r+0x1a>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_sbrk_r+0x1a>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20001b3c 	.word	0x20001b3c

08006ed8 <__malloc_lock>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__malloc_lock+0x8>)
 8006eda:	f000 b811 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20001b44 	.word	0x20001b44

08006ee4 <__malloc_unlock>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__malloc_unlock+0x8>)
 8006ee6:	f000 b80c 	b.w	8006f02 <__retarget_lock_release_recursive>
 8006eea:	bf00      	nop
 8006eec:	20001b44 	.word	0x20001b44

08006ef0 <_malloc_usable_size_r>:
 8006ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef4:	1f18      	subs	r0, r3, #4
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bfbc      	itt	lt
 8006efa:	580b      	ldrlt	r3, [r1, r0]
 8006efc:	18c0      	addlt	r0, r0, r3
 8006efe:	4770      	bx	lr

08006f00 <__retarget_lock_acquire_recursive>:
 8006f00:	4770      	bx	lr

08006f02 <__retarget_lock_release_recursive>:
 8006f02:	4770      	bx	lr

08006f04 <_init>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr

08006f10 <_fini>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	bf00      	nop
 8006f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f16:	bc08      	pop	{r3}
 8006f18:	469e      	mov	lr, r3
 8006f1a:	4770      	bx	lr
