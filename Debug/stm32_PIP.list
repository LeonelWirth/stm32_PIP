
stm32_PIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a594  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800a6a4  0800a6a4  0001a6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a934  0800a934  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a934  0800a934  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a934  0800a934  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a938  0800a938  0001a938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800a93c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001020  2000009c  0800a9d8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010bc  0800a9d8  000210bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d810  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dfa  00000000  00000000  0003d8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  000416d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  00042d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1fc  00000000  00000000  00044258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001915b  00000000  00000000  0005f454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b5aa  00000000  00000000  000785af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113b59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006458  00000000  00000000  00113bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000009c 	.word	0x2000009c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a68c 	.word	0x0800a68c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a0 	.word	0x200000a0
 800014c:	0800a68c 	.word	0x0800a68c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <__aeabi_fmul>:
 8000978:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000980:	bf1e      	ittt	ne
 8000982:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000986:	ea92 0f0c 	teqne	r2, ip
 800098a:	ea93 0f0c 	teqne	r3, ip
 800098e:	d06f      	beq.n	8000a70 <__aeabi_fmul+0xf8>
 8000990:	441a      	add	r2, r3
 8000992:	ea80 0c01 	eor.w	ip, r0, r1
 8000996:	0240      	lsls	r0, r0, #9
 8000998:	bf18      	it	ne
 800099a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800099e:	d01e      	beq.n	80009de <__aeabi_fmul+0x66>
 80009a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009ac:	fba0 3101 	umull	r3, r1, r0, r1
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009b8:	bf3e      	ittt	cc
 80009ba:	0049      	lslcc	r1, r1, #1
 80009bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009c0:	005b      	lslcc	r3, r3, #1
 80009c2:	ea40 0001 	orr.w	r0, r0, r1
 80009c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ca:	2afd      	cmp	r2, #253	; 0xfd
 80009cc:	d81d      	bhi.n	8000a0a <__aeabi_fmul+0x92>
 80009ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	4770      	bx	lr
 80009de:	f090 0f00 	teq	r0, #0
 80009e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009e6:	bf08      	it	eq
 80009e8:	0249      	lsleq	r1, r1, #9
 80009ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009f2:	3a7f      	subs	r2, #127	; 0x7f
 80009f4:	bfc2      	ittt	gt
 80009f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009fe:	4770      	bxgt	lr
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	dc5d      	bgt.n	8000ac8 <__aeabi_fmul+0x150>
 8000a0c:	f112 0f19 	cmn.w	r2, #25
 8000a10:	bfdc      	itt	le
 8000a12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	4770      	bxle	lr
 8000a18:	f1c2 0200 	rsb	r2, r2, #0
 8000a1c:	0041      	lsls	r1, r0, #1
 8000a1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a22:	f1c2 0220 	rsb	r2, r2, #32
 8000a26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a2e:	f140 0000 	adc.w	r0, r0, #0
 8000a32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a36:	bf08      	it	eq
 8000a38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a3c:	4770      	bx	lr
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a46:	bf02      	ittt	eq
 8000a48:	0040      	lsleq	r0, r0, #1
 8000a4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a4e:	3a01      	subeq	r2, #1
 8000a50:	d0f9      	beq.n	8000a46 <__aeabi_fmul+0xce>
 8000a52:	ea40 000c 	orr.w	r0, r0, ip
 8000a56:	f093 0f00 	teq	r3, #0
 8000a5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5e:	bf02      	ittt	eq
 8000a60:	0049      	lsleq	r1, r1, #1
 8000a62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a66:	3b01      	subeq	r3, #1
 8000a68:	d0f9      	beq.n	8000a5e <__aeabi_fmul+0xe6>
 8000a6a:	ea41 010c 	orr.w	r1, r1, ip
 8000a6e:	e78f      	b.n	8000990 <__aeabi_fmul+0x18>
 8000a70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a74:	ea92 0f0c 	teq	r2, ip
 8000a78:	bf18      	it	ne
 8000a7a:	ea93 0f0c 	teqne	r3, ip
 8000a7e:	d00a      	beq.n	8000a96 <__aeabi_fmul+0x11e>
 8000a80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a84:	bf18      	it	ne
 8000a86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a8a:	d1d8      	bne.n	8000a3e <__aeabi_fmul+0xc6>
 8000a8c:	ea80 0001 	eor.w	r0, r0, r1
 8000a90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f090 0f00 	teq	r0, #0
 8000a9a:	bf17      	itett	ne
 8000a9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	f091 0f00 	teqne	r1, #0
 8000aa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aaa:	d014      	beq.n	8000ad6 <__aeabi_fmul+0x15e>
 8000aac:	ea92 0f0c 	teq	r2, ip
 8000ab0:	d101      	bne.n	8000ab6 <__aeabi_fmul+0x13e>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	d10f      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ab6:	ea93 0f0c 	teq	r3, ip
 8000aba:	d103      	bne.n	8000ac4 <__aeabi_fmul+0x14c>
 8000abc:	024b      	lsls	r3, r1, #9
 8000abe:	bf18      	it	ne
 8000ac0:	4608      	movne	r0, r1
 8000ac2:	d108      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ac4:	ea80 0001 	eor.w	r0, r0, r1
 8000ac8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_fdiv>:
 8000ae0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae8:	bf1e      	ittt	ne
 8000aea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aee:	ea92 0f0c 	teqne	r2, ip
 8000af2:	ea93 0f0c 	teqne	r3, ip
 8000af6:	d069      	beq.n	8000bcc <__aeabi_fdiv+0xec>
 8000af8:	eba2 0203 	sub.w	r2, r2, r3
 8000afc:	ea80 0c01 	eor.w	ip, r0, r1
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b06:	d037      	beq.n	8000b78 <__aeabi_fdiv+0x98>
 8000b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	bf38      	it	cc
 8000b1c:	005b      	lslcc	r3, r3, #1
 8000b1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b26:	428b      	cmp	r3, r1
 8000b28:	bf24      	itt	cs
 8000b2a:	1a5b      	subcs	r3, r3, r1
 8000b2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b34:	bf24      	itt	cs
 8000b36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b42:	bf24      	itt	cs
 8000b44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b50:	bf24      	itt	cs
 8000b52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	bf18      	it	ne
 8000b5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b62:	d1e0      	bne.n	8000b26 <__aeabi_fdiv+0x46>
 8000b64:	2afd      	cmp	r2, #253	; 0xfd
 8000b66:	f63f af50 	bhi.w	8000a0a <__aeabi_fmul+0x92>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b80:	327f      	adds	r2, #127	; 0x7f
 8000b82:	bfc2      	ittt	gt
 8000b84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8c:	4770      	bxgt	lr
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	3a01      	subs	r2, #1
 8000b98:	e737      	b.n	8000a0a <__aeabi_fmul+0x92>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ba2:	bf02      	ittt	eq
 8000ba4:	0040      	lsleq	r0, r0, #1
 8000ba6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000baa:	3a01      	subeq	r2, #1
 8000bac:	d0f9      	beq.n	8000ba2 <__aeabi_fdiv+0xc2>
 8000bae:	ea40 000c 	orr.w	r0, r0, ip
 8000bb2:	f093 0f00 	teq	r3, #0
 8000bb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0049      	lsleq	r1, r1, #1
 8000bbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bc2:	3b01      	subeq	r3, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fdiv+0xda>
 8000bc6:	ea41 010c 	orr.w	r1, r1, ip
 8000bca:	e795      	b.n	8000af8 <__aeabi_fdiv+0x18>
 8000bcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d108      	bne.n	8000be8 <__aeabi_fdiv+0x108>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	f47f af7d 	bne.w	8000ad6 <__aeabi_fmul+0x15e>
 8000bdc:	ea93 0f0c 	teq	r3, ip
 8000be0:	f47f af70 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000be4:	4608      	mov	r0, r1
 8000be6:	e776      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_fdiv+0x118>
 8000bee:	024b      	lsls	r3, r1, #9
 8000bf0:	f43f af4c 	beq.w	8000a8c <__aeabi_fmul+0x114>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000bf8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bfc:	bf18      	it	ne
 8000bfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c02:	d1ca      	bne.n	8000b9a <__aeabi_fdiv+0xba>
 8000c04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c08:	f47f af5c 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000c0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	f47f af3c 	bne.w	8000a8c <__aeabi_fmul+0x114>
 8000c14:	e75f      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000c16:	bf00      	nop

08000c18 <__gesf2>:
 8000c18:	f04f 3cff 	mov.w	ip, #4294967295
 8000c1c:	e006      	b.n	8000c2c <__cmpsf2+0x4>
 8000c1e:	bf00      	nop

08000c20 <__lesf2>:
 8000c20:	f04f 0c01 	mov.w	ip, #1
 8000c24:	e002      	b.n	8000c2c <__cmpsf2+0x4>
 8000c26:	bf00      	nop

08000c28 <__cmpsf2>:
 8000c28:	f04f 0c01 	mov.w	ip, #1
 8000c2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d011      	beq.n	8000c68 <__cmpsf2+0x40>
 8000c44:	b001      	add	sp, #4
 8000c46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c4a:	bf18      	it	ne
 8000c4c:	ea90 0f01 	teqne	r0, r1
 8000c50:	bf58      	it	pl
 8000c52:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c56:	bf88      	it	hi
 8000c58:	17c8      	asrhi	r0, r1, #31
 8000c5a:	bf38      	it	cc
 8000c5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c60:	bf18      	it	ne
 8000c62:	f040 0001 	orrne.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	d102      	bne.n	8000c74 <__cmpsf2+0x4c>
 8000c6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c72:	d105      	bne.n	8000c80 <__cmpsf2+0x58>
 8000c74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c78:	d1e4      	bne.n	8000c44 <__cmpsf2+0x1c>
 8000c7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c7e:	d0e1      	beq.n	8000c44 <__cmpsf2+0x1c>
 8000c80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_cfrcmple>:
 8000c88:	4684      	mov	ip, r0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	4661      	mov	r1, ip
 8000c8e:	e7ff      	b.n	8000c90 <__aeabi_cfcmpeq>

08000c90 <__aeabi_cfcmpeq>:
 8000c90:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c92:	f7ff ffc9 	bl	8000c28 <__cmpsf2>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	bf48      	it	mi
 8000c9a:	f110 0f00 	cmnmi.w	r0, #0
 8000c9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ca0 <__aeabi_fcmpeq>:
 8000ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca4:	f7ff fff4 	bl	8000c90 <__aeabi_cfcmpeq>
 8000ca8:	bf0c      	ite	eq
 8000caa:	2001      	moveq	r0, #1
 8000cac:	2000      	movne	r0, #0
 8000cae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_fcmplt>:
 8000cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb8:	f7ff ffea 	bl	8000c90 <__aeabi_cfcmpeq>
 8000cbc:	bf34      	ite	cc
 8000cbe:	2001      	movcc	r0, #1
 8000cc0:	2000      	movcs	r0, #0
 8000cc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_fcmple>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff ffe0 	bl	8000c90 <__aeabi_cfcmpeq>
 8000cd0:	bf94      	ite	ls
 8000cd2:	2001      	movls	r0, #1
 8000cd4:	2000      	movhi	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmpge>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffd2 	bl	8000c88 <__aeabi_cfrcmple>
 8000ce4:	bf94      	ite	ls
 8000ce6:	2001      	movls	r0, #1
 8000ce8:	2000      	movhi	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmpgt>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffc8 	bl	8000c88 <__aeabi_cfrcmple>
 8000cf8:	bf34      	ite	cc
 8000cfa:	2001      	movcc	r0, #1
 8000cfc:	2000      	movcs	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_f2uiz>:
 8000d04:	0042      	lsls	r2, r0, #1
 8000d06:	d20e      	bcs.n	8000d26 <__aeabi_f2uiz+0x22>
 8000d08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d0c:	d30b      	bcc.n	8000d26 <__aeabi_f2uiz+0x22>
 8000d0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d16:	d409      	bmi.n	8000d2c <__aeabi_f2uiz+0x28>
 8000d18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d20:	fa23 f002 	lsr.w	r0, r3, r2
 8000d24:	4770      	bx	lr
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	4770      	bx	lr
 8000d2c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d30:	d101      	bne.n	8000d36 <__aeabi_f2uiz+0x32>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d102      	bne.n	8000d3c <__aeabi_f2uiz+0x38>
 8000d36:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3a:	4770      	bx	lr
 8000d3c:	f04f 0000 	mov.w	r0, #0
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000d56:	4619      	mov	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	78fa      	ldrb	r2, [r7, #3]
 8000d5c:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000d64:	3301      	adds	r3, #1
 8000d66:	425a      	negs	r2, r3
 8000d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d70:	bf58      	it	pl
 8000d72:	4253      	negpl	r3, r2
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000d82:	2b80      	cmp	r3, #128	; 0x80
 8000d84:	d113      	bne.n	8000dae <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000d94:	3301      	adds	r3, #1
 8000d96:	425a      	negs	r2, r3
 8000d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000da0:	bf58      	it	pl
 8000da2:	4253      	negpl	r3, r2
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8000dac:	e00b      	b.n	8000dc6 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000de0:	461a      	mov	r2, r3
 8000de2:	6839      	ldr	r1, [r7, #0]
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f805 	bl	8000df4 <RingGetNBytes>
 8000dea:	4603      	mov	r3, r0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <RingGetNBytes+0x1e>
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <RingGetNBytes+0x22>
 8000e12:	2300      	movs	r3, #0
 8000e14:	e03e      	b.n	8000e94 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b80      	cmp	r3, #128	; 0x80
 8000e1a:	d901      	bls.n	8000e20 <RingGetNBytes+0x2c>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e039      	b.n	8000e94 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	75fb      	strb	r3, [r7, #23]
 8000e24:	e01b      	b.n	8000e5e <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	4413      	add	r3, r2
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	5c52      	ldrb	r2, [r2, r1]
 8000e38:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e40:	3301      	adds	r3, #1
 8000e42:	425a      	negs	r2, r3
 8000e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e4c:	bf58      	it	pl
 8000e4e:	4253      	negpl	r3, r2
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	75fb      	strb	r3, [r7, #23]
 8000e5e:	7dfa      	ldrb	r2, [r7, #23]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d205      	bcs.n	8000e72 <RingGetNBytes+0x7e>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000e6c:	7dfa      	ldrb	r2, [r7, #23]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d3d9      	bcc.n	8000e26 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f000 f805 	bl	8000e9c <RingClear>

	return uCounter;
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
	...

08000ed0 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8000ed8:	4b42      	ldr	r3, [pc, #264]	; (8000fe4 <ModbusInit+0x114>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d87d      	bhi.n	8000fdc <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	33bc      	adds	r3, #188	; 0xbc
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ffd9 	bl	8000e9c <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d109      	bne.n	8000f06 <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8000ef2:	4a3d      	ldr	r2, [pc, #244]	; (8000fe8 <ModbusInit+0x118>)
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	483d      	ldr	r0, [pc, #244]	; (8000fec <ModbusInit+0x11c>)
 8000ef8:	f005 fc96 	bl	8006828 <osThreadNew>
 8000efc:	4602      	mov	r2, r0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000f04:	e033      	b.n	8000f6e <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d12e      	bne.n	8000f6c <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8000f0e:	4a38      	ldr	r2, [pc, #224]	; (8000ff0 <ModbusInit+0x120>)
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4838      	ldr	r0, [pc, #224]	; (8000ff4 <ModbusInit+0x124>)
 8000f14:	f005 fc88 	bl	8006828 <osThreadNew>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000f26:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000f2e:	4a32      	ldr	r2, [pc, #200]	; (8000ff8 <ModbusInit+0x128>)
 8000f30:	9200      	str	r2, [sp, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	4831      	ldr	r0, [pc, #196]	; (8000ffc <ModbusInit+0x12c>)
 8000f36:	f008 f9f7 	bl	8009328 <xTimerCreate>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d100      	bne.n	8000f4e <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8000f4c:	e7fe      	b.n	8000f4c <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8000f4e:	4a2c      	ldr	r2, [pc, #176]	; (8001000 <ModbusInit+0x130>)
 8000f50:	2110      	movs	r1, #16
 8000f52:	2002      	movs	r0, #2
 8000f54:	f005 fe0e 	bl	8006b74 <osMessageQueueNew>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8000f6a:	e7fe      	b.n	8000f6a <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8000f6c:	e7fe      	b.n	8000f6c <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d100      	bne.n	8000f7a <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8000f78:	e7fe      	b.n	8000f78 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8000f80:	4a20      	ldr	r2, [pc, #128]	; (8001004 <ModbusInit+0x134>)
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	2200      	movs	r2, #0
 8000f86:	2105      	movs	r1, #5
 8000f88:	481f      	ldr	r0, [pc, #124]	; (8001008 <ModbusInit+0x138>)
 8000f8a:	f008 f9cd 	bl	8009328 <xTimerCreate>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d100      	bne.n	8000fa2 <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8000fa0:	e7fe      	b.n	8000fa0 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8000fa2:	4a1a      	ldr	r2, [pc, #104]	; (800100c <ModbusInit+0x13c>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f005 fd48 	bl	8006a3c <osSemaphoreNew>
 8000fac:	4602      	mov	r2, r0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8000fbe:	e7fe      	b.n	8000fbe <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <ModbusInit+0x114>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <ModbusInit+0x140>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <ModbusInit+0x114>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <ModbusInit+0x114>)
 8000fd8:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8000fda:	e000      	b.n	8000fde <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8000fdc:	e7fe      	b.n	8000fdc <ModbusInit+0x10c>
}
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000b8 	.word	0x200000b8
 8000fe8:	0800a7e0 	.word	0x0800a7e0
 8000fec:	080011fd 	.word	0x080011fd
 8000ff0:	0800a804 	.word	0x0800a804
 8000ff4:	08001671 	.word	0x08001671
 8000ff8:	080011a1 	.word	0x080011a1
 8000ffc:	0800a6e8 	.word	0x0800a6e8
 8001000:	0800a7c8 	.word	0x0800a7c8
 8001004:	0800111d 	.word	0x0800111d
 8001008:	0800a6f8 	.word	0x0800a6f8
 800100c:	0800a828 	.word	0x0800a828
 8001010:	20000dbc 	.word	0x20000dbc

08001014 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001022:	2b01      	cmp	r3, #1
 8001024:	d00f      	beq.n	8001046 <ModbusStart+0x32>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800102c:	2b03      	cmp	r3, #3
 800102e:	d00a      	beq.n	8001046 <ModbusStart+0x32>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001036:	2b02      	cmp	r3, #2
 8001038:	d005      	beq.n	8001046 <ModbusStart+0x32>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001040:	2b04      	cmp	r3, #4
 8001042:	d000      	beq.n	8001046 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8001044:	e7fe      	b.n	8001044 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800104c:	2b04      	cmp	r3, #4
 800104e:	d100      	bne.n	8001052 <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8001050:	e7fe      	b.n	8001050 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001058:	2b01      	cmp	r3, #1
 800105a:	d004      	beq.n	8001066 <ModbusStart+0x52>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001062:	2b04      	cmp	r3, #4
 8001064:	d13c      	bne.n	80010e0 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68d8      	ldr	r0, [r3, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	8a1b      	ldrh	r3, [r3, #16]
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	f003 f8d1 	bl	8004220 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d105      	bne.n	8001092 <ModbusStart+0x7e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800108c:	2b00      	cmp	r3, #0
 800108e:	d100      	bne.n	8001092 <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001090:	e7fe      	b.n	8001090 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001092:	bf00      	nop
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	f005 f912 	bl	80062c2 <HAL_UART_GetState>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b20      	cmp	r3, #32
 80010a2:	d1f7      	bne.n	8001094 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6858      	ldr	r0, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	33a6      	adds	r3, #166	; 0xa6
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f004 fe40 	bl	8005d34 <HAL_UART_Receive_IT>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d000      	beq.n	80010bc <ModbusStart+0xa8>
          {
                while(1)
 80010ba:	e7fe      	b.n	80010ba <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7a1b      	ldrb	r3, [r3, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <ModbusStart+0xba>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d100      	bne.n	80010ce <ModbusStart+0xba>
          {
        	  while(1)
 80010cc:	e7fe      	b.n	80010cc <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7a1b      	ldrb	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d104      	bne.n	80010e0 <ModbusStart+0xcc>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d100      	bne.n	80010e0 <ModbusStart+0xcc>
          {
             	  while(1)
 80010de:	e7fe      	b.n	80010de <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e02a      	b.n	8001180 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <vTimerCallbackT35+0x7c>)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	d11e      	bne.n	800117a <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800113c:	4a16      	ldr	r2, [pc, #88]	; (8001198 <vTimerCallbackT35+0x7c>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d10c      	bne.n	8001164 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <vTimerCallbackT35+0x7c>)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001156:	2300      	movs	r3, #0
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	2200      	movs	r2, #0
 800115e:	2103      	movs	r1, #3
 8001160:	f008 f936 	bl	80093d0 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <vTimerCallbackT35+0x7c>)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001170:	2300      	movs	r3, #0
 8001172:	2203      	movs	r2, #3
 8001174:	2100      	movs	r1, #0
 8001176:	f007 fecd 	bl	8008f14 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <vTimerCallbackT35+0x80>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4293      	cmp	r3, r2
 800118a:	dbce      	blt.n	800112a <vTimerCallbackT35+0xe>
		}

	}
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000dbc 	.word	0x20000dbc
 800119c:	200000b8 	.word	0x200000b8

080011a0 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e017      	b.n	80011de <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 80011ae:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <vTimerCallbackTimeout+0x54>)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d10b      	bne.n	80011d8 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80011c0:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <vTimerCallbackTimeout+0x54>)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80011cc:	2300      	movs	r3, #0
 80011ce:	2203      	movs	r2, #3
 80011d0:	f06f 0107 	mvn.w	r1, #7
 80011d4:	f007 fe9e 	bl	8008f14 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <vTimerCallbackTimeout+0x58>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4293      	cmp	r3, r2
 80011e8:	dbe1      	blt.n	80011ae <vTimerCallbackTimeout+0xe>
		}

	}

}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000dbc 	.word	0x20000dbc
 80011f8:	200000b8 	.word	0x200000b8

080011fc <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001214:	2b01      	cmp	r3, #1
 8001216:	d004      	beq.n	8001222 <StartTaskModbusSlave+0x26>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800121e:	2b04      	cmp	r3, #4
 8001220:	d117      	bne.n	8001252 <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8001222:	f04f 31ff 	mov.w	r1, #4294967295
 8001226:	2001      	movs	r0, #1
 8001228:	f007 fe2c 	bl	8008e84 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f000 fbe9 	bl	8001a04 <getRxBuffer>
 8001232:	4603      	mov	r3, r0
 8001234:	f113 0f03 	cmn.w	r3, #3
 8001238:	d10b      	bne.n	8001252 <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	22fd      	movs	r2, #253	; 0xfd
 800123e:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001246:	3301      	adds	r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8001250:	e0a1      	b.n	8001396 <StartTaskModbusSlave+0x19a>
	  }
	   //modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
   }

   if (modH->u8BufferSize < 7)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001258:	2b06      	cmp	r3, #6
 800125a:	d80b      	bhi.n	8001274 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	22fa      	movs	r2, #250	; 0xfa
 8001260:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001268:	3301      	adds	r3, #1
 800126a:	b29a      	uxth	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	  {
		  netconn_close(modH->newconn);
		  netconn_delete(modH->newconn);
	  }
  #endif
	  continue;
 8001272:	e090      	b.n	8001396 <StartTaskModbusSlave+0x19a>
    }

		// check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	7cda      	ldrb	r2, [r3, #19]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	7a1b      	ldrb	r3, [r3, #8]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8089 	bne.w	8001394 <StartTaskModbusSlave+0x198>
        #endif
		continue;
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 fc08 	bl	8001a98 <validateRequest>
 8001288:	4603      	mov	r3, r0
 800128a:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00c      	beq.n	80012ac <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	68f9      	ldr	r1, [r7, #12]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fda0 	bl	8001ddc <buildException>
			sendTxBuffer(modH);
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 fdbb 	bl	8001e18 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 80012a2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	749a      	strb	r2, [r3, #18]
		{
		    netconn_close(modH->newconn);
		  	netconn_delete(modH->newconn);
		}
        #endif
		continue;
 80012aa:	e074      	b.n	8001396 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	749a      	strb	r2, [r3, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	4618      	mov	r0, r3
 80012be:	f006 fac7 	bl	8007850 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	7d1b      	ldrb	r3, [r3, #20]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d859      	bhi.n	8001380 <StartTaskModbusSlave+0x184>
 80012cc:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <StartTaskModbusSlave+0xd8>)
 80012ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d2:	bf00      	nop
 80012d4:	08001315 	.word	0x08001315
 80012d8:	08001315 	.word	0x08001315
 80012dc:	08001327 	.word	0x08001327
 80012e0:	08001327 	.word	0x08001327
 80012e4:	08001339 	.word	0x08001339
 80012e8:	0800134b 	.word	0x0800134b
 80012ec:	08001381 	.word	0x08001381
 80012f0:	08001381 	.word	0x08001381
 80012f4:	08001381 	.word	0x08001381
 80012f8:	08001381 	.word	0x08001381
 80012fc:	08001381 	.word	0x08001381
 8001300:	08001381 	.word	0x08001381
 8001304:	08001381 	.word	0x08001381
 8001308:	08001381 	.word	0x08001381
 800130c:	0800135d 	.word	0x0800135d
 8001310:	0800136f 	.word	0x0800136f
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 fe0f 	bl	8001f38 <process_FC1>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001324:	e02d      	b.n	8001382 <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 febb 	bl	80020a2 <process_FC3>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001336:	e024      	b.n	8001382 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 ff1d 	bl	8002178 <process_FC5>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001348:	e01b      	b.n	8001382 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 ff6d 	bl	800222a <process_FC6>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800135a:	e012      	b.n	8001382 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 ff96 	bl	800228e <process_FC15>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800136c:	e009      	b.n	8001382 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f001 f81b 	bl	80023aa <process_FC16>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800137e:	e000      	b.n	8001382 <StartTaskModbusSlave+0x186>
			default:
				break;
 8001380:	bf00      	nop
	    netconn_close(modH->newconn);
	  	netconn_delete(modH->newconn);
	 }
   #endif

	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001388:	2300      	movs	r3, #0
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	f005 ffe9 	bl	8007364 <xQueueGenericSend>

	 continue;
 8001392:	e000      	b.n	8001396 <StartTaskModbusSlave+0x19a>
		continue;
 8001394:	bf00      	nop
  {
 8001396:	e737      	b.n	8001208 <StartTaskModbusSlave+0xc>

08001398 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8001398:	b084      	sub	sp, #16
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	f107 001c 	add.w	r0, r7, #28
 80013a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 fa49 	bl	8007850 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7a1b      	ldrb	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SendQuery+0x32>
 80013c6:	23ff      	movs	r3, #255	; 0xff
 80013c8:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SendQuery+0x40>
 80013d4:	23fe      	movs	r3, #254	; 0xfe
 80013d6:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80013d8:	7f3b      	ldrb	r3, [r7, #28]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <SendQuery+0x4c>
 80013de:	7f3b      	ldrb	r3, [r7, #28]
 80013e0:	2bf7      	cmp	r3, #247	; 0xf7
 80013e2:	d901      	bls.n	80013e8 <SendQuery+0x50>
 80013e4:	23f7      	movs	r3, #247	; 0xf7
 80013e6:	73bb      	strb	r3, [r7, #14]

	if(error)
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00e      	beq.n	800140c <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 80013ee:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80013fc:	2300      	movs	r3, #0
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	f005 ffaf 	bl	8007364 <xQueueGenericSend>
		 return error;
 8001406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800140a:	e129      	b.n	8001660 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 800140c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8001414:	7f3a      	ldrb	r2, [r7, #28]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800141a:	7f7a      	ldrb	r2, [r7, #29]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8001420:	8bfb      	ldrh	r3, [r7, #30]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	b29b      	uxth	r3, r3
 8001426:	b2da      	uxtb	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800142c:	8bfb      	ldrh	r3, [r7, #30]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8001434:	7f7b      	ldrb	r3, [r7, #29]
 8001436:	3b01      	subs	r3, #1
 8001438:	2b0f      	cmp	r3, #15
 800143a:	f200 80fe 	bhi.w	800163a <SendQuery+0x2a2>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <SendQuery+0xac>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001485 	.word	0x08001485
 8001448:	08001485 	.word	0x08001485
 800144c:	08001485 	.word	0x08001485
 8001450:	08001485 	.word	0x08001485
 8001454:	080014a3 	.word	0x080014a3
 8001458:	080014c5 	.word	0x080014c5
 800145c:	0800163b 	.word	0x0800163b
 8001460:	0800163b 	.word	0x0800163b
 8001464:	0800163b 	.word	0x0800163b
 8001468:	0800163b 	.word	0x0800163b
 800146c:	0800163b 	.word	0x0800163b
 8001470:	0800163b 	.word	0x0800163b
 8001474:	0800163b 	.word	0x0800163b
 8001478:	0800163b 	.word	0x0800163b
 800147c:	080014e7 	.word	0x080014e7
 8001480:	080015a5 	.word	0x080015a5
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8001484:	8c3b      	ldrh	r3, [r7, #32]
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	b29b      	uxth	r3, r3
 800148a:	b2da      	uxtb	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8001490:	8c3b      	ldrh	r3, [r7, #32]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2206      	movs	r2, #6
 800149c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80014a0:	e0cb      	b.n	800163a <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SendQuery+0x116>
 80014aa:	22ff      	movs	r2, #255	; 0xff
 80014ac:	e000      	b.n	80014b0 <SendQuery+0x118>
 80014ae:	2200      	movs	r2, #0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2206      	movs	r2, #6
 80014be:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80014c2:	e0ba      	b.n	800163a <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2206      	movs	r2, #6
 80014e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80014e4:	e0a9      	b.n	800163a <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80014e6:	8c3b      	ldrh	r3, [r7, #32]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 80014ee:	7a7b      	ldrb	r3, [r7, #9]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 80014f4:	8c3b      	ldrh	r3, [r7, #32]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <SendQuery+0x174>
	    {
	        u8bytesno++;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8001506:	7a7b      	ldrb	r3, [r7, #9]
 8001508:	3301      	adds	r3, #1
 800150a:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800150c:	8c3b      	ldrh	r3, [r7, #32]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	b29b      	uxth	r3, r3
 8001512:	b2da      	uxtb	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8001518:	8c3b      	ldrh	r3, [r7, #32]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2207      	movs	r2, #7
 800152a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	81bb      	strh	r3, [r7, #12]
 8001532:	e031      	b.n	8001598 <SendQuery+0x200>
	    {
	        if(i%2)
 8001534:	89bb      	ldrh	r3, [r7, #12]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	b29b      	uxth	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00f      	beq.n	8001560 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8001540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001542:	89bb      	ldrh	r3, [r7, #12]
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	b29b      	uxth	r3, r3
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001554:	4619      	mov	r1, r3
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	440b      	add	r3, r1
 800155c:	74da      	strb	r2, [r3, #19]
 800155e:	e010      	b.n	8001582 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	89bb      	ldrh	r3, [r7, #12]
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001578:	4619      	mov	r1, r3
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	440b      	add	r3, r1
 8001580:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001588:	3301      	adds	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8001592:	89bb      	ldrh	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	81bb      	strh	r3, [r7, #12]
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	b29b      	uxth	r3, r3
 800159c:	89ba      	ldrh	r2, [r7, #12]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3c8      	bcc.n	8001534 <SendQuery+0x19c>
	    }
	    break;
 80015a2:	e04a      	b.n	800163a <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80015a4:	8c3b      	ldrh	r3, [r7, #32]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80015b0:	8c3b      	ldrh	r3, [r7, #32]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80015b8:	8c3b      	ldrh	r3, [r7, #32]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2207      	movs	r2, #7
 80015c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	817b      	strh	r3, [r7, #10]
 80015d0:	e02e      	b.n	8001630 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	897b      	ldrh	r3, [r7, #10]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80015e6:	4619      	mov	r1, r3
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	440b      	add	r3, r1
 80015ee:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	897b      	ldrh	r3, [r7, #10]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	881a      	ldrh	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001610:	4619      	mov	r1, r3
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	440b      	add	r3, r1
 8001618:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800162a:	897b      	ldrh	r3, [r7, #10]
 800162c:	3301      	adds	r3, #1
 800162e:	817b      	strh	r3, [r7, #10]
 8001630:	8c3b      	ldrh	r3, [r7, #32]
 8001632:	897a      	ldrh	r2, [r7, #10]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3cc      	bcc.n	80015d2 <SendQuery+0x23a>
	    }
	    break;
 8001638:	bf00      	nop
	}

	sendTxBuffer(modH);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fbec 	bl	8001e18 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001646:	2300      	movs	r3, #0
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	f005 fe8a 	bl	8007364 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	749a      	strb	r2, [r3, #18]
	return 0;
 800165e:	2300      	movs	r3, #0


}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800166a:	b004      	add	sp, #16
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop

08001670 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001682:	f107 010c 	add.w	r1, r7, #12
 8001686:	f04f 32ff 	mov.w	r2, #4294967295
 800168a:	4618      	mov	r0, r3
 800168c:	f006 f800 	bl	8007690 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800169a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800169c:	f7ff fe7c 	bl	8001398 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	2001      	movs	r0, #1
 80016a6:	f007 fbed 	bl	8008e84 <ulTaskNotifyTake>
 80016aa:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	2200      	movs	r2, #0
 80016b0:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d018      	beq.n	80016ea <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	22f8      	movs	r2, #248	; 0xf8
 80016c4:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80016cc:	3301      	adds	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80016d6:	69b8      	ldr	r0, [r7, #24]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80016de:	4619      	mov	r1, r3
 80016e0:	2300      	movs	r3, #0
 80016e2:	2203      	movs	r2, #3
 80016e4:	f007 fc16 	bl	8008f14 <xTaskGenericNotify>
    	  continue;
 80016e8:	e097      	b.n	800181a <StartTaskModbusMaster+0x1aa>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 80016ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016ec:	f000 f98a 	bl	8001a04 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d818      	bhi.n	800172c <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	22fa      	movs	r2, #250	; 0xfa
 8001706:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800170e:	3301      	adds	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001718:	69b8      	ldr	r0, [r7, #24]
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001720:	4619      	mov	r1, r3
 8001722:	2300      	movs	r3, #0
 8001724:	2203      	movs	r2, #3
 8001726:	f007 fbf5 	bl	8008f14 <xTaskGenericNotify>
		  continue;
 800172a:	e076      	b.n	800181a <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001732:	2300      	movs	r3, #0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	2200      	movs	r2, #0
 800173a:	2103      	movs	r1, #3
 800173c:	f007 fe48 	bl	80093d0 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8001740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001742:	f000 f8f1 	bl	8001928 <validateAnswer>
 8001746:	4603      	mov	r3, r0
 8001748:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800174a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d010      	beq.n	8001774 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	2200      	movs	r2, #0
 8001756:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	7ffa      	ldrb	r2, [r7, #31]
 800175e:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001760:	69b8      	ldr	r0, [r7, #24]
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001768:	4619      	mov	r1, r3
 800176a:	2300      	movs	r3, #0
 800176c:	2203      	movs	r2, #3
 800176e:	f007 fbd1 	bl	8008f14 <xTaskGenericNotify>
	     continue;
 8001772:	e052      	b.n	800181a <StartTaskModbusMaster+0x1aa>
	  }

	  modH->i8lastError = u8exception;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	7ffa      	ldrb	r2, [r7, #31]
 8001778:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	4618      	mov	r0, r3
 8001786:	f006 f863 	bl	8007850 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	7d1b      	ldrb	r3, [r3, #20]
 800178e:	3b01      	subs	r3, #1
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d82b      	bhi.n	80017ec <StartTaskModbusMaster+0x17c>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <StartTaskModbusMaster+0x12c>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017dd 	.word	0x080017dd
 80017a0:	080017dd 	.word	0x080017dd
 80017a4:	080017e5 	.word	0x080017e5
 80017a8:	080017e5 	.word	0x080017e5
 80017ac:	080017ed 	.word	0x080017ed
 80017b0:	080017ed 	.word	0x080017ed
 80017b4:	080017ed 	.word	0x080017ed
 80017b8:	080017ed 	.word	0x080017ed
 80017bc:	080017ed 	.word	0x080017ed
 80017c0:	080017ed 	.word	0x080017ed
 80017c4:	080017ed 	.word	0x080017ed
 80017c8:	080017ed 	.word	0x080017ed
 80017cc:	080017ed 	.word	0x080017ed
 80017d0:	080017ed 	.word	0x080017ed
 80017d4:	080017ed 	.word	0x080017ed
 80017d8:	080017ed 	.word	0x080017ed
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80017dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017de:	f000 f81d 	bl	800181c <get_FC1>
	      break;
 80017e2:	e004      	b.n	80017ee <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80017e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017e6:	f000 f870 	bl	80018ca <get_FC3>
	      break;
 80017ea:	e000      	b.n	80017ee <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80017ec:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80017fc:	2300      	movs	r3, #0
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	f005 fdaf 	bl	8007364 <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001806:	69b8      	ldr	r0, [r7, #24]
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800180e:	4619      	mov	r1, r3
 8001810:	2300      	movs	r3, #0
 8001812:	2203      	movs	r2, #3
 8001814:	f007 fb7e 	bl	8008f14 <xTaskGenericNotify>
	  continue;
 8001818:	bf00      	nop
  {
 800181a:	e72f      	b.n	800167c <StartTaskModbusMaster+0xc>

0800181c <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8001824:	2303      	movs	r3, #3
 8001826:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]
 800182c:	e043      	b.n	80018b6 <get_FC1+0x9a>

        if(i%2)
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01c      	beq.n	8001874 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	7bbb      	ldrb	r3, [r7, #14]
 800183e:	4413      	add	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	7cd8      	ldrb	r0, [r3, #19]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	085b      	lsrs	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b2d9      	uxtb	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	085b      	lsrs	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	18d4      	adds	r4, r2, r3
 800186a:	f000 fa5f 	bl	8001d2c <word>
 800186e:	4603      	mov	r3, r0
 8001870:	8023      	strh	r3, [r4, #0]
 8001872:	e01d      	b.n	80018b0 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2d8      	uxtb	r0, r3
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	7bbb      	ldrb	r3, [r7, #14]
 8001890:	4413      	add	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	7cd9      	ldrb	r1, [r3, #19]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	18d4      	adds	r4, r2, r3
 80018a8:	f000 fa40 	bl	8001d2c <word>
 80018ac:	4603      	mov	r3, r0
 80018ae:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	3301      	adds	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7d5b      	ldrb	r3, [r3, #21]
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3b6      	bcc.n	800182e <get_FC1+0x12>
        }

     }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}

080018ca <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80018d2:	2303      	movs	r3, #3
 80018d4:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	73bb      	strb	r3, [r7, #14]
 80018da:	e018      	b.n	800190e <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	7cd8      	ldrb	r0, [r3, #19]
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3301      	adds	r3, #1
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	7cd9      	ldrb	r1, [r3, #19]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	18d4      	adds	r4, r2, r3
 80018fa:	f000 fa17 	bl	8001d2c <word>
 80018fe:	4603      	mov	r3, r0
 8001900:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	3302      	adds	r3, #2
 8001906:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	3301      	adds	r3, #1
 800190c:	73bb      	strb	r3, [r7, #14]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7d5b      	ldrb	r3, [r3, #21]
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	7bba      	ldrb	r2, [r7, #14]
 8001918:	429a      	cmp	r2, r3
 800191a:	d3df      	bcc.n	80018dc <get_FC3+0x12>
    }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
	...

08001928 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001936:	3b02      	subs	r3, #2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	7cdb      	ldrb	r3, [r3, #19]
 800193e:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001940:	b21a      	sxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001948:	3b01      	subs	r3, #1
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	440b      	add	r3, r1
 800194e:	7cdb      	ldrb	r3, [r3, #19]
 8001950:	b21b      	sxth	r3, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8001956:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f103 0213 	add.w	r2, r3, #19
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001964:	3b02      	subs	r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f000 f9f0 	bl	8001d50 <calcCRC>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	89bb      	ldrh	r3, [r7, #12]
 8001976:	4293      	cmp	r3, r2
 8001978:	d009      	beq.n	800198e <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001980:	3301      	adds	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800198a:	23fc      	movs	r3, #252	; 0xfc
 800198c:	e034      	b.n	80019f8 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7d1b      	ldrb	r3, [r3, #20]
 8001992:	b25b      	sxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	da09      	bge.n	80019ac <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800199e:	3301      	adds	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 80019a8:	23fb      	movs	r3, #251	; 0xfb
 80019aa:	e025      	b.n	80019f8 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	73bb      	strb	r3, [r7, #14]
 80019b4:	e00c      	b.n	80019d0 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <validateAnswer+0xd8>)
 80019ba:	5cd2      	ldrb	r2, [r2, r3]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7d1b      	ldrb	r3, [r3, #20]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d102      	bne.n	80019ca <validateAnswer+0xa2>
        {
            isSupported = 1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
            break;
 80019c8:	e005      	b.n	80019d6 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80019ca:	7bbb      	ldrb	r3, [r7, #14]
 80019cc:	3301      	adds	r3, #1
 80019ce:	73bb      	strb	r3, [r7, #14]
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
 80019d2:	2b07      	cmp	r3, #7
 80019d4:	d9ef      	bls.n	80019b6 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	f083 0301 	eor.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80019e8:	3301      	adds	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	0800a838 	.word	0x0800a838

08001a04 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d104      	bne.n	8001a20 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 f9ba 	bl	8005d94 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	33bc      	adds	r3, #188	; 0xbc
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fa34 	bl	8000e9c <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8001a34:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	e019      	b.n	8001a70 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3313      	adds	r3, #19
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff f9c1 	bl	8000dd0 <RingGetAllBytes>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a6e:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6858      	ldr	r0, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	33a6      	adds	r3, #166	; 0xa6
 8001a82:	2201      	movs	r2, #1
 8001a84:	4619      	mov	r1, r3
 8001a86:	f004 f955 	bl	8005d34 <HAL_UART_Receive_IT>
	}

    return i16result;
 8001a8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001aa6:	3b02      	subs	r3, #2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	7cdb      	ldrb	r3, [r3, #19]
 8001aae:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	440b      	add	r3, r1
 8001abe:	7cdb      	ldrb	r3, [r3, #19]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001ac6:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0213 	add.w	r2, r3, #19
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001ad4:	3b02      	subs	r3, #2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f000 f938 	bl	8001d50 <calcCRC>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	893b      	ldrh	r3, [r7, #8]
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d009      	beq.n	8001afe <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001af0:	3301      	adds	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8001afa:	23fc      	movs	r3, #252	; 0xfc
 8001afc:	e10f      	b.n	8001d1e <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	73bb      	strb	r3, [r7, #14]
 8001b06:	e00c      	b.n	8001b22 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	4a87      	ldr	r2, [pc, #540]	; (8001d28 <validateRequest+0x290>)
 8001b0c:	5cd2      	ldrb	r2, [r2, r3]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7d1b      	ldrb	r3, [r3, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d102      	bne.n	8001b1c <validateRequest+0x84>
	        {
	            isSupported = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
	            break;
 8001b1a:	e005      	b.n	8001b28 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	73bb      	strb	r3, [r7, #14]
 8001b22:	7bbb      	ldrb	r3, [r7, #14]
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	d9ef      	bls.n	8001b08 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f083 0301 	eor.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0ea      	b.n	8001d1e <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7d1b      	ldrb	r3, [r3, #20]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f200 80e0 	bhi.w	8001d1c <validateRequest+0x284>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <validateRequest+0xcc>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001ba5 	.word	0x08001ba5
 8001b68:	08001ba5 	.word	0x08001ba5
 8001b6c:	08001cbd 	.word	0x08001cbd
 8001b70:	08001cbd 	.word	0x08001cbd
 8001b74:	08001c51 	.word	0x08001c51
 8001b78:	08001c99 	.word	0x08001c99
 8001b7c:	08001d1d 	.word	0x08001d1d
 8001b80:	08001d1d 	.word	0x08001d1d
 8001b84:	08001d1d 	.word	0x08001d1d
 8001b88:	08001d1d 	.word	0x08001d1d
 8001b8c:	08001d1d 	.word	0x08001d1d
 8001b90:	08001d1d 	.word	0x08001d1d
 8001b94:	08001d1d 	.word	0x08001d1d
 8001b98:	08001d1d 	.word	0x08001d1d
 8001b9c:	08001ba5 	.word	0x08001ba5
 8001ba0:	08001cbd 	.word	0x08001cbd
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7d5a      	ldrb	r2, [r3, #21]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7d9b      	ldrb	r3, [r3, #22]
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f000 f8bc 	bl	8001d2c <word>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7dda      	ldrb	r2, [r3, #23]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7e1b      	ldrb	r3, [r3, #24]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f000 f8b1 	bl	8001d2c <word>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7dda      	ldrb	r2, [r3, #23]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7e1b      	ldrb	r3, [r3, #24]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 f8a6 	bl	8001d2c <word>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <validateRequest+0x15a>
 8001bec:	897b      	ldrh	r3, [r7, #10]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001bf2:	89ba      	ldrh	r2, [r7, #12]
 8001bf4:	897b      	ldrh	r3, [r7, #10]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	dd01      	ble.n	8001c06 <validateRequest+0x16e>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e08b      	b.n	8001d1e <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7dda      	ldrb	r2, [r3, #23]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7e1b      	ldrb	r3, [r3, #24]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4610      	mov	r0, r2
 8001c12:	f000 f88b 	bl	8001d2c <word>
 8001c16:	4603      	mov	r3, r0
 8001c18:	08db      	lsrs	r3, r3, #3
 8001c1a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7dda      	ldrb	r2, [r3, #23]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7e1b      	ldrb	r3, [r3, #24]
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f880 	bl	8001d2c <word>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <validateRequest+0x1a6>
 8001c38:	897b      	ldrh	r3, [r7, #10]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8001c3e:	897b      	ldrh	r3, [r7, #10]
 8001c40:	3305      	adds	r3, #5
 8001c42:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4a:	d960      	bls.n	8001d0e <validateRequest+0x276>
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e066      	b.n	8001d1e <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7d5a      	ldrb	r2, [r3, #21]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7d9b      	ldrb	r3, [r3, #22]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f000 f866 	bl	8001d2c <word>
 8001c60:	4603      	mov	r3, r0
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7d5a      	ldrb	r2, [r3, #21]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7d9b      	ldrb	r3, [r3, #22]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4610      	mov	r0, r2
 8001c72:	f000 f85b 	bl	8001d2c <word>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <validateRequest+0x1f0>
 8001c82:	89bb      	ldrh	r3, [r7, #12]
 8001c84:	3301      	adds	r3, #1
 8001c86:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001c8e:	89ba      	ldrh	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d93e      	bls.n	8001d12 <validateRequest+0x27a>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e042      	b.n	8001d1e <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7d5a      	ldrb	r2, [r3, #21]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7d9b      	ldrb	r3, [r3, #22]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f000 f842 	bl	8001d2c <word>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001cb2:	89ba      	ldrh	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d92e      	bls.n	8001d16 <validateRequest+0x27e>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e030      	b.n	8001d1e <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7d5a      	ldrb	r2, [r3, #21]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7d9b      	ldrb	r3, [r3, #22]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f000 f830 	bl	8001d2c <word>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7dda      	ldrb	r2, [r3, #23]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f000 f826 	bl	8001d2c <word>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001ce4:	89ba      	ldrh	r2, [r7, #12]
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	4413      	add	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	dd01      	ble.n	8001cf8 <validateRequest+0x260>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e012      	b.n	8001d1e <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3305      	adds	r3, #5
 8001d00:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d08:	d907      	bls.n	8001d1a <validateRequest+0x282>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e007      	b.n	8001d1e <validateRequest+0x286>
	        break;
 8001d0e:	bf00      	nop
 8001d10:	e004      	b.n	8001d1c <validateRequest+0x284>
	        break;
 8001d12:	bf00      	nop
 8001d14:	e002      	b.n	8001d1c <validateRequest+0x284>
	        break;
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <validateRequest+0x284>
	        break;
 8001d1a:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8001d1c:	2300      	movs	r3, #0

}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	0800a838 	.word	0x0800a838

08001d2c <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	460a      	mov	r2, r1
 8001d36:	71fb      	strb	r3, [r7, #7]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8001d44:	89bb      	ldrh	r3, [r7, #12]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8001d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d60:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	74fb      	strb	r3, [r7, #19]
 8001d66:	e023      	b.n	8001db0 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8001d68:	7cfb      	ldrb	r3, [r7, #19]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	4053      	eors	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001d78:	2301      	movs	r3, #1
 8001d7a:	74bb      	strb	r3, [r7, #18]
 8001d7c:	e012      	b.n	8001da4 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
            if (flag)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <calcCRC+0x4e>
                temp ^= 0xA001;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8001d98:	f083 0301 	eor.w	r3, r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001d9e:	7cbb      	ldrb	r3, [r7, #18]
 8001da0:	3301      	adds	r3, #1
 8001da2:	74bb      	strb	r3, [r7, #18]
 8001da4:	7cbb      	ldrb	r3, [r7, #18]
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d9e9      	bls.n	8001d7e <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	3301      	adds	r3, #1
 8001dae:	74fb      	strb	r3, [r7, #19]
 8001db0:	7cfa      	ldrb	r2, [r7, #19]
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3d7      	bcc.n	8001d68 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	b29b      	uxth	r3, r3

}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	7d1b      	ldrb	r3, [r3, #20]
 8001dec:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7a1a      	ldrb	r2, [r3, #8]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3b80      	subs	r3, #128	; 0x80
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	79fa      	ldrb	r2, [r7, #7]
 8001e04:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f103 0213 	add.w	r2, r3, #19
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f7ff ff8e 	bl	8001d50 <calcCRC>
 8001e34:	4603      	mov	r3, r0
 8001e36:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001e44:	4619      	mov	r1, r3
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	440b      	add	r3, r1
 8001e4c:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001e64:	4619      	mov	r1, r3
 8001e66:	89fb      	ldrh	r3, [r7, #14]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	440b      	add	r3, r1
 8001e6e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 f9b2 	bl	80061f6 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68d8      	ldr	r0, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8a1b      	ldrh	r3, [r3, #16]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f002 f9bf 	bl	8004220 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6858      	ldr	r0, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 0113 	add.w	r1, r3, #19
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f003 fef9 	bl	8005cac <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8001eba:	21fa      	movs	r1, #250	; 0xfa
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f006 ffe1 	bl	8008e84 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8001ec2:	bf00      	nop
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f7      	beq.n	8001ec4 <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00c      	beq.n	8001ef6 <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68d8      	ldr	r0, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8a1b      	ldrh	r3, [r3, #16]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f002 f99a 	bl	8004220 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 f9b3 	bl	800625c <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d10c      	bne.n	8001f18 <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001f04:	f006 fade 	bl	80084c4 <xTaskGetTickCount>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	4620      	mov	r0, r4
 8001f14:	f007 fa5c 	bl	80093d0 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001f26:	3301      	adds	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}

08001f38 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7d5a      	ldrb	r2, [r3, #21]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7d9b      	ldrb	r3, [r3, #22]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7ff feee 	bl	8001d2c <word>
 8001f50:	4603      	mov	r3, r0
 8001f52:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7dda      	ldrb	r2, [r3, #23]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7e1b      	ldrb	r3, [r3, #24]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f7ff fee4 	bl	8001d2c <word>
 8001f64:	4603      	mov	r3, r0
 8001f66:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8001f68:	8a3b      	ldrh	r3, [r7, #16]
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8001f70:	8a3b      	ldrh	r3, [r7, #16]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <process_FC1+0x4a>
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7dfa      	ldrb	r2, [r7, #23]
 8001f86:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001f96:	461a      	mov	r2, r3
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	82bb      	strh	r3, [r7, #20]
 8001fae:	e058      	b.n	8002062 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8001fb0:	8a7a      	ldrh	r2, [r7, #18]
 8001fb2:	8abb      	ldrh	r3, [r7, #20]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8001fb8:	89bb      	ldrh	r3, [r7, #12]
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001fbe:	89bb      	ldrh	r3, [r7, #12]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001fce:	897b      	ldrh	r3, [r7, #10]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	7a7b      	ldrb	r3, [r7, #9]
 8001fda:	fa42 f303 	asr.w	r3, r2, r3
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d014      	beq.n	8002010 <process_FC1+0xd8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	7cda      	ldrb	r2, [r3, #19]
 8001ff4:	7dbb      	ldrb	r3, [r7, #22]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8002004:	4313      	orrs	r3, r2
 8002006:	b2da      	uxtb	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	440b      	add	r3, r1
 800200c:	74da      	strb	r2, [r3, #19]
 800200e:	e015      	b.n	800203c <process_FC1+0x104>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	7cda      	ldrb	r2, [r3, #19]
 800201e:	7dbb      	ldrb	r3, [r7, #22]
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8002032:	4013      	ands	r3, r2
 8002034:	b2da      	uxtb	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	440b      	add	r3, r1
 800203a:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800203c:	7dbb      	ldrb	r3, [r7, #22]
 800203e:	3301      	adds	r3, #1
 8002040:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002042:	7dbb      	ldrb	r3, [r7, #22]
 8002044:	2b07      	cmp	r3, #7
 8002046:	d909      	bls.n	800205c <process_FC1+0x124>
        {
            u8bitsno = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002052:	3301      	adds	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800205c:	8abb      	ldrh	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	82bb      	strh	r3, [r7, #20]
 8002062:	8aba      	ldrh	r2, [r7, #20]
 8002064:	8a3b      	ldrh	r3, [r7, #16]
 8002066:	429a      	cmp	r2, r3
 8002068:	d3a2      	bcc.n	8001fb0 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800206a:	8a3b      	ldrh	r3, [r7, #16]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <process_FC1+0x14e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800207c:	3301      	adds	r3, #1
 800207e:	b2da      	uxtb	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800208c:	3302      	adds	r3, #2
 800208e:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fec1 	bl	8001e18 <sendTxBuffer>
    return u8CopyBufferSize;
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7d5a      	ldrb	r2, [r3, #21]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7d9b      	ldrb	r3, [r3, #22]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f7ff fe39 	bl	8001d2c <word>
 80020ba:	4603      	mov	r3, r0
 80020bc:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7dda      	ldrb	r2, [r3, #23]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7e1b      	ldrb	r3, [r3, #24]
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f7ff fe2f 	bl	8001d2c <word>
 80020ce:	4603      	mov	r3, r0
 80020d0:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 80020d2:	7afb      	ldrb	r3, [r7, #11]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2203      	movs	r2, #3
 80020e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80020e4:	89bb      	ldrh	r3, [r7, #12]
 80020e6:	81fb      	strh	r3, [r7, #14]
 80020e8:	e032      	b.n	8002150 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002102:	4619      	mov	r1, r3
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	440b      	add	r3, r1
 800210a:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002112:	3301      	adds	r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002130:	4619      	mov	r1, r3
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	440b      	add	r3, r1
 8002138:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002140:	3301      	adds	r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	3301      	adds	r3, #1
 800214e:	81fb      	strh	r3, [r7, #14]
 8002150:	89fa      	ldrh	r2, [r7, #14]
 8002152:	89b9      	ldrh	r1, [r7, #12]
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	440b      	add	r3, r1
 8002158:	429a      	cmp	r2, r3
 800215a:	dbc6      	blt.n	80020ea <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002162:	3302      	adds	r3, #2
 8002164:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fe56 	bl	8001e18 <sendTxBuffer>

    return u8CopyBufferSize;
 800216c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7d5a      	ldrb	r2, [r3, #21]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7d9b      	ldrb	r3, [r3, #22]
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f7ff fdce 	bl	8001d2c <word>
 8002190:	4603      	mov	r3, r0
 8002192:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7ddb      	ldrb	r3, [r3, #23]
 80021a8:	2bff      	cmp	r3, #255	; 0xff
 80021aa:	d115      	bne.n	80021d8 <process_FC5+0x60>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80021b2:	89bb      	ldrh	r3, [r7, #12]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	8819      	ldrh	r1, [r3, #0]
 80021ba:	7afb      	ldrb	r3, [r7, #11]
 80021bc:	2201      	movs	r2, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80021ca:	89bb      	ldrh	r3, [r7, #12]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4403      	add	r3, r0
 80021d0:	430a      	orrs	r2, r1
 80021d2:	b292      	uxth	r2, r2
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	e016      	b.n	8002206 <process_FC5+0x8e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80021de:	89bb      	ldrh	r3, [r7, #12]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	8819      	ldrh	r1, [r3, #0]
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	2201      	movs	r2, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80021fa:	89bb      	ldrh	r3, [r7, #12]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4403      	add	r3, r0
 8002200:	400a      	ands	r2, r1
 8002202:	b292      	uxth	r2, r2
 8002204:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2206      	movs	r2, #6
 800220a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002214:	3302      	adds	r3, #2
 8002216:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff fdfd 	bl	8001e18 <sendTxBuffer>

    return u8CopyBufferSize;
 800221e:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7d5a      	ldrb	r2, [r3, #21]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7d9b      	ldrb	r3, [r3, #22]
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7ff fd75 	bl	8001d2c <word>
 8002242:	4603      	mov	r3, r0
 8002244:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7dda      	ldrb	r2, [r3, #23]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7e1b      	ldrb	r3, [r3, #24]
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7ff fd6b 	bl	8001d2c <word>
 8002256:	4603      	mov	r3, r0
 8002258:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	89ba      	ldrh	r2, [r7, #12]
 8002268:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2206      	movs	r2, #6
 800226e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002278:	3302      	adds	r3, #2
 800227a:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fdcb 	bl	8001e18 <sendTxBuffer>

    return u8CopyBufferSize;
 8002282:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7d5a      	ldrb	r2, [r3, #21]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7d9b      	ldrb	r3, [r3, #22]
 800229e:	4619      	mov	r1, r3
 80022a0:	4610      	mov	r0, r2
 80022a2:	f7ff fd43 	bl	8001d2c <word>
 80022a6:	4603      	mov	r3, r0
 80022a8:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7dda      	ldrb	r2, [r3, #23]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7e1b      	ldrb	r3, [r3, #24]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7ff fd39 	bl	8001d2c <word>
 80022ba:	4603      	mov	r3, r0
 80022bc:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80022c2:	2307      	movs	r3, #7
 80022c4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	82bb      	strh	r3, [r7, #20]
 80022ca:	e058      	b.n	800237e <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80022cc:	8a7a      	ldrh	r2, [r7, #18]
 80022ce:	8abb      	ldrh	r3, [r7, #20]
 80022d0:	4413      	add	r3, r2
 80022d2:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80022d4:	89bb      	ldrh	r3, [r7, #12]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80022da:	89bb      	ldrh	r3, [r7, #12]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	7cdb      	ldrb	r3, [r3, #19]
 80022ec:	461a      	mov	r2, r3
 80022ee:	7dbb      	ldrb	r3, [r7, #22]
 80022f0:	fa42 f303 	asr.w	r3, r2, r3
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8002302:	7a3b      	ldrb	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <process_FC15+0xa6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800230e:	897b      	ldrh	r3, [r7, #10]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	8819      	ldrh	r1, [r3, #0]
 8002316:	7a7b      	ldrb	r3, [r7, #9]
 8002318:	2201      	movs	r2, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	b29a      	uxth	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8002326:	897b      	ldrh	r3, [r7, #10]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4403      	add	r3, r0
 800232c:	430a      	orrs	r2, r1
 800232e:	b292      	uxth	r2, r2
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	e016      	b.n	8002362 <process_FC15+0xd4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800233a:	897b      	ldrh	r3, [r7, #10]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	8819      	ldrh	r1, [r3, #0]
 8002342:	7a7b      	ldrb	r3, [r7, #9]
 8002344:	2201      	movs	r2, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	b29b      	uxth	r3, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8002356:	897b      	ldrh	r3, [r7, #10]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4403      	add	r3, r0
 800235c:	400a      	ands	r2, r1
 800235e:	b292      	uxth	r2, r2
 8002360:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8002362:	7dbb      	ldrb	r3, [r7, #22]
 8002364:	3301      	adds	r3, #1
 8002366:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002368:	7dbb      	ldrb	r3, [r7, #22]
 800236a:	2b07      	cmp	r3, #7
 800236c:	d904      	bls.n	8002378 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	3301      	adds	r3, #1
 8002376:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002378:	8abb      	ldrh	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	82bb      	strh	r3, [r7, #20]
 800237e:	8aba      	ldrh	r2, [r7, #20]
 8002380:	8a3b      	ldrh	r3, [r7, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	d3a2      	bcc.n	80022cc <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2206      	movs	r2, #6
 800238a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002394:	3302      	adds	r3, #2
 8002396:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fd3d 	bl	8001e18 <sendTxBuffer>
    return u8CopyBufferSize;
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7d5b      	ldrb	r3, [r3, #21]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7d9b      	ldrb	r3, [r3, #22]
 80023be:	b21b      	sxth	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7ddb      	ldrb	r3, [r3, #23]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7e1b      	ldrb	r3, [r3, #24]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80023e0:	8a7b      	ldrh	r3, [r7, #18]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2206      	movs	r2, #6
 80023ec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	82fb      	strh	r3, [r7, #22]
 80023f4:	e01d      	b.n	8002432 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 80023f6:	8afb      	ldrh	r3, [r7, #22]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	3307      	adds	r3, #7
        temp = word(
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	4413      	add	r3, r2
 8002400:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8002402:	8afb      	ldrh	r3, [r7, #22]
 8002404:	3304      	adds	r3, #4
 8002406:	005b      	lsls	r3, r3, #1
        temp = word(
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	7cdb      	ldrb	r3, [r3, #19]
 800240e:	4619      	mov	r1, r3
 8002410:	f7ff fc8c 	bl	8001d2c <word>
 8002414:	4603      	mov	r3, r0
 8002416:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800241e:	8ab9      	ldrh	r1, [r7, #20]
 8002420:	8afb      	ldrh	r3, [r7, #22]
 8002422:	440b      	add	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	89fa      	ldrh	r2, [r7, #14]
 800242a:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800242c:	8afb      	ldrh	r3, [r7, #22]
 800242e:	3301      	adds	r3, #1
 8002430:	82fb      	strh	r3, [r7, #22]
 8002432:	8afa      	ldrh	r2, [r7, #22]
 8002434:	8a7b      	ldrh	r3, [r7, #18]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3dd      	bcc.n	80023f6 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002440:	3302      	adds	r3, #2
 8002442:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fce7 	bl	8001e18 <sendTxBuffer>

    return u8CopyBufferSize;
 800244a:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af02      	add	r7, sp, #8
 800245e:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e019      	b.n	800249e <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_UART_TxCpltCallback+0x70>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	d10e      	bne.n	8002498 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800247a:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <HAL_UART_TxCpltCallback+0x70>)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8002486:	f107 0308 	add.w	r3, r7, #8
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	f006 fde3 	bl	800905c <xTaskGenericNotifyFromISR>
	   		break;
 8002496:	e008      	b.n	80024aa <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3301      	adds	r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_UART_TxCpltCallback+0x74>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	dbdf      	blt.n	800246a <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_UART_TxCpltCallback+0x68>
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_UART_TxCpltCallback+0x78>)
 80024b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000dbc 	.word	0x20000dbc
 80024cc:	200000b8 	.word	0x200000b8
 80024d0:	e000ed04 	.word	0xe000ed04

080024d4 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af02      	add	r7, sp, #8
 80024da:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e042      	b.n	800256c <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80024e6:	4a2d      	ldr	r2, [pc, #180]	; (800259c <HAL_UART_RxCpltCallback+0xc8>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d137      	bne.n	8002566 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 80024f6:	4a29      	ldr	r2, [pc, #164]	; (800259c <HAL_UART_RxCpltCallback+0xc8>)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002502:	2b01      	cmp	r3, #1
 8002504:	d139      	bne.n	800257a <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8002506:	4a25      	ldr	r2, [pc, #148]	; (800259c <HAL_UART_RxCpltCallback+0xc8>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_UART_RxCpltCallback+0xc8>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800251a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7fe fc0f 	bl	8000d44 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8002526:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_UART_RxCpltCallback+0xc8>)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	6858      	ldr	r0, [r3, #4]
 8002530:	4a1a      	ldr	r2, [pc, #104]	; (800259c <HAL_UART_RxCpltCallback+0xc8>)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002538:	33a6      	adds	r3, #166	; 0xa6
 800253a:	2201      	movs	r2, #1
 800253c:	4619      	mov	r1, r3
 800253e:	f003 fbf9 	bl	8005d34 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8002542:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_UART_RxCpltCallback+0xc8>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800254e:	f005 ffc7 	bl	80084e0 <xTaskGetTickCountFromISR>
 8002552:	4602      	mov	r2, r0
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	2100      	movs	r1, #0
 800255a:	9100      	str	r1, [sp, #0]
 800255c:	2107      	movs	r1, #7
 800255e:	4620      	mov	r0, r4
 8002560:	f006 ff36 	bl	80093d0 <xTimerGenericCommand>
    		}
    		break;
 8002564:	e009      	b.n	800257a <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3301      	adds	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_UART_RxCpltCallback+0xcc>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4293      	cmp	r3, r2
 8002576:	dbb6      	blt.n	80024e6 <HAL_UART_RxCpltCallback+0x12>
 8002578:	e000      	b.n	800257c <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800257a:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <HAL_UART_RxCpltCallback+0xbe>
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_UART_RxCpltCallback+0xd0>)
 8002584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	20000dbc 	.word	0x20000dbc
 80025a0:	200000b8 	.word	0x200000b8
 80025a4:	e000ed04 	.word	0xe000ed04

080025a8 <HAL_GPIO_EXTI_Callback>:
float velocidad;
float ranuras = 20.0;
float freq = 10.0;

//Si se interrumpe por flanco ascendente del pin 0 (Enconder optico)
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == D01_Encoder_Pin){
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d10a      	bne.n	80025ce <HAL_GPIO_EXTI_Callback+0x26>
		incremento_enconder += 1;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe f8d1 	bl	8000768 <__addsf3>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80025cc:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80025ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d2:	4804      	ldr	r0, [pc, #16]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80025d4:	f001 fe3c 	bl	8004250 <HAL_GPIO_TogglePin>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200000bc 	.word	0x200000bc
 80025e4:	40011000 	.word	0x40011000

080025e8 <Sentido>:

void Sentido(uint16_t valor){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
	//Motor gira en un sentido
	if(valor == 0){
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10c      	bne.n	8002612 <Sentido+0x2a>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, SET);
 80025f8:	2201      	movs	r2, #1
 80025fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025fe:	4815      	ldr	r0, [pc, #84]	; (8002654 <Sentido+0x6c>)
 8002600:	f001 fe0e 	bl	8004220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
 8002604:	2200      	movs	r2, #0
 8002606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260a:	4812      	ldr	r0, [pc, #72]	; (8002654 <Sentido+0x6c>)
 800260c:	f001 fe08 	bl	8004220 <HAL_GPIO_WritePin>
	}
	else{ // Break
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
	}
}
 8002610:	e01b      	b.n	800264a <Sentido+0x62>
	else if(valor == 1){
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10c      	bne.n	8002632 <Sentido+0x4a>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <Sentido+0x6c>)
 8002620:	f001 fdfe 	bl	8004220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, SET);
 8002624:	2201      	movs	r2, #1
 8002626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800262a:	480a      	ldr	r0, [pc, #40]	; (8002654 <Sentido+0x6c>)
 800262c:	f001 fdf8 	bl	8004220 <HAL_GPIO_WritePin>
}
 8002630:	e00b      	b.n	800264a <Sentido+0x62>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
 8002632:	2200      	movs	r2, #0
 8002634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002638:	4806      	ldr	r0, [pc, #24]	; (8002654 <Sentido+0x6c>)
 800263a:	f001 fdf1 	bl	8004220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <Sentido+0x6c>)
 8002646:	f001 fdeb 	bl	8004220 <HAL_GPIO_WritePin>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40010c00 	.word	0x40010c00

08002658 <Velocidad>:

void Velocidad(uint16_t param){
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
	if(incremento_enconder == 0){
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <Velocidad+0x9c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fb18 	bl	8000ca0 <__aeabi_fcmpeq>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <Velocidad+0x28>
		velocidad = 0.0;
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <Velocidad+0xa0>)
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
		if (param == 1){
			velocidad =  freq*incremento_enconder/(ranuras);
			incremento_enconder=0;
		}
	}
}
 800267e:	e035      	b.n	80026ec <Velocidad+0x94>
		if (param ==0){
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d117      	bne.n	80026b6 <Velocidad+0x5e>
			velocidad = freq*incremento_enconder/(ranuras);
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <Velocidad+0xa4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <Velocidad+0x9c>)
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe f971 	bl	8000978 <__aeabi_fmul>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	4b19      	ldr	r3, [pc, #100]	; (8002700 <Velocidad+0xa8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f7fe fa1d 	bl	8000ae0 <__aeabi_fdiv>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <Velocidad+0xa0>)
 80026ac:	601a      	str	r2, [r3, #0]
			incremento_enconder=0;
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <Velocidad+0x9c>)
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
		if (param == 1){
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d117      	bne.n	80026ec <Velocidad+0x94>
			velocidad =  freq*incremento_enconder/(ranuras);
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <Velocidad+0xa4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <Velocidad+0x9c>)
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe f956 	bl	8000978 <__aeabi_fmul>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <Velocidad+0xa8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f7fe fa02 	bl	8000ae0 <__aeabi_fdiv>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <Velocidad+0xa0>)
 80026e2:	601a      	str	r2, [r3, #0]
			incremento_enconder=0;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <Velocidad+0x9c>)
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200000bc 	.word	0x200000bc
 80026f8:	20000f84 	.word	0x20000f84
 80026fc:	20000024 	.word	0x20000024
 8002700:	20000020 	.word	0x20000020

08002704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800270a:	f000 fdf3 	bl	80032f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270e:	f000 f88f 	bl	8002830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002712:	f000 fa57 	bl	8002bc4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002716:	f000 fa0d 	bl	8002b34 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800271a:	f000 f947 	bl	80029ac <MX_TIM1_Init>
  MX_DMA_Init();
 800271e:	f000 fa33 	bl	8002b88 <MX_DMA_Init>
  MX_ADC1_Init();
 8002722:	f000 f8df 	bl	80028e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Definiciones para la biblioteca de modbus
   ModbusH.uModbusType = MB_SLAVE;
 8002726:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <main+0xdc>)
 8002728:	2203      	movs	r2, #3
 800272a:	701a      	strb	r2, [r3, #0]
   ModbusH.port =  &huart3;
 800272c:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <main+0xdc>)
 800272e:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <main+0xe0>)
 8002730:	605a      	str	r2, [r3, #4]
   ModbusH.u8id = 1; //Modbus slave ID
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <main+0xdc>)
 8002734:	2201      	movs	r2, #1
 8002736:	721a      	strb	r2, [r3, #8]
   ModbusH.u16timeOut = 1000;
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <main+0xdc>)
 800273a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800273e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
   ModbusH.EN_Port = NULL;
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <main+0xdc>)
 8002744:	2200      	movs	r2, #0
 8002746:	60da      	str	r2, [r3, #12]
   ModbusH.u16regs = ModbusDATA;
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <main+0xdc>)
 800274a:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <main+0xe4>)
 800274c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <main+0xdc>)
 8002752:	220d      	movs	r2, #13
 8002754:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ModbusH.xTypeHW = USART_HW;
 8002758:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <main+0xdc>)
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

   //Initialize Modbus library
   ModbusInit(&ModbusH);
 8002760:	481f      	ldr	r0, [pc, #124]	; (80027e0 <main+0xdc>)
 8002762:	f7fe fbb5 	bl	8000ed0 <ModbusInit>
   //Start capturing traffic on serial Port
   ModbusStart(&ModbusH);
 8002766:	481e      	ldr	r0, [pc, #120]	; (80027e0 <main+0xdc>)
 8002768:	f7fe fc54 	bl	8001014 <ModbusStart>

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800276c:	2100      	movs	r1, #0
 800276e:	481f      	ldr	r0, [pc, #124]	; (80027ec <main+0xe8>)
 8002770:	f002 fb9a 	bl	8004ea8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002774:	f003 fff2 	bl	800675c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueDataADC */
  QueueDataADCHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueDataADC_attributes);
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <main+0xec>)
 800277a:	2102      	movs	r1, #2
 800277c:	2010      	movs	r0, #16
 800277e:	f004 f9f9 	bl	8006b74 <osMessageQueueNew>
 8002782:	4603      	mov	r3, r0
 8002784:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <main+0xf0>)
 8002786:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  if ( QueueDataADCHandle == 0)  // Queue not created
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <main+0xf0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <main+0x92>
  {
	  char *str = "Unable to create Integer Queue\n\n";
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <main+0xf4>)
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	e001      	b.n	800279a <main+0x96>
//	  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
  }
  else
  {
	  char *str = "Integer Queue Created successfully\n\n";
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <main+0xf8>)
 8002798:	607b      	str	r3, [r7, #4]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Modbus */
  ModbusHandle = osThreadNew(StartModbus, NULL, &Modbus_attributes);
 800279a:	4a19      	ldr	r2, [pc, #100]	; (8002800 <main+0xfc>)
 800279c:	2100      	movs	r1, #0
 800279e:	4819      	ldr	r0, [pc, #100]	; (8002804 <main+0x100>)
 80027a0:	f004 f842 	bl	8006828 <osThreadNew>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <main+0x104>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(StartADC, NULL, &ADC_attributes);
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <main+0x108>)
 80027ac:	2100      	movs	r1, #0
 80027ae:	4818      	ldr	r0, [pc, #96]	; (8002810 <main+0x10c>)
 80027b0:	f004 f83a 	bl	8006828 <osThreadNew>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <main+0x110>)
 80027b8:	6013      	str	r3, [r2, #0]

  /* creation of Encoders */
  EncodersHandle = osThreadNew(StartEncoders, NULL, &Encoders_attributes);
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <main+0x114>)
 80027bc:	2100      	movs	r1, #0
 80027be:	4817      	ldr	r0, [pc, #92]	; (800281c <main+0x118>)
 80027c0:	f004 f832 	bl	8006828 <osThreadNew>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <main+0x11c>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(StartControl, NULL, &Control_attributes);
 80027ca:	4a16      	ldr	r2, [pc, #88]	; (8002824 <main+0x120>)
 80027cc:	2100      	movs	r1, #0
 80027ce:	4816      	ldr	r0, [pc, #88]	; (8002828 <main+0x124>)
 80027d0:	f004 f82a 	bl	8006828 <osThreadNew>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a15      	ldr	r2, [pc, #84]	; (800282c <main+0x128>)
 80027d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027da:	f003 fff1 	bl	80067c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027de:	e7fe      	b.n	80027de <main+0xda>
 80027e0:	20000dc4 	.word	0x20000dc4
 80027e4:	20000f0c 	.word	0x20000f0c
 80027e8:	20000000 	.word	0x20000000
 80027ec:	20000fcc 	.word	0x20000fcc
 80027f0:	0800a8d0 	.word	0x0800a8d0
 80027f4:	20001018 	.word	0x20001018
 80027f8:	0800a734 	.word	0x0800a734
 80027fc:	0800a758 	.word	0x0800a758
 8002800:	0800a840 	.word	0x0800a840
 8002804:	08002cfd 	.word	0x08002cfd
 8002808:	2000101c 	.word	0x2000101c
 800280c:	0800a864 	.word	0x0800a864
 8002810:	08002d55 	.word	0x08002d55
 8002814:	20001014 	.word	0x20001014
 8002818:	0800a888 	.word	0x0800a888
 800281c:	08002d81 	.word	0x08002d81
 8002820:	20000f08 	.word	0x20000f08
 8002824:	0800a8ac 	.word	0x0800a8ac
 8002828:	08002e05 	.word	0x08002e05
 800282c:	20000f50 	.word	0x20000f50

08002830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b094      	sub	sp, #80	; 0x50
 8002834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800283a:	2228      	movs	r2, #40	; 0x28
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f007 faf0 	bl	8009e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002860:	2301      	movs	r3, #1
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800286e:	2301      	movs	r3, #1
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002872:	2302      	movs	r3, #2
 8002874:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800287c:	2300      	movs	r3, #0
 800287e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002884:	4618      	mov	r0, r3
 8002886:	f001 fd15 	bl	80042b4 <HAL_RCC_OscConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002890:	f000 fad2 	bl	8002e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002894:	230f      	movs	r3, #15
 8002896:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002898:	2302      	movs	r3, #2
 800289a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 ff7f 	bl	80047b4 <HAL_RCC_ClockConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80028bc:	f000 fabc 	bl	8002e38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028c0:	2302      	movs	r3, #2
 80028c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 f93c 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80028d6:	f000 faaf 	bl	8002e38 <Error_Handler>
  }
}
 80028da:	bf00      	nop
 80028dc:	3750      	adds	r7, #80	; 0x50
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <MX_ADC1_Init+0xc0>)
 80028f6:	4a2c      	ldr	r2, [pc, #176]	; (80029a8 <MX_ADC1_Init+0xc4>)
 80028f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <MX_ADC1_Init+0xc0>)
 80028fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002900:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002902:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <MX_ADC1_Init+0xc0>)
 8002904:	2201      	movs	r2, #1
 8002906:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <MX_ADC1_Init+0xc0>)
 800290a:	2200      	movs	r2, #0
 800290c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <MX_ADC1_Init+0xc0>)
 8002910:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002914:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002916:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <MX_ADC1_Init+0xc0>)
 8002918:	2200      	movs	r2, #0
 800291a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <MX_ADC1_Init+0xc0>)
 800291e:	2204      	movs	r2, #4
 8002920:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002922:	4820      	ldr	r0, [pc, #128]	; (80029a4 <MX_ADC1_Init+0xc0>)
 8002924:	f000 fd18 	bl	8003358 <HAL_ADC_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800292e:	f000 fa83 	bl	8002e38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002936:	2301      	movs	r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4818      	ldr	r0, [pc, #96]	; (80029a4 <MX_ADC1_Init+0xc0>)
 8002944:	f000 feb6 	bl	80036b4 <HAL_ADC_ConfigChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800294e:	f000 fa73 	bl	8002e38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002952:	2302      	movs	r3, #2
 8002954:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4812      	ldr	r0, [pc, #72]	; (80029a4 <MX_ADC1_Init+0xc0>)
 800295c:	f000 feaa 	bl	80036b4 <HAL_ADC_ConfigChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002966:	f000 fa67 	bl	8002e38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800296a:	2303      	movs	r3, #3
 800296c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	4619      	mov	r1, r3
 8002972:	480c      	ldr	r0, [pc, #48]	; (80029a4 <MX_ADC1_Init+0xc0>)
 8002974:	f000 fe9e 	bl	80036b4 <HAL_ADC_ConfigChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800297e:	f000 fa5b 	bl	8002e38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002982:	2304      	movs	r3, #4
 8002984:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4806      	ldr	r0, [pc, #24]	; (80029a4 <MX_ADC1_Init+0xc0>)
 800298c:	f000 fe92 	bl	80036b4 <HAL_ADC_ConfigChannel>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8002996:	f000 fa4f 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000f54 	.word	0x20000f54
 80029a8:	40012400 	.word	0x40012400

080029ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b096      	sub	sp, #88	; 0x58
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	611a      	str	r2, [r3, #16]
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2220      	movs	r2, #32
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f007 fa1d 	bl	8009e24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029ea:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <MX_TIM1_Init+0x180>)
 80029ec:	4a50      	ldr	r2, [pc, #320]	; (8002b30 <MX_TIM1_Init+0x184>)
 80029ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029f0:	4b4e      	ldr	r3, [pc, #312]	; (8002b2c <MX_TIM1_Init+0x180>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f6:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <MX_TIM1_Init+0x180>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <MX_TIM1_Init+0x180>)
 80029fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a04:	4b49      	ldr	r3, [pc, #292]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a0a:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a10:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a16:	4845      	ldr	r0, [pc, #276]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002a18:	f002 f94c 	bl	8004cb4 <HAL_TIM_Base_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002a22:	f000 fa09 	bl	8002e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a30:	4619      	mov	r1, r3
 8002a32:	483e      	ldr	r0, [pc, #248]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002a34:	f002 fca0 	bl	8005378 <HAL_TIM_ConfigClockSource>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a3e:	f000 f9fb 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a42:	483a      	ldr	r0, [pc, #232]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002a44:	f002 f9d8 	bl	8004df8 <HAL_TIM_PWM_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a4e:	f000 f9f3 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4832      	ldr	r0, [pc, #200]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002a62:	f003 f815 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a6c:	f000 f9e4 	bl	8002e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a70:	2360      	movs	r3, #96	; 0x60
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	2200      	movs	r2, #0
 8002a92:	4619      	mov	r1, r3
 8002a94:	4825      	ldr	r0, [pc, #148]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002a96:	f002 fbb1 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002aa0:	f000 f9ca 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	481f      	ldr	r0, [pc, #124]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002aae:	f002 fba5 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002ab8:	f000 f9be 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4819      	ldr	r0, [pc, #100]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002ac6:	f002 fb99 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002ad0:	f000 f9b2 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad8:	220c      	movs	r2, #12
 8002ada:	4619      	mov	r1, r3
 8002adc:	4813      	ldr	r0, [pc, #76]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002ade:	f002 fb8d 	bl	80051fc <HAL_TIM_PWM_ConfigChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002ae8:	f000 f9a6 	bl	8002e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4807      	ldr	r0, [pc, #28]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002b10:	f003 f81c 	bl	8005b4c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002b1a:	f000 f98d 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b1e:	4803      	ldr	r0, [pc, #12]	; (8002b2c <MX_TIM1_Init+0x180>)
 8002b20:	f000 fa56 	bl	8002fd0 <HAL_TIM_MspPostInit>

}
 8002b24:	bf00      	nop
 8002b26:	3758      	adds	r7, #88	; 0x58
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000fcc 	.word	0x20000fcc
 8002b30:	40012c00 	.word	0x40012c00

08002b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <MX_USART3_UART_Init+0x50>)
 8002b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b6a:	4805      	ldr	r0, [pc, #20]	; (8002b80 <MX_USART3_UART_Init+0x4c>)
 8002b6c:	f003 f851 	bl	8005c12 <HAL_UART_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b76:	f000 f95f 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000f0c 	.word	0x20000f0c
 8002b84:	40004800 	.word	0x40004800

08002b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <MX_DMA_Init+0x38>)
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <MX_DMA_Init+0x38>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6153      	str	r3, [r2, #20]
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <MX_DMA_Init+0x38>)
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2105      	movs	r1, #5
 8002baa:	200b      	movs	r0, #11
 8002bac:	f000 ff79 	bl	8003aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bb0:	200b      	movs	r0, #11
 8002bb2:	f000 ff92 	bl	8003ada <HAL_NVIC_EnableIRQ>

}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bca:	f107 0310 	add.w	r3, r7, #16
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd8:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	4a42      	ldr	r2, [pc, #264]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002bde:	f043 0310 	orr.w	r3, r3, #16
 8002be2:	6193      	str	r3, [r2, #24]
 8002be4:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002bf6:	f043 0320 	orr.w	r3, r3, #32
 8002bfa:	6193      	str	r3, [r2, #24]
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c08:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4a36      	ldr	r2, [pc, #216]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	6193      	str	r3, [r2, #24]
 8002c14:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c20:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <MX_GPIO_Init+0x124>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c3e:	482b      	ldr	r0, [pc, #172]	; (8002cec <MX_GPIO_Init+0x128>)
 8002c40:	f001 faee 	bl	8004220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 8002c44:	2200      	movs	r2, #0
 8002c46:	f24f 0118 	movw	r1, #61464	; 0xf018
 8002c4a:	4829      	ldr	r0, [pc, #164]	; (8002cf0 <MX_GPIO_Init+0x12c>)
 8002c4c:	f001 fae8 	bl	8004220 <HAL_GPIO_WritePin>
                          |OUT3_2_Pin|OUT3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT4_1_Pin|OUT4_2_Pin, GPIO_PIN_RESET);
 8002c50:	2200      	movs	r2, #0
 8002c52:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8002c56:	4827      	ldr	r0, [pc, #156]	; (8002cf4 <MX_GPIO_Init+0x130>)
 8002c58:	f001 fae2 	bl	8004220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002c6e:	f107 0310 	add.w	r3, r7, #16
 8002c72:	4619      	mov	r1, r3
 8002c74:	481d      	ldr	r0, [pc, #116]	; (8002cec <MX_GPIO_Init+0x128>)
 8002c76:	f001 f94f 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT2_1_Pin OUT2_2_Pin OUT1_2_Pin OUT1_1_Pin
                           OUT3_2_Pin OUT3_1_Pin */
  GPIO_InitStruct.Pin = OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 8002c7a:	f24f 0318 	movw	r3, #61464	; 0xf018
 8002c7e:	613b      	str	r3, [r7, #16]
                          |OUT3_2_Pin|OUT3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	4619      	mov	r1, r3
 8002c92:	4817      	ldr	r0, [pc, #92]	; (8002cf0 <MX_GPIO_Init+0x12c>)
 8002c94:	f001 f940 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT4_1_Pin OUT4_2_Pin */
  GPIO_InitStruct.Pin = OUT4_1_Pin|OUT4_2_Pin;
 8002c98:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 0310 	add.w	r3, r7, #16
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4810      	ldr	r0, [pc, #64]	; (8002cf4 <MX_GPIO_Init+0x130>)
 8002cb2:	f001 f931 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : D01_Encoder_Pin D02_Encoder_Pin D03_Encoder_Pin D04_Encoder_Pin */
  GPIO_InitStruct.Pin = D01_Encoder_Pin|D02_Encoder_Pin|D03_Encoder_Pin|D04_Encoder_Pin;
 8002cb6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <MX_GPIO_Init+0x134>)
 8002cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4809      	ldr	r0, [pc, #36]	; (8002cf0 <MX_GPIO_Init+0x12c>)
 8002ccc:	f001 f924 	bl	8003f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	2017      	movs	r0, #23
 8002cd6:	f000 fee4 	bl	8003aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cda:	2017      	movs	r0, #23
 8002cdc:	f000 fefd 	bl	8003ada <HAL_NVIC_EnableIRQ>

}
 8002ce0:	bf00      	nop
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40011000 	.word	0x40011000
 8002cf0:	40010c00 	.word	0x40010c00
 8002cf4:	40010800 	.word	0x40010800
 8002cf8:	10110000 	.word	0x10110000

08002cfc <StartModbus>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartModbus */
void StartModbus(void *argument)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b096      	sub	sp, #88	; 0x58
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i =0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
	char buff[64];
	uint16_t valor =1234;
 8002d08:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8002d0c:	817b      	strh	r3, [r7, #10]
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
//	  osMessageGet( QueueDataADCHandle, &valor, 0 );
	prt=pvPortMalloc(100*sizeof (char));
 8002d0e:	2064      	movs	r0, #100	; 0x64
 8002d10:	f007 f81c 	bl	8009d4c <pvPortMalloc>
 8002d14:	6538      	str	r0, [r7, #80]	; 0x50
	sprintf(prt,"Dato leido de la Queue: %u \n",valor);
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	490c      	ldr	r1, [pc, #48]	; (8002d4c <StartModbus+0x50>)
 8002d1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002d1e:	f007 f93f 	bl	8009fa0 <siprintf>

	 status = osMessageQueueGet(QueueDataADCHandle, &valor, NULL, 5000);   // wait for message
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <StartModbus+0x54>)
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	f107 010a 	add.w	r1, r7, #10
 8002d2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f004 f81a 	bl	8006d68 <osMessageQueueGet>
 8002d34:	64f8      	str	r0, [r7, #76]	; 0x4c
	    if (status == osOK) {
 8002d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <StartModbus+0x46>
//	HAL_UART_Transmit(&huart3, (uint8_t*)prt, strlen(prt), 100);
	vPortFree(prt);
 8002d3c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002d3e:	f007 f817 	bl	8009d70 <vPortFree>
	      ; // process data
	    }

    osDelay(900);
 8002d42:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002d46:	f003 fe4b 	bl	80069e0 <osDelay>
	prt=pvPortMalloc(100*sizeof (char));
 8002d4a:	e7e0      	b.n	8002d0e <StartModbus+0x12>
 8002d4c:	0800a780 	.word	0x0800a780
 8002d50:	20001018 	.word	0x20001018

08002d54 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  {
//	HAL_ADC_Stop_DMA(&hadc1);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1,sizeof (adc1));
//	adc1 = HAL_ADC_PollForConversion(&hadc1, 5000);
//	osMessageQueuePut(QueueDataADCHandle, &adc1, 5000);
	osMessageQueuePut(QueueDataADCHandle, &adc1[0], NULL, 5000);
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <StartADC+0x28>)
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	f107 0108 	add.w	r1, r7, #8
 8002d64:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f003 ff89 	bl	8006c80 <osMessageQueuePut>
	osThreadYield();
 8002d6e:	f003 fe05 	bl	800697c <osThreadYield>

    osDelay(1000);
 8002d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d76:	f003 fe33 	bl	80069e0 <osDelay>
	osMessageQueuePut(QueueDataADCHandle, &adc1[0], NULL, 5000);
 8002d7a:	e7ef      	b.n	8002d5c <StartADC+0x8>
 8002d7c:	20001018 	.word	0x20001018

08002d80 <StartEncoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoders */
void StartEncoders(void *argument)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

    Velocidad(ModbusDATA[0]);// Calculo la velocidad para devolver por modbus
 8002d88:	4b18      	ldr	r3, [pc, #96]	; (8002dec <StartEncoders+0x6c>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fc63 	bl	8002658 <Velocidad>
    osDelay(Ts);// Delta T
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <StartEncoders+0x70>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 fe22 	bl	80069e0 <osDelay>
    Sentido(ModbusDATA[0]);
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <StartEncoders+0x6c>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fc21 	bl	80025e8 <Sentido>
    ModbusDATA[8] = (uint16_t)(100.0*velocidad);
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <StartEncoders+0x74>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fc5e 	bl	800066c <__aeabi_f2d>
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <StartEncoders+0x78>)
 8002db6:	f7fd f9cb 	bl	8000150 <__aeabi_dmul>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd fcab 	bl	800071c <__aeabi_d2uiz>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <StartEncoders+0x6c>)
 8002dcc:	821a      	strh	r2, [r3, #16]
    ModbusDATA[9] = (uint16_t)incremento_enconder;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <StartEncoders+0x7c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd ff96 	bl	8000d04 <__aeabi_f2uiz>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <StartEncoders+0x6c>)
 8002dde:	825a      	strh	r2, [r3, #18]
    htim1.Instance->CCR1 = ModbusDATA[1];
 8002de0:	4b02      	ldr	r3, [pc, #8]	; (8002dec <StartEncoders+0x6c>)
 8002de2:	885a      	ldrh	r2, [r3, #2]
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <StartEncoders+0x80>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
    Velocidad(ModbusDATA[0]);// Calculo la velocidad para devolver por modbus
 8002dea:	e7cd      	b.n	8002d88 <StartEncoders+0x8>
 8002dec:	20000000 	.word	0x20000000
 8002df0:	2000001c 	.word	0x2000001c
 8002df4:	20000f84 	.word	0x20000f84
 8002df8:	40590000 	.word	0x40590000
 8002dfc:	200000bc 	.word	0x200000bc
 8002e00:	20000fcc 	.word	0x20000fcc

08002e04 <StartControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f003 fde7 	bl	80069e0 <osDelay>
 8002e12:	e7fb      	b.n	8002e0c <StartControl+0x8>

08002e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  // ESTO ES DE FREERTOS
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e26:	f000 fa7b 	bl	8003320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40000800 	.word	0x40000800

08002e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3c:	b672      	cpsid	i
}
 8002e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <Error_Handler+0x8>
	...

08002e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_MspInit+0x68>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <HAL_MspInit+0x68>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6193      	str	r3, [r2, #24]
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_MspInit+0x68>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_MspInit+0x68>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_MspInit+0x68>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	61d3      	str	r3, [r2, #28]
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_MspInit+0x68>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	210f      	movs	r1, #15
 8002e7e:	f06f 0001 	mvn.w	r0, #1
 8002e82:	f000 fe0e 	bl	8003aa2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_MspInit+0x6c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_MspInit+0x6c>)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40010000 	.word	0x40010000

08002eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <HAL_ADC_MspInit+0xcc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d151      	bne.n	8002f78 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_ADC_MspInit+0xd0>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <HAL_ADC_MspInit+0xd0>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <HAL_ADC_MspInit+0xd0>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_ADC_MspInit+0xd0>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <HAL_ADC_MspInit+0xd0>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6193      	str	r3, [r2, #24]
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_ADC_MspInit+0xd0>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002f04:	230f      	movs	r3, #15
 8002f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	4619      	mov	r1, r3
 8002f12:	481d      	ldr	r0, [pc, #116]	; (8002f88 <HAL_ADC_MspInit+0xd4>)
 8002f14:	f001 f800 	bl	8003f18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_ADC_MspInit+0xdc>)
 8002f1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f4c:	480f      	ldr	r0, [pc, #60]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f4e:	f000 fdd3 	bl	8003af8 <HAL_DMA_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002f58:	f7ff ff6e 	bl	8002e38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f60:	621a      	str	r2, [r3, #32]
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_ADC_MspInit+0xd8>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2105      	movs	r1, #5
 8002f6c:	2012      	movs	r0, #18
 8002f6e:	f000 fd98 	bl	8003aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f72:	2012      	movs	r0, #18
 8002f74:	f000 fdb1 	bl	8003ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f78:	bf00      	nop
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40012400 	.word	0x40012400
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40010800 	.word	0x40010800
 8002f8c:	20000f88 	.word	0x20000f88
 8002f90:	40020008 	.word	0x40020008

08002f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_TIM_Base_MspInit+0x34>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10b      	bne.n	8002fbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_TIM_Base_MspInit+0x38>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <HAL_TIM_Base_MspInit+0x38>)
 8002fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fb0:	6193      	str	r3, [r2, #24]
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_TIM_Base_MspInit+0x38>)
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_TIM_MspPostInit+0x5c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d118      	bne.n	8003022 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_TIM_MspPostInit+0x60>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <HAL_TIM_MspPostInit+0x60>)
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	6193      	str	r3, [r2, #24]
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_TIM_MspPostInit+0x60>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_01_Pin|PWM_02_Pin|PWM_03_Pin|PWM_04_Pin;
 8003008:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800300c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003012:	2302      	movs	r3, #2
 8003014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f107 0310 	add.w	r3, r7, #16
 800301a:	4619      	mov	r1, r3
 800301c:	4805      	ldr	r0, [pc, #20]	; (8003034 <HAL_TIM_MspPostInit+0x64>)
 800301e:	f000 ff7b 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003022:	bf00      	nop
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40010800 	.word	0x40010800

08003038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0310 	add.w	r3, r7, #16
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_UART_MspInit+0x9c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d139      	bne.n	80030cc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003058:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <HAL_UART_MspInit+0xa0>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4a1e      	ldr	r2, [pc, #120]	; (80030d8 <HAL_UART_MspInit+0xa0>)
 800305e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003062:	61d3      	str	r3, [r2, #28]
 8003064:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <HAL_UART_MspInit+0xa0>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_UART_MspInit+0xa0>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_UART_MspInit+0xa0>)
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	6193      	str	r3, [r2, #24]
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_UART_MspInit+0xa0>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800308c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003092:	2303      	movs	r3, #3
 8003094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	4619      	mov	r1, r3
 800309c:	480f      	ldr	r0, [pc, #60]	; (80030dc <HAL_UART_MspInit+0xa4>)
 800309e:	f000 ff3b 	bl	8003f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b0:	f107 0310 	add.w	r3, r7, #16
 80030b4:	4619      	mov	r1, r3
 80030b6:	4809      	ldr	r0, [pc, #36]	; (80030dc <HAL_UART_MspInit+0xa4>)
 80030b8:	f000 ff2e 	bl	8003f18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2105      	movs	r1, #5
 80030c0:	2027      	movs	r0, #39	; 0x27
 80030c2:	f000 fcee 	bl	8003aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030c6:	2027      	movs	r0, #39	; 0x27
 80030c8:	f000 fd07 	bl	8003ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030cc:	bf00      	nop
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40004800 	.word	0x40004800
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40010c00 	.word	0x40010c00

080030e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	; 0x30
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	201e      	movs	r0, #30
 80030f6:	f000 fcd4 	bl	8003aa2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030fa:	201e      	movs	r0, #30
 80030fc:	f000 fced 	bl	8003ada <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <HAL_InitTick+0xa0>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <HAL_InitTick+0xa0>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	61d3      	str	r3, [r2, #28]
 800310c:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_InitTick+0xa0>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003118:	f107 0210 	add.w	r2, r7, #16
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f001 fcc2 	bl	8004aac <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003128:	f001 fc98 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 800312c:	4603      	mov	r3, r0
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <HAL_InitTick+0xa4>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0c9b      	lsrs	r3, r3, #18
 800313c:	3b01      	subs	r3, #1
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HAL_InitTick+0xa8>)
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <HAL_InitTick+0xac>)
 8003144:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_InitTick+0xa8>)
 8003148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800314c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800314e:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <HAL_InitTick+0xa8>)
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_InitTick+0xa8>)
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_InitTick+0xa8>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003160:	4809      	ldr	r0, [pc, #36]	; (8003188 <HAL_InitTick+0xa8>)
 8003162:	f001 fda7 	bl	8004cb4 <HAL_TIM_Base_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800316c:	4806      	ldr	r0, [pc, #24]	; (8003188 <HAL_InitTick+0xa8>)
 800316e:	f001 fdf1 	bl	8004d54 <HAL_TIM_Base_Start_IT>
 8003172:	4603      	mov	r3, r0
 8003174:	e000      	b.n	8003178 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
}
 8003178:	4618      	mov	r0, r3
 800317a:	3730      	adds	r7, #48	; 0x30
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	431bde83 	.word	0x431bde83
 8003188:	20001020 	.word	0x20001020
 800318c:	40000800 	.word	0x40000800

08003190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003194:	e7fe      	b.n	8003194 <NMI_Handler+0x4>

08003196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800319a:	e7fe      	b.n	800319a <HardFault_Handler+0x4>

0800319c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a0:	e7fe      	b.n	80031a0 <MemManage_Handler+0x4>

080031a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a6:	e7fe      	b.n	80031a6 <BusFault_Handler+0x4>

080031a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <UsageFault_Handler+0x4>

080031ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
	...

080031bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <DMA1_Channel1_IRQHandler+0x10>)
 80031c2:	f000 fda3 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000f88 	.word	0x20000f88

080031d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <ADC1_2_IRQHandler+0x10>)
 80031d6:	f000 f997 	bl	8003508 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000f54 	.word	0x20000f54

080031e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80031e8:	2040      	movs	r0, #64	; 0x40
 80031ea:	f001 f84b 	bl	8004284 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80031ee:	2080      	movs	r0, #128	; 0x80
 80031f0:	f001 f848 	bl	8004284 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80031f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031f8:	f001 f844 	bl	8004284 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80031fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003200:	f001 f840 	bl	8004284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800320c:	4802      	ldr	r0, [pc, #8]	; (8003218 <TIM4_IRQHandler+0x10>)
 800320e:	f001 feed 	bl	8004fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20001020 	.word	0x20001020

0800321c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003220:	4802      	ldr	r0, [pc, #8]	; (800322c <USART3_IRQHandler+0x10>)
 8003222:	f002 fe21 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000f0c 	.word	0x20000f0c

08003230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <_sbrk+0x5c>)
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <_sbrk+0x60>)
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <_sbrk+0x64>)
 800324e:	4a12      	ldr	r2, [pc, #72]	; (8003298 <_sbrk+0x68>)
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <_sbrk+0x64>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	429a      	cmp	r2, r3
 800325e:	d207      	bcs.n	8003270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003260:	f006 fd98 	bl	8009d94 <__errno>
 8003264:	4603      	mov	r3, r0
 8003266:	220c      	movs	r2, #12
 8003268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e009      	b.n	8003284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <_sbrk+0x64>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <_sbrk+0x64>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <_sbrk+0x64>)
 8003280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20005000 	.word	0x20005000
 8003290:	00000400 	.word	0x00000400
 8003294:	200000c0 	.word	0x200000c0
 8003298:	200010c0 	.word	0x200010c0

0800329c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032a8:	480c      	ldr	r0, [pc, #48]	; (80032dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032aa:	490d      	ldr	r1, [pc, #52]	; (80032e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032ac:	4a0d      	ldr	r2, [pc, #52]	; (80032e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b0:	e002      	b.n	80032b8 <LoopCopyDataInit>

080032b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032b6:	3304      	adds	r3, #4

080032b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032bc:	d3f9      	bcc.n	80032b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032c0:	4c0a      	ldr	r4, [pc, #40]	; (80032ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80032c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c4:	e001      	b.n	80032ca <LoopFillZerobss>

080032c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032c8:	3204      	adds	r2, #4

080032ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032cc:	d3fb      	bcc.n	80032c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032ce:	f7ff ffe5 	bl	800329c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032d2:	f006 fd65 	bl	8009da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032d6:	f7ff fa15 	bl	8002704 <main>
  bx lr
 80032da:	4770      	bx	lr
  ldr r0, =_sdata
 80032dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80032e4:	0800a93c 	.word	0x0800a93c
  ldr r2, =_sbss
 80032e8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80032ec:	200010bc 	.word	0x200010bc

080032f0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032f0:	e7fe      	b.n	80032f0 <CAN1_RX1_IRQHandler>
	...

080032f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_Init+0x28>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a07      	ldr	r2, [pc, #28]	; (800331c <HAL_Init+0x28>)
 80032fe:	f043 0310 	orr.w	r3, r3, #16
 8003302:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003304:	2003      	movs	r0, #3
 8003306:	f000 fbc1 	bl	8003a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800330a:	200f      	movs	r0, #15
 800330c:	f7ff fee8 	bl	80030e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003310:	f7ff fd98 	bl	8002e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40022000 	.word	0x40022000

08003320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_IncTick+0x1c>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_IncTick+0x20>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4413      	add	r3, r2
 8003330:	4a03      	ldr	r2, [pc, #12]	; (8003340 <HAL_IncTick+0x20>)
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	20000030 	.word	0x20000030
 8003340:	20001068 	.word	0x20001068

08003344 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return uwTick;
 8003348:	4b02      	ldr	r3, [pc, #8]	; (8003354 <HAL_GetTick+0x10>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20001068 	.word	0x20001068

08003358 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0be      	b.n	80034f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fd8c 	bl	8002eb4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fa81 	bl	80038a4 <ADC_ConversionStop_Disable>
 80033a2:	4603      	mov	r3, r0
 80033a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 8099 	bne.w	80034e6 <HAL_ADC_Init+0x18e>
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 8095 	bne.w	80034e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033c4:	f023 0302 	bic.w	r3, r3, #2
 80033c8:	f043 0202 	orr.w	r2, r3, #2
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7b1b      	ldrb	r3, [r3, #12]
 80033de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f0:	d003      	beq.n	80033fa <HAL_ADC_Init+0xa2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HAL_ADC_Init+0xa8>
 80033fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033fe:	e000      	b.n	8003402 <HAL_ADC_Init+0xaa>
 8003400:	2300      	movs	r3, #0
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7d1b      	ldrb	r3, [r3, #20]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d119      	bne.n	8003444 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7b1b      	ldrb	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	3b01      	subs	r3, #1
 800341e:	035a      	lsls	r2, r3, #13
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e00b      	b.n	8003444 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_ADC_Init+0x1a8>)
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	430b      	orrs	r3, r1
 800346a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003474:	d003      	beq.n	800347e <HAL_ADC_Init+0x126>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d104      	bne.n	8003488 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	3b01      	subs	r3, #1
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	430a      	orrs	r2, r1
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_ADC_Init+0x1ac>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d10b      	bne.n	80034c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034c2:	e018      	b.n	80034f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f023 0312 	bic.w	r3, r3, #18
 80034cc:	f043 0210 	orr.w	r2, r3, #16
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f043 0201 	orr.w	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034e4:	e007      	b.n	80034f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	f043 0210 	orr.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	ffe1f7fd 	.word	0xffe1f7fd
 8003504:	ff1f0efe 	.word	0xff1f0efe

08003508 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b20      	cmp	r3, #32
 800351c:	d140      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d139      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800354e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003552:	d11d      	bne.n	8003590 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003558:	2b00      	cmp	r3, #0
 800355a:	d119      	bne.n	8003590 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0220 	bic.w	r2, r2, #32
 800356a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d105      	bne.n	8003590 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f87c 	bl	800368e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f06f 0212 	mvn.w	r2, #18
 800359e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d14f      	bne.n	800364e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d148      	bne.n	800364e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80035de:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80035e2:	d012      	beq.n	800360a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d125      	bne.n	800363e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80035fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003600:	d11d      	bne.n	800363e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	d119      	bne.n	800363e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003618:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	f043 0201 	orr.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f971 	bl	8003926 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 020c 	mvn.w	r2, #12
 800364c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d114      	bne.n	8003686 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d10d      	bne.n	8003686 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f812 	bl	80036a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0201 	mvn.w	r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x20>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e0dc      	b.n	800388e <HAL_ADC_ConfigChannel+0x1da>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d81c      	bhi.n	800371e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3b05      	subs	r3, #5
 80036f6:	221f      	movs	r2, #31
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	4019      	ands	r1, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b05      	subs	r3, #5
 8003710:	fa00 f203 	lsl.w	r2, r0, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	635a      	str	r2, [r3, #52]	; 0x34
 800371c:	e03c      	b.n	8003798 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d81c      	bhi.n	8003760 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3b23      	subs	r3, #35	; 0x23
 8003738:	221f      	movs	r2, #31
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	4019      	ands	r1, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	3b23      	subs	r3, #35	; 0x23
 8003752:	fa00 f203 	lsl.w	r2, r0, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
 800375e:	e01b      	b.n	8003798 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b41      	subs	r3, #65	; 0x41
 8003772:	221f      	movs	r2, #31
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	4019      	ands	r1, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	3b41      	subs	r3, #65	; 0x41
 800378c:	fa00 f203 	lsl.w	r2, r0, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b09      	cmp	r3, #9
 800379e:	d91c      	bls.n	80037da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68d9      	ldr	r1, [r3, #12]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	3b1e      	subs	r3, #30
 80037b2:	2207      	movs	r2, #7
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	4019      	ands	r1, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6898      	ldr	r0, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	3b1e      	subs	r3, #30
 80037cc:	fa00 f203 	lsl.w	r2, r0, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e019      	b.n	800380e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6919      	ldr	r1, [r3, #16]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	2207      	movs	r2, #7
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	4019      	ands	r1, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6898      	ldr	r0, [r3, #8]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	fa00 f203 	lsl.w	r2, r0, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b10      	cmp	r3, #16
 8003814:	d003      	beq.n	800381e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800381a:	2b11      	cmp	r3, #17
 800381c:	d132      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <HAL_ADC_ConfigChannel+0x1e4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d125      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d126      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003844:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b10      	cmp	r3, #16
 800384c:	d11a      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_ADC_ConfigChannel+0x1e8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	0c9a      	lsrs	r2, r3, #18
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003864:	e002      	b.n	800386c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3b01      	subs	r3, #1
 800386a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f9      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x1b2>
 8003872:	e007      	b.n	8003884 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	40012400 	.word	0x40012400
 800389c:	20000028 	.word	0x20000028
 80038a0:	431bde83 	.word	0x431bde83

080038a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d12e      	bne.n	800391c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038ce:	f7ff fd39 	bl	8003344 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038d4:	e01b      	b.n	800390e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038d6:	f7ff fd35 	bl	8003344 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d914      	bls.n	800390e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10d      	bne.n	800390e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	f043 0210 	orr.w	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	f043 0201 	orr.w	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e007      	b.n	800391e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d0dc      	beq.n	80038d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60d3      	str	r3, [r2, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <__NVIC_GetPriorityGrouping+0x18>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	f003 0307 	and.w	r3, r3, #7
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db0b      	blt.n	80039c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	4906      	ldr	r1, [pc, #24]	; (80039d0 <__NVIC_EnableIRQ+0x34>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2001      	movs	r0, #1
 80039be:	fa00 f202 	lsl.w	r2, r0, r2
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	e000e100 	.word	0xe000e100

080039d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0a      	blt.n	80039fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	490c      	ldr	r1, [pc, #48]	; (8003a20 <__NVIC_SetPriority+0x4c>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	440b      	add	r3, r1
 80039f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039fc:	e00a      	b.n	8003a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4908      	ldr	r1, [pc, #32]	; (8003a24 <__NVIC_SetPriority+0x50>)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3b04      	subs	r3, #4
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	440b      	add	r3, r1
 8003a12:	761a      	strb	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e100 	.word	0xe000e100
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf28      	it	cs
 8003a46:	2304      	movcs	r3, #4
 8003a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d902      	bls.n	8003a58 <NVIC_EncodePriority+0x30>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3b03      	subs	r3, #3
 8003a56:	e000      	b.n	8003a5a <NVIC_EncodePriority+0x32>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43d9      	mvns	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	4313      	orrs	r3, r2
         );
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff4f 	bl	8003938 <__NVIC_SetPriorityGrouping>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b086      	sub	sp, #24
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab4:	f7ff ff64 	bl	8003980 <__NVIC_GetPriorityGrouping>
 8003ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	6978      	ldr	r0, [r7, #20]
 8003ac0:	f7ff ffb2 	bl	8003a28 <NVIC_EncodePriority>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff81 	bl	80039d4 <__NVIC_SetPriority>
}
 8003ad2:	bf00      	nop
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff57 	bl	800399c <__NVIC_EnableIRQ>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e043      	b.n	8003b96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_DMA_Init+0xa8>)
 8003b16:	4413      	add	r3, r2
 8003b18:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <HAL_DMA_Init+0xac>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	009a      	lsls	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <HAL_DMA_Init+0xb0>)
 8003b2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	bffdfff8 	.word	0xbffdfff8
 8003ba4:	cccccccd 	.word	0xcccccccd
 8003ba8:	40020000 	.word	0x40020000

08003bac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d008      	beq.n	8003bd4 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e020      	b.n	8003c16 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 020e 	bic.w	r2, r2, #14
 8003be2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003c02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d005      	beq.n	8003c42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e051      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 020e 	bic.w	r2, r2, #14
 8003c50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <HAL_DMA_Abort_IT+0xd0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d029      	beq.n	8003cc0 <HAL_DMA_Abort_IT+0xa0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <HAL_DMA_Abort_IT+0xd4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <HAL_DMA_Abort_IT+0x9c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <HAL_DMA_Abort_IT+0xd8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01a      	beq.n	8003cb6 <HAL_DMA_Abort_IT+0x96>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <HAL_DMA_Abort_IT+0xdc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d012      	beq.n	8003cb0 <HAL_DMA_Abort_IT+0x90>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <HAL_DMA_Abort_IT+0xe0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00a      	beq.n	8003caa <HAL_DMA_Abort_IT+0x8a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <HAL_DMA_Abort_IT+0xe4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d102      	bne.n	8003ca4 <HAL_DMA_Abort_IT+0x84>
 8003c9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ca2:	e00e      	b.n	8003cc2 <HAL_DMA_Abort_IT+0xa2>
 8003ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ca8:	e00b      	b.n	8003cc2 <HAL_DMA_Abort_IT+0xa2>
 8003caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cae:	e008      	b.n	8003cc2 <HAL_DMA_Abort_IT+0xa2>
 8003cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb4:	e005      	b.n	8003cc2 <HAL_DMA_Abort_IT+0xa2>
 8003cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cba:	e002      	b.n	8003cc2 <HAL_DMA_Abort_IT+0xa2>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	e000      	b.n	8003cc2 <HAL_DMA_Abort_IT+0xa2>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <HAL_DMA_Abort_IT+0xe8>)
 8003cc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
    } 
  }
  return status;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40020008 	.word	0x40020008
 8003cf4:	4002001c 	.word	0x4002001c
 8003cf8:	40020030 	.word	0x40020030
 8003cfc:	40020044 	.word	0x40020044
 8003d00:	40020058 	.word	0x40020058
 8003d04:	4002006c 	.word	0x4002006c
 8003d08:	40020000 	.word	0x40020000

08003d0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2204      	movs	r2, #4
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d04f      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0xc8>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d04a      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d107      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a66      	ldr	r2, [pc, #408]	; (8003efc <HAL_DMA_IRQHandler+0x1f0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d029      	beq.n	8003dba <HAL_DMA_IRQHandler+0xae>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a65      	ldr	r2, [pc, #404]	; (8003f00 <HAL_DMA_IRQHandler+0x1f4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d022      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xaa>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a63      	ldr	r2, [pc, #396]	; (8003f04 <HAL_DMA_IRQHandler+0x1f8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01a      	beq.n	8003db0 <HAL_DMA_IRQHandler+0xa4>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a62      	ldr	r2, [pc, #392]	; (8003f08 <HAL_DMA_IRQHandler+0x1fc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d012      	beq.n	8003daa <HAL_DMA_IRQHandler+0x9e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a60      	ldr	r2, [pc, #384]	; (8003f0c <HAL_DMA_IRQHandler+0x200>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00a      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x98>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a5f      	ldr	r2, [pc, #380]	; (8003f10 <HAL_DMA_IRQHandler+0x204>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d102      	bne.n	8003d9e <HAL_DMA_IRQHandler+0x92>
 8003d98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d9c:	e00e      	b.n	8003dbc <HAL_DMA_IRQHandler+0xb0>
 8003d9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003da2:	e00b      	b.n	8003dbc <HAL_DMA_IRQHandler+0xb0>
 8003da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003da8:	e008      	b.n	8003dbc <HAL_DMA_IRQHandler+0xb0>
 8003daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dae:	e005      	b.n	8003dbc <HAL_DMA_IRQHandler+0xb0>
 8003db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db4:	e002      	b.n	8003dbc <HAL_DMA_IRQHandler+0xb0>
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	e000      	b.n	8003dbc <HAL_DMA_IRQHandler+0xb0>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_DMA_IRQHandler+0x208>)
 8003dbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8094 	beq.w	8003ef2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003dd2:	e08e      	b.n	8003ef2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	2202      	movs	r2, #2
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d056      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x186>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d051      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 020a 	bic.w	r2, r2, #10
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a38      	ldr	r2, [pc, #224]	; (8003efc <HAL_DMA_IRQHandler+0x1f0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d029      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x166>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a37      	ldr	r2, [pc, #220]	; (8003f00 <HAL_DMA_IRQHandler+0x1f4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x162>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a35      	ldr	r2, [pc, #212]	; (8003f04 <HAL_DMA_IRQHandler+0x1f8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01a      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x15c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a34      	ldr	r2, [pc, #208]	; (8003f08 <HAL_DMA_IRQHandler+0x1fc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d012      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x156>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a32      	ldr	r2, [pc, #200]	; (8003f0c <HAL_DMA_IRQHandler+0x200>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00a      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x150>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a31      	ldr	r2, [pc, #196]	; (8003f10 <HAL_DMA_IRQHandler+0x204>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d102      	bne.n	8003e56 <HAL_DMA_IRQHandler+0x14a>
 8003e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e54:	e00e      	b.n	8003e74 <HAL_DMA_IRQHandler+0x168>
 8003e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e5a:	e00b      	b.n	8003e74 <HAL_DMA_IRQHandler+0x168>
 8003e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e60:	e008      	b.n	8003e74 <HAL_DMA_IRQHandler+0x168>
 8003e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e66:	e005      	b.n	8003e74 <HAL_DMA_IRQHandler+0x168>
 8003e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e6c:	e002      	b.n	8003e74 <HAL_DMA_IRQHandler+0x168>
 8003e6e:	2320      	movs	r3, #32
 8003e70:	e000      	b.n	8003e74 <HAL_DMA_IRQHandler+0x168>
 8003e72:	2302      	movs	r3, #2
 8003e74:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <HAL_DMA_IRQHandler+0x208>)
 8003e76:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d034      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e90:	e02f      	b.n	8003ef2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2208      	movs	r2, #8
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d028      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x1e8>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d023      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 020e 	bic.w	r2, r2, #14
 8003eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
    }
  }
  return;
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
}
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40020008 	.word	0x40020008
 8003f00:	4002001c 	.word	0x4002001c
 8003f04:	40020030 	.word	0x40020030
 8003f08:	40020044 	.word	0x40020044
 8003f0c:	40020058 	.word	0x40020058
 8003f10:	4002006c 	.word	0x4002006c
 8003f14:	40020000 	.word	0x40020000

08003f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b08b      	sub	sp, #44	; 0x2c
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f26:	2300      	movs	r3, #0
 8003f28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f2a:	e169      	b.n	8004200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	f040 8158 	bne.w	80041fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4a9a      	ldr	r2, [pc, #616]	; (80041b8 <HAL_GPIO_Init+0x2a0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d05e      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f54:	4a98      	ldr	r2, [pc, #608]	; (80041b8 <HAL_GPIO_Init+0x2a0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d875      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f5a:	4a98      	ldr	r2, [pc, #608]	; (80041bc <HAL_GPIO_Init+0x2a4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d058      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f60:	4a96      	ldr	r2, [pc, #600]	; (80041bc <HAL_GPIO_Init+0x2a4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d86f      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f66:	4a96      	ldr	r2, [pc, #600]	; (80041c0 <HAL_GPIO_Init+0x2a8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d052      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f6c:	4a94      	ldr	r2, [pc, #592]	; (80041c0 <HAL_GPIO_Init+0x2a8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d869      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f72:	4a94      	ldr	r2, [pc, #592]	; (80041c4 <HAL_GPIO_Init+0x2ac>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04c      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f78:	4a92      	ldr	r2, [pc, #584]	; (80041c4 <HAL_GPIO_Init+0x2ac>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d863      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f7e:	4a92      	ldr	r2, [pc, #584]	; (80041c8 <HAL_GPIO_Init+0x2b0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d046      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f84:	4a90      	ldr	r2, [pc, #576]	; (80041c8 <HAL_GPIO_Init+0x2b0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d85d      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f8a:	2b12      	cmp	r3, #18
 8003f8c:	d82a      	bhi.n	8003fe4 <HAL_GPIO_Init+0xcc>
 8003f8e:	2b12      	cmp	r3, #18
 8003f90:	d859      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <HAL_GPIO_Init+0x80>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08004013 	.word	0x08004013
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	08003fff 	.word	0x08003fff
 8003fa4:	08004041 	.word	0x08004041
 8003fa8:	08004047 	.word	0x08004047
 8003fac:	08004047 	.word	0x08004047
 8003fb0:	08004047 	.word	0x08004047
 8003fb4:	08004047 	.word	0x08004047
 8003fb8:	08004047 	.word	0x08004047
 8003fbc:	08004047 	.word	0x08004047
 8003fc0:	08004047 	.word	0x08004047
 8003fc4:	08004047 	.word	0x08004047
 8003fc8:	08004047 	.word	0x08004047
 8003fcc:	08004047 	.word	0x08004047
 8003fd0:	08004047 	.word	0x08004047
 8003fd4:	08004047 	.word	0x08004047
 8003fd8:	08004047 	.word	0x08004047
 8003fdc:	08003ff5 	.word	0x08003ff5
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	4a79      	ldr	r2, [pc, #484]	; (80041cc <HAL_GPIO_Init+0x2b4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fea:	e02c      	b.n	8004046 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	623b      	str	r3, [r7, #32]
          break;
 8003ff2:	e029      	b.n	8004048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	623b      	str	r3, [r7, #32]
          break;
 8003ffc:	e024      	b.n	8004048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	3308      	adds	r3, #8
 8004004:	623b      	str	r3, [r7, #32]
          break;
 8004006:	e01f      	b.n	8004048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	330c      	adds	r3, #12
 800400e:	623b      	str	r3, [r7, #32]
          break;
 8004010:	e01a      	b.n	8004048 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800401a:	2304      	movs	r3, #4
 800401c:	623b      	str	r3, [r7, #32]
          break;
 800401e:	e013      	b.n	8004048 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d105      	bne.n	8004034 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004028:	2308      	movs	r3, #8
 800402a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	611a      	str	r2, [r3, #16]
          break;
 8004032:	e009      	b.n	8004048 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004034:	2308      	movs	r3, #8
 8004036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	615a      	str	r2, [r3, #20]
          break;
 800403e:	e003      	b.n	8004048 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004040:	2300      	movs	r3, #0
 8004042:	623b      	str	r3, [r7, #32]
          break;
 8004044:	e000      	b.n	8004048 <HAL_GPIO_Init+0x130>
          break;
 8004046:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2bff      	cmp	r3, #255	; 0xff
 800404c:	d801      	bhi.n	8004052 <HAL_GPIO_Init+0x13a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	e001      	b.n	8004056 <HAL_GPIO_Init+0x13e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2bff      	cmp	r3, #255	; 0xff
 800405c:	d802      	bhi.n	8004064 <HAL_GPIO_Init+0x14c>
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	e002      	b.n	800406a <HAL_GPIO_Init+0x152>
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	3b08      	subs	r3, #8
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	210f      	movs	r1, #15
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	fa01 f303 	lsl.w	r3, r1, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	401a      	ands	r2, r3
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	431a      	orrs	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80b1 	beq.w	80041fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004098:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <HAL_GPIO_Init+0x2b8>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4a4c      	ldr	r2, [pc, #304]	; (80041d0 <HAL_GPIO_Init+0x2b8>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6193      	str	r3, [r2, #24]
 80040a4:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_GPIO_Init+0x2b8>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040b0:	4a48      	ldr	r2, [pc, #288]	; (80041d4 <HAL_GPIO_Init+0x2bc>)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	220f      	movs	r2, #15
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a40      	ldr	r2, [pc, #256]	; (80041d8 <HAL_GPIO_Init+0x2c0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_GPIO_Init+0x1ec>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3f      	ldr	r2, [pc, #252]	; (80041dc <HAL_GPIO_Init+0x2c4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00d      	beq.n	8004100 <HAL_GPIO_Init+0x1e8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3e      	ldr	r2, [pc, #248]	; (80041e0 <HAL_GPIO_Init+0x2c8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <HAL_GPIO_Init+0x1e4>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <HAL_GPIO_Init+0x2cc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_GPIO_Init+0x1e0>
 80040f4:	2303      	movs	r3, #3
 80040f6:	e006      	b.n	8004106 <HAL_GPIO_Init+0x1ee>
 80040f8:	2304      	movs	r3, #4
 80040fa:	e004      	b.n	8004106 <HAL_GPIO_Init+0x1ee>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e002      	b.n	8004106 <HAL_GPIO_Init+0x1ee>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_GPIO_Init+0x1ee>
 8004104:	2300      	movs	r3, #0
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	f002 0203 	and.w	r2, r2, #3
 800410c:	0092      	lsls	r2, r2, #2
 800410e:	4093      	lsls	r3, r2
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004116:	492f      	ldr	r1, [pc, #188]	; (80041d4 <HAL_GPIO_Init+0x2bc>)
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	089b      	lsrs	r3, r3, #2
 800411c:	3302      	adds	r3, #2
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d006      	beq.n	800413e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	492c      	ldr	r1, [pc, #176]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]
 800413c:	e006      	b.n	800414c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	43db      	mvns	r3, r3
 8004146:	4928      	ldr	r1, [pc, #160]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004148:	4013      	ands	r3, r2
 800414a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d006      	beq.n	8004166 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004158:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	4922      	ldr	r1, [pc, #136]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
 8004164:	e006      	b.n	8004174 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	43db      	mvns	r3, r3
 800416e:	491e      	ldr	r1, [pc, #120]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004170:	4013      	ands	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d006      	beq.n	800418e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	4918      	ldr	r1, [pc, #96]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]
 800418c:	e006      	b.n	800419c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	43db      	mvns	r3, r3
 8004196:	4914      	ldr	r1, [pc, #80]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004198:	4013      	ands	r3, r2
 800419a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d021      	beq.n	80041ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	490e      	ldr	r1, [pc, #56]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60cb      	str	r3, [r1, #12]
 80041b4:	e021      	b.n	80041fa <HAL_GPIO_Init+0x2e2>
 80041b6:	bf00      	nop
 80041b8:	10320000 	.word	0x10320000
 80041bc:	10310000 	.word	0x10310000
 80041c0:	10220000 	.word	0x10220000
 80041c4:	10210000 	.word	0x10210000
 80041c8:	10120000 	.word	0x10120000
 80041cc:	10110000 	.word	0x10110000
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40010800 	.word	0x40010800
 80041dc:	40010c00 	.word	0x40010c00
 80041e0:	40011000 	.word	0x40011000
 80041e4:	40011400 	.word	0x40011400
 80041e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_GPIO_Init+0x304>)
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	4909      	ldr	r1, [pc, #36]	; (800421c <HAL_GPIO_Init+0x304>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	3301      	adds	r3, #1
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	f47f ae8e 	bne.w	8003f2c <HAL_GPIO_Init+0x14>
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	372c      	adds	r7, #44	; 0x2c
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40010400 	.word	0x40010400

08004220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
 800422c:	4613      	mov	r3, r2
 800422e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004230:	787b      	ldrb	r3, [r7, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800423c:	e003      	b.n	8004246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	041a      	lsls	r2, r3, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4013      	ands	r3, r2
 8004268:	041a      	lsls	r2, r3, #16
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	43d9      	mvns	r1, r3
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	400b      	ands	r3, r1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	611a      	str	r2, [r3, #16]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
	...

08004284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800429a:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe f980 	bl	80025a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40010400 	.word	0x40010400

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e26c      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8087 	beq.w	80043e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042d4:	4b92      	ldr	r3, [pc, #584]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d00c      	beq.n	80042fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042e0:	4b8f      	ldr	r3, [pc, #572]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d112      	bne.n	8004312 <HAL_RCC_OscConfig+0x5e>
 80042ec:	4b8c      	ldr	r3, [pc, #560]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d10b      	bne.n	8004312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	4b89      	ldr	r3, [pc, #548]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x12c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d168      	bne.n	80043e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e246      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x76>
 800431c:	4b80      	ldr	r3, [pc, #512]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7f      	ldr	r2, [pc, #508]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e02e      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x98>
 8004332:	4b7b      	ldr	r3, [pc, #492]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7a      	ldr	r2, [pc, #488]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b78      	ldr	r3, [pc, #480]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a77      	ldr	r2, [pc, #476]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0xbc>
 8004356:	4b72      	ldr	r3, [pc, #456]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a71      	ldr	r2, [pc, #452]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b6f      	ldr	r3, [pc, #444]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6e      	ldr	r2, [pc, #440]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 8004370:	4b6b      	ldr	r3, [pc, #428]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6a      	ldr	r2, [pc, #424]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b68      	ldr	r3, [pc, #416]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a67      	ldr	r2, [pc, #412]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe ffd8 	bl	8003344 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe ffd4 	bl	8003344 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1fa      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b5d      	ldr	r3, [pc, #372]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xe4>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe ffc4 	bl	8003344 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fe ffc0 	bl	8003344 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1e6      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x10c>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ee:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x18c>
 8004406:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004412:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x176>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1ba      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4939      	ldr	r1, [pc, #228]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	e03a      	b.n	80044b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fe ff79 	bl	8003344 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004456:	f7fe ff75 	bl	8003344 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e19b      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004468:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4927      	ldr	r1, [pc, #156]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fe ff58 	bl	8003344 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004498:	f7fe ff54 	bl	8003344 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e17a      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044aa:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d03a      	beq.n	8004538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d019      	beq.n	80044fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ca:	4b17      	ldr	r3, [pc, #92]	; (8004528 <HAL_RCC_OscConfig+0x274>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d0:	f7fe ff38 	bl	8003344 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fe ff34 	bl	8003344 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e15a      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f000 fb08 	bl	8004b0c <RCC_Delay>
 80044fc:	e01c      	b.n	8004538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <HAL_RCC_OscConfig+0x274>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004504:	f7fe ff1e 	bl	8003344 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450a:	e00f      	b.n	800452c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450c:	f7fe ff1a 	bl	8003344 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d908      	bls.n	800452c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e140      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	42420000 	.word	0x42420000
 8004528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	4b9e      	ldr	r3, [pc, #632]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e9      	bne.n	800450c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a6 	beq.w	8004692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454a:	4b97      	ldr	r3, [pc, #604]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10d      	bne.n	8004572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004556:	4b94      	ldr	r3, [pc, #592]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4a93      	ldr	r2, [pc, #588]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004560:	61d3      	str	r3, [r2, #28]
 8004562:	4b91      	ldr	r3, [pc, #580]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <HAL_RCC_OscConfig+0x4f8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d118      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b8b      	ldr	r3, [pc, #556]	; (80047ac <HAL_RCC_OscConfig+0x4f8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a8a      	ldr	r2, [pc, #552]	; (80047ac <HAL_RCC_OscConfig+0x4f8>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fe fedb 	bl	8003344 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fe fed7 	bl	8003344 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b64      	cmp	r3, #100	; 0x64
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0fd      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b81      	ldr	r3, [pc, #516]	; (80047ac <HAL_RCC_OscConfig+0x4f8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x312>
 80045b8:	4b7b      	ldr	r3, [pc, #492]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4a7a      	ldr	r2, [pc, #488]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6213      	str	r3, [r2, #32]
 80045c4:	e02d      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x334>
 80045ce:	4b76      	ldr	r3, [pc, #472]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a75      	ldr	r2, [pc, #468]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	6213      	str	r3, [r2, #32]
 80045da:	4b73      	ldr	r3, [pc, #460]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a72      	ldr	r2, [pc, #456]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	6213      	str	r3, [r2, #32]
 80045e6:	e01c      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	d10c      	bne.n	800460a <HAL_RCC_OscConfig+0x356>
 80045f0:	4b6d      	ldr	r3, [pc, #436]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4a6c      	ldr	r2, [pc, #432]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045f6:	f043 0304 	orr.w	r3, r3, #4
 80045fa:	6213      	str	r3, [r2, #32]
 80045fc:	4b6a      	ldr	r3, [pc, #424]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4a69      	ldr	r2, [pc, #420]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6213      	str	r3, [r2, #32]
 8004608:	e00b      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 800460a:	4b67      	ldr	r3, [pc, #412]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a66      	ldr	r2, [pc, #408]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	4b64      	ldr	r3, [pc, #400]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a63      	ldr	r2, [pc, #396]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d015      	beq.n	8004656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462a:	f7fe fe8b 	bl	8003344 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fe fe87 	bl	8003344 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0ab      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	4b57      	ldr	r3, [pc, #348]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ee      	beq.n	8004632 <HAL_RCC_OscConfig+0x37e>
 8004654:	e014      	b.n	8004680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004656:	f7fe fe75 	bl	8003344 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465e:	f7fe fe71 	bl	8003344 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f241 3288 	movw	r2, #5000	; 0x1388
 800466c:	4293      	cmp	r3, r2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e095      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004674:	4b4c      	ldr	r3, [pc, #304]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ee      	bne.n	800465e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d105      	bne.n	8004692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004686:	4b48      	ldr	r3, [pc, #288]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4a47      	ldr	r2, [pc, #284]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800468c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8081 	beq.w	800479e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469c:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d061      	beq.n	800476c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d146      	bne.n	800473e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b0:	4b3f      	ldr	r3, [pc, #252]	; (80047b0 <HAL_RCC_OscConfig+0x4fc>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fe fe45 	bl	8003344 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046be:	f7fe fe41 	bl	8003344 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e067      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d0:	4b35      	ldr	r3, [pc, #212]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f0      	bne.n	80046be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d108      	bne.n	80046f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046e6:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	492d      	ldr	r1, [pc, #180]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f8:	4b2b      	ldr	r3, [pc, #172]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a19      	ldr	r1, [r3, #32]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	430b      	orrs	r3, r1
 800470a:	4927      	ldr	r1, [pc, #156]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <HAL_RCC_OscConfig+0x4fc>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fe fe15 	bl	8003344 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471e:	f7fe fe11 	bl	8003344 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e037      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x46a>
 800473c:	e02f      	b.n	800479e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <HAL_RCC_OscConfig+0x4fc>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe fdfe 	bl	8003344 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fe fdfa 	bl	8003344 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e020      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x498>
 800476a:	e018      	b.n	800479e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e013      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_RCC_OscConfig+0x4f4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	429a      	cmp	r2, r3
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40007000 	.word	0x40007000
 80047b0:	42420060 	.word	0x42420060

080047b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0d0      	b.n	800496a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d910      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b67      	ldr	r3, [pc, #412]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 0207 	bic.w	r2, r3, #7
 80047de:	4965      	ldr	r1, [pc, #404]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b63      	ldr	r3, [pc, #396]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0b8      	b.n	800496a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004810:	4b59      	ldr	r3, [pc, #356]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a58      	ldr	r2, [pc, #352]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800481a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004828:	4b53      	ldr	r3, [pc, #332]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a52      	ldr	r2, [pc, #328]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004832:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004834:	4b50      	ldr	r3, [pc, #320]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	494d      	ldr	r1, [pc, #308]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d040      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b47      	ldr	r3, [pc, #284]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d115      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e07f      	b.n	800496a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004872:	4b41      	ldr	r3, [pc, #260]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e073      	b.n	800496a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004882:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e06b      	b.n	800496a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004892:	4b39      	ldr	r3, [pc, #228]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4936      	ldr	r1, [pc, #216]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a4:	f7fe fd4e 	bl	8003344 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ac:	f7fe fd4a 	bl	8003344 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e053      	b.n	800496a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 020c 	and.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d1eb      	bne.n	80048ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d210      	bcs.n	8004904 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b24      	ldr	r3, [pc, #144]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 0207 	bic.w	r2, r3, #7
 80048ea:	4922      	ldr	r1, [pc, #136]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	4b20      	ldr	r3, [pc, #128]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e032      	b.n	800496a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4916      	ldr	r1, [pc, #88]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	490e      	ldr	r1, [pc, #56]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004942:	f000 f821 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8004946:	4602      	mov	r2, r0
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	490a      	ldr	r1, [pc, #40]	; (800497c <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	5ccb      	ldrb	r3, [r1, r3]
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <HAL_RCC_ClockConfig+0x1cc>)
 800495c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCC_ClockConfig+0x1d0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fbbc 	bl	80030e0 <HAL_InitTick>

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40022000 	.word	0x40022000
 8004978:	40021000 	.word	0x40021000
 800497c:	0800a8e8 	.word	0x0800a8e8
 8004980:	20000028 	.word	0x20000028
 8004984:	2000002c 	.word	0x2000002c

08004988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004988:	b490      	push	{r4, r7}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800498e:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004990:	1d3c      	adds	r4, r7, #4
 8004992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004998:	f240 2301 	movw	r3, #513	; 0x201
 800499c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	2300      	movs	r3, #0
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049b2:	4b22      	ldr	r3, [pc, #136]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xb4>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d002      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x40>
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d003      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0x46>
 80049c6:	e02d      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ca:	623b      	str	r3, [r7, #32]
      break;
 80049cc:	e02d      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	0c9b      	lsrs	r3, r3, #18
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049da:	4413      	add	r3, r2
 80049dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049ec:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xb4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	0c5b      	lsrs	r3, r3, #17
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049fa:	4413      	add	r3, r2
 80049fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4a0e      	ldr	r2, [pc, #56]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a06:	fb02 f203 	mul.w	r2, r2, r3
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
 8004a12:	e004      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4a0b      	ldr	r2, [pc, #44]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	623b      	str	r3, [r7, #32]
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a26:	623b      	str	r3, [r7, #32]
      break;
 8004a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	; 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc90      	pop	{r4, r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	0800a7a0 	.word	0x0800a7a0
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	007a1200 	.word	0x007a1200
 8004a44:	003d0900 	.word	0x003d0900

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a4c:	4b02      	ldr	r3, [pc, #8]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	20000028 	.word	0x20000028

08004a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a60:	f7ff fff2 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	0800a8f8 	.word	0x0800a8f8

08004a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a88:	f7ff ffde 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	0adb      	lsrs	r3, r3, #11
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4903      	ldr	r1, [pc, #12]	; (8004aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	0800a8f8 	.word	0x0800a8f8

08004aac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	220f      	movs	r2, #15
 8004aba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_RCC_GetClockConfig+0x58>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 0203 	and.w	r2, r3, #3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_RCC_GetClockConfig+0x58>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_GetClockConfig+0x58>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ae0:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_RCC_GetClockConfig+0x58>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	08db      	lsrs	r3, r3, #3
 8004ae6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_RCC_GetClockConfig+0x5c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0207 	and.w	r2, r3, #7
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40022000 	.word	0x40022000

08004b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <RCC_Delay+0x34>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <RCC_Delay+0x38>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0a5b      	lsrs	r3, r3, #9
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b28:	bf00      	nop
  }
  while (Delay --);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1e5a      	subs	r2, r3, #1
 8004b2e:	60fa      	str	r2, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f9      	bne.n	8004b28 <RCC_Delay+0x1c>
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	20000028 	.word	0x20000028
 8004b44:	10624dd3 	.word	0x10624dd3

08004b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d07d      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b68:	4b4f      	ldr	r3, [pc, #316]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10d      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b74:	4b4c      	ldr	r3, [pc, #304]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4a4b      	ldr	r2, [pc, #300]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	61d3      	str	r3, [r2, #28]
 8004b80:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	4b46      	ldr	r3, [pc, #280]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d118      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9c:	4b43      	ldr	r3, [pc, #268]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a42      	ldr	r2, [pc, #264]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba8:	f7fe fbcc 	bl	8003344 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	e008      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb0:	f7fe fbc8 	bl	8003344 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e06d      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b3a      	ldr	r3, [pc, #232]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bce:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02e      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d027      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bec:	4b2e      	ldr	r3, [pc, #184]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bfc:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c02:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d014      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fe fb97 	bl	8003344 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fe fb93 	bl	8003344 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e036      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ee      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4917      	ldr	r1, [pc, #92]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c54:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	490b      	ldr	r1, [pc, #44]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4904      	ldr	r1, [pc, #16]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	42420440 	.word	0x42420440

08004cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e041      	b.n	8004d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fe f95a 	bl	8002f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 fc28 	bl	8005548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d001      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e03a      	b.n	8004de2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a18      	ldr	r2, [pc, #96]	; (8004dec <HAL_TIM_Base_Start_IT+0x98>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00e      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x58>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d009      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x58>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x58>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d111      	bne.n	8004dd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d010      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dce:	e007      	b.n	8004de0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800

08004df8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e041      	b.n	8004e8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f839 	bl	8004e96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f000 fb86 	bl	8005548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_TIM_PWM_Start+0x24>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	bf14      	ite	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	2300      	moveq	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e022      	b.n	8004f12 <HAL_TIM_PWM_Start+0x6a>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d109      	bne.n	8004ee6 <HAL_TIM_PWM_Start+0x3e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	bf14      	ite	ne
 8004ede:	2301      	movne	r3, #1
 8004ee0:	2300      	moveq	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	e015      	b.n	8004f12 <HAL_TIM_PWM_Start+0x6a>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d109      	bne.n	8004f00 <HAL_TIM_PWM_Start+0x58>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	e008      	b.n	8004f12 <HAL_TIM_PWM_Start+0x6a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	bf14      	ite	ne
 8004f0c:	2301      	movne	r3, #1
 8004f0e:	2300      	moveq	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e05e      	b.n	8004fd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PWM_Start+0x82>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	e013      	b.n	8004f52 <HAL_TIM_PWM_Start+0xaa>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x92>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f38:	e00b      	b.n	8004f52 <HAL_TIM_PWM_Start+0xaa>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_PWM_Start+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f48:	e003      	b.n	8004f52 <HAL_TIM_PWM_Start+0xaa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2201      	movs	r2, #1
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fd74 	bl	8005a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1e      	ldr	r2, [pc, #120]	; (8004fe0 <HAL_TIM_PWM_Start+0x138>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d107      	bne.n	8004f7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_TIM_PWM_Start+0x138>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0xfa>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d009      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0xfa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <HAL_TIM_PWM_Start+0x13c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0xfa>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a12      	ldr	r2, [pc, #72]	; (8004fe8 <HAL_TIM_PWM_Start+0x140>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d111      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b06      	cmp	r3, #6
 8004fb2:	d010      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	e007      	b.n	8004fd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800

08004fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0202 	mvn.w	r2, #2
 8005018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa6f 	bl	8005512 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa62 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fa71 	bl	8005524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0204 	mvn.w	r2, #4
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa45 	bl	8005512 <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa38 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fa47 	bl	8005524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d122      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0208 	mvn.w	r2, #8
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2204      	movs	r2, #4
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fa1b 	bl	8005512 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa0e 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fa1d 	bl	8005524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d122      	bne.n	8005144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b10      	cmp	r3, #16
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0210 	mvn.w	r2, #16
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2208      	movs	r2, #8
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f9f1 	bl	8005512 <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f9e4 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f9f3 	bl	8005524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10e      	bne.n	8005170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d107      	bne.n	8005170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0201 	mvn.w	r2, #1
 8005168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fd fe52 	bl	8002e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b80      	cmp	r3, #128	; 0x80
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fd32 	bl	8005c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d10e      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f9b7 	bl	8005536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d10e      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0220 	mvn.w	r2, #32
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fcfd 	bl	8005bee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520e:	2b01      	cmp	r3, #1
 8005210:	d101      	bne.n	8005216 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005212:	2302      	movs	r3, #2
 8005214:	e0ac      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b0c      	cmp	r3, #12
 8005222:	f200 809f 	bhi.w	8005364 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005226:	a201      	add	r2, pc, #4	; (adr r2, 800522c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	08005261 	.word	0x08005261
 8005230:	08005365 	.word	0x08005365
 8005234:	08005365 	.word	0x08005365
 8005238:	08005365 	.word	0x08005365
 800523c:	080052a1 	.word	0x080052a1
 8005240:	08005365 	.word	0x08005365
 8005244:	08005365 	.word	0x08005365
 8005248:	08005365 	.word	0x08005365
 800524c:	080052e3 	.word	0x080052e3
 8005250:	08005365 	.word	0x08005365
 8005254:	08005365 	.word	0x08005365
 8005258:	08005365 	.word	0x08005365
 800525c:	08005323 	.word	0x08005323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f9d0 	bl	800560c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0208 	orr.w	r2, r2, #8
 800527a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0204 	bic.w	r2, r2, #4
 800528a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6999      	ldr	r1, [r3, #24]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	619a      	str	r2, [r3, #24]
      break;
 800529e:	e062      	b.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fa16 	bl	80056d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	021a      	lsls	r2, r3, #8
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	619a      	str	r2, [r3, #24]
      break;
 80052e0:	e041      	b.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fa5f 	bl	80057ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69da      	ldr	r2, [r3, #28]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0208 	orr.w	r2, r2, #8
 80052fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0204 	bic.w	r2, r2, #4
 800530c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69d9      	ldr	r1, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	61da      	str	r2, [r3, #28]
      break;
 8005320:	e021      	b.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 faa9 	bl	8005880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	021a      	lsls	r2, r3, #8
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	61da      	str	r2, [r3, #28]
      break;
 8005362:	e000      	b.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005364:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIM_ConfigClockSource+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e0b3      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x180>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c8:	d03e      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0xd0>
 80053ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ce:	f200 8087 	bhi.w	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d6:	f000 8085 	beq.w	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d87f      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053e0:	2b70      	cmp	r3, #112	; 0x70
 80053e2:	d01a      	beq.n	800541a <HAL_TIM_ConfigClockSource+0xa2>
 80053e4:	2b70      	cmp	r3, #112	; 0x70
 80053e6:	d87b      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053e8:	2b60      	cmp	r3, #96	; 0x60
 80053ea:	d050      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x116>
 80053ec:	2b60      	cmp	r3, #96	; 0x60
 80053ee:	d877      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053f0:	2b50      	cmp	r3, #80	; 0x50
 80053f2:	d03c      	beq.n	800546e <HAL_TIM_ConfigClockSource+0xf6>
 80053f4:	2b50      	cmp	r3, #80	; 0x50
 80053f6:	d873      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d058      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x136>
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d86f      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 8005400:	2b30      	cmp	r3, #48	; 0x30
 8005402:	d064      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x156>
 8005404:	2b30      	cmp	r3, #48	; 0x30
 8005406:	d86b      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 8005408:	2b20      	cmp	r3, #32
 800540a:	d060      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x156>
 800540c:	2b20      	cmp	r3, #32
 800540e:	d867      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d05c      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x156>
 8005414:	2b10      	cmp	r3, #16
 8005416:	d05a      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005418:	e062      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6899      	ldr	r1, [r3, #8]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f000 faee 	bl	8005a0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800543c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
      break;
 8005446:	e04e      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6899      	ldr	r1, [r3, #8]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f000 fad7 	bl	8005a0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546a:	609a      	str	r2, [r3, #8]
      break;
 800546c:	e03b      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fa4e 	bl	800591c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2150      	movs	r1, #80	; 0x50
 8005486:	4618      	mov	r0, r3
 8005488:	f000 faa5 	bl	80059d6 <TIM_ITRx_SetConfig>
      break;
 800548c:	e02b      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fa6c 	bl	8005978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2160      	movs	r1, #96	; 0x60
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fa95 	bl	80059d6 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e01b      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 fa2e 	bl	800591c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2140      	movs	r1, #64	; 0x40
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa85 	bl	80059d6 <TIM_ITRx_SetConfig>
      break;
 80054cc:	e00b      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f000 fa7c 	bl	80059d6 <TIM_ITRx_SetConfig>
        break;
 80054de:	e002      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a29      	ldr	r2, [pc, #164]	; (8005600 <TIM_Base_SetConfig+0xb8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_Base_SetConfig+0x30>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d007      	beq.n	8005578 <TIM_Base_SetConfig+0x30>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a26      	ldr	r2, [pc, #152]	; (8005604 <TIM_Base_SetConfig+0xbc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_Base_SetConfig+0x30>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a25      	ldr	r2, [pc, #148]	; (8005608 <TIM_Base_SetConfig+0xc0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d108      	bne.n	800558a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <TIM_Base_SetConfig+0xb8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_Base_SetConfig+0x62>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d007      	beq.n	80055aa <TIM_Base_SetConfig+0x62>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a19      	ldr	r2, [pc, #100]	; (8005604 <TIM_Base_SetConfig+0xbc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_Base_SetConfig+0x62>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a18      	ldr	r2, [pc, #96]	; (8005608 <TIM_Base_SetConfig+0xc0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d108      	bne.n	80055bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a07      	ldr	r2, [pc, #28]	; (8005600 <TIM_Base_SetConfig+0xb8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d103      	bne.n	80055f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	615a      	str	r2, [r3, #20]
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800

0800560c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 0302 	bic.w	r3, r3, #2
 8005654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <TIM_OC1_SetConfig+0xc8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d10c      	bne.n	8005682 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0308 	bic.w	r3, r3, #8
 800566e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <TIM_OC1_SetConfig+0xc8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d111      	bne.n	80056ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	621a      	str	r2, [r3, #32]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40012c00 	.word	0x40012c00

080056d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f023 0210 	bic.w	r2, r3, #16
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0320 	bic.w	r3, r3, #32
 8005722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <TIM_OC2_SetConfig+0xd0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d10d      	bne.n	8005754 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <TIM_OC2_SetConfig+0xd0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d113      	bne.n	8005784 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800576a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr
 80057a8:	40012c00 	.word	0x40012c00

080057ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1d      	ldr	r2, [pc, #116]	; (800587c <TIM_OC3_SetConfig+0xd0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10d      	bne.n	8005826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a14      	ldr	r2, [pc, #80]	; (800587c <TIM_OC3_SetConfig+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d113      	bne.n	8005856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40012c00 	.word	0x40012c00

08005880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	031b      	lsls	r3, r3, #12
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a0f      	ldr	r2, [pc, #60]	; (8005918 <TIM_OC4_SetConfig+0x98>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d109      	bne.n	80058f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr
 8005918:	40012c00 	.word	0x40012c00

0800591c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f023 0201 	bic.w	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f023 030a 	bic.w	r3, r3, #10
 8005958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f023 0210 	bic.w	r2, r3, #16
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	031b      	lsls	r3, r3, #12
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	621a      	str	r2, [r3, #32]
}
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f043 0307 	orr.w	r3, r3, #7
 80059f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	609a      	str	r2, [r3, #8]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	021a      	lsls	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	609a      	str	r2, [r3, #8]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	431a      	orrs	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e046      	b.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af4:	d009      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a10      	ldr	r2, [pc, #64]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10c      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800

08005b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e03d      	b.n	8005be4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e03f      	b.n	8005ca4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fd f9fd 	bl	8003038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2224      	movs	r2, #36	; 0x24
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fcf2 	bl	8006640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d130      	bne.n	8005d28 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_UART_Transmit_IT+0x26>
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e029      	b.n	8005d2a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_UART_Transmit_IT+0x38>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e022      	b.n	8005d2a <HAL_UART_Transmit_IT+0x7e>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	88fa      	ldrh	r2, [r7, #6]
 8005cf6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2221      	movs	r2, #33	; 0x21
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d22:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d11d      	bne.n	8005d8a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <HAL_UART_Receive_IT+0x26>
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e016      	b.n	8005d8c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_UART_Receive_IT+0x38>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e00f      	b.n	8005d8c <HAL_UART_Receive_IT+0x58>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fabb 	bl	80062fc <UART_Start_Receive_IT>
 8005d86:	4603      	mov	r3, r0
 8005d88:	e000      	b.n	8005d8c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d8a:	2302      	movs	r3, #2
  }
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005daa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0201 	bic.w	r2, r2, #1
 8005dba:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d107      	bne.n	8005dd4 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0210 	bic.w	r2, r2, #16
 8005dd2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d02d      	beq.n	8005e3e <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d013      	beq.n	8005e22 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	4a19      	ldr	r2, [pc, #100]	; (8005e64 <HAL_UART_AbortReceive_IT+0xd0>)
 8005e00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fd ff0a 	bl	8003c20 <HAL_DMA_Abort_IT>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d022      	beq.n	8005e58 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4798      	blx	r3
 8005e20:	e01a      	b.n	8005e58 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9c9 	bl	80061ce <HAL_UART_AbortReceiveCpltCallback>
 8005e3c:	e00c      	b.n	8005e58 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f9bb 	bl	80061ce <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	080063ef 	.word	0x080063ef

08005e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10d      	bne.n	8005eba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d008      	beq.n	8005eba <HAL_UART_IRQHandler+0x52>
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fb1a 	bl	80064ec <UART_Receive_IT>
      return;
 8005eb8:	e17b      	b.n	80061b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80b1 	beq.w	8006024 <HAL_UART_IRQHandler+0x1bc>
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d105      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x70>
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80a6 	beq.w	8006024 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x90>
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_UART_IRQHandler+0xb0>
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f043 0202 	orr.w	r2, r3, #2
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_UART_IRQHandler+0xd0>
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	f043 0204 	orr.w	r2, r3, #4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00f      	beq.n	8005f62 <HAL_UART_IRQHandler+0xfa>
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <HAL_UART_IRQHandler+0xee>
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f043 0208 	orr.w	r2, r3, #8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 811e 	beq.w	80061a8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_UART_IRQHandler+0x11e>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fab3 	bl	80064ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	bf14      	ite	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	2300      	moveq	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_UART_IRQHandler+0x146>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d031      	beq.n	8006012 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9dd 	bl	800636e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d023      	beq.n	800600a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	4a76      	ldr	r2, [pc, #472]	; (80061b8 <HAL_UART_IRQHandler+0x350>)
 8005fe0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fd fe1a 	bl	8003c20 <HAL_DMA_Abort_IT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00e      	b.n	8006020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8da 	bl	80061bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00a      	b.n	8006020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8d6 	bl	80061bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e006      	b.n	8006020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8d2 	bl	80061bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800601e:	e0c3      	b.n	80061a8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	bf00      	nop
    return;
 8006022:	e0c1      	b.n	80061a8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	2b01      	cmp	r3, #1
 800602a:	f040 80a1 	bne.w	8006170 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 809b 	beq.w	8006170 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8095 	beq.w	8006170 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d04e      	beq.n	8006108 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006074:	8a3b      	ldrh	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8098 	beq.w	80061ac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006080:	8a3a      	ldrh	r2, [r7, #16]
 8006082:	429a      	cmp	r2, r3
 8006084:	f080 8092 	bcs.w	80061ac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8a3a      	ldrh	r2, [r7, #16]
 800608c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b20      	cmp	r3, #32
 8006096:	d02b      	beq.n	80060f0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060a6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0210 	bic.w	r2, r2, #16
 80060e4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fd fd5e 	bl	8003bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f86d 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006106:	e051      	b.n	80061ac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006110:	b29b      	uxth	r3, r3
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d047      	beq.n	80061b0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006120:	8a7b      	ldrh	r3, [r7, #18]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d044      	beq.n	80061b0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006134:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695a      	ldr	r2, [r3, #20]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0210 	bic.w	r2, r2, #16
 8006162:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006164:	8a7b      	ldrh	r3, [r7, #18]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f839 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800616e:	e01f      	b.n	80061b0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <HAL_UART_IRQHandler+0x324>
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f94a 	bl	800641e <UART_Transmit_IT>
    return;
 800618a:	e012      	b.n	80061b2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00d      	beq.n	80061b2 <HAL_UART_IRQHandler+0x34a>
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f98b 	bl	80064bc <UART_EndTransmit_IT>
    return;
 80061a6:	e004      	b.n	80061b2 <HAL_UART_IRQHandler+0x34a>
    return;
 80061a8:	bf00      	nop
 80061aa:	e002      	b.n	80061b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80061ac:	bf00      	nop
 80061ae:	e000      	b.n	80061b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80061b0:	bf00      	nop
  }
}
 80061b2:	3728      	adds	r7, #40	; 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	080063c7 	.word	0x080063c7

080061bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr

080061f6 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800620c:	2302      	movs	r3, #2
 800620e:	e020      	b.n	8006252 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2224      	movs	r2, #36	; 0x24
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 030c 	bic.w	r3, r3, #12
 800622e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f043 0308 	orr.w	r3, r3, #8
 8006236:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr

0800625c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8006272:	2302      	movs	r3, #2
 8006274:	e020      	b.n	80062b8 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2224      	movs	r2, #36	; 0x24
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 030c 	bic.w	r3, r3, #12
 8006294:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f043 0304 	orr.w	r3, r3, #4
 800629c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr

080062c2 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	2300      	movs	r3, #0
 80062d0:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	4313      	orrs	r3, r2
 80062f0:	b2db      	uxtb	r3, r3
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	88fa      	ldrh	r2, [r7, #6]
 800631a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2222      	movs	r2, #34	; 0x22
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006340:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695a      	ldr	r2, [r3, #20]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0220 	orr.w	r2, r2, #32
 8006360:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006384:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0210 	bic.w	r2, r2, #16
 80063ac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff feeb 	bl	80061bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff fedc 	bl	80061ce <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b21      	cmp	r3, #33	; 0x21
 8006430:	d13e      	bne.n	80064b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643a:	d114      	bne.n	8006466 <UART_Transmit_IT+0x48>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d110      	bne.n	8006466 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	1c9a      	adds	r2, r3, #2
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	621a      	str	r2, [r3, #32]
 8006464:	e008      	b.n	8006478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6211      	str	r1, [r2, #32]
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4619      	mov	r1, r3
 8006486:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10f      	bne.n	80064ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800649a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr

080064bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fb ffbb 	bl	8002458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b22      	cmp	r3, #34	; 0x22
 80064fe:	f040 8099 	bne.w	8006634 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650a:	d117      	bne.n	800653c <UART_Receive_IT+0x50>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d113      	bne.n	800653c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652a:	b29a      	uxth	r2, r3
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	1c9a      	adds	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	629a      	str	r2, [r3, #40]	; 0x28
 800653a:	e026      	b.n	800658a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654e:	d007      	beq.n	8006560 <UART_Receive_IT+0x74>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <UART_Receive_IT+0x82>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d106      	bne.n	800656e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	e008      	b.n	8006580 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657a:	b2da      	uxtb	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29b      	uxth	r3, r3
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	4619      	mov	r1, r3
 8006598:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800659a:	2b00      	cmp	r3, #0
 800659c:	d148      	bne.n	8006630 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0220 	bic.w	r2, r2, #32
 80065ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0201 	bic.w	r2, r2, #1
 80065cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d123      	bne.n	8006626 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0210 	bic.w	r2, r2, #16
 80065f2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	2b10      	cmp	r3, #16
 8006600:	d10a      	bne.n	8006618 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fdde 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
 8006624:	e002      	b.n	800662c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fb ff54 	bl	80024d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	e002      	b.n	8006636 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	e000      	b.n	8006636 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006634:	2302      	movs	r3, #2
  }
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800667a:	f023 030c 	bic.w	r3, r3, #12
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	430b      	orrs	r3, r1
 8006686:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a2c      	ldr	r2, [pc, #176]	; (8006754 <UART_SetConfig+0x114>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d103      	bne.n	80066b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066a8:	f7fe f9ec 	bl	8004a84 <HAL_RCC_GetPCLK2Freq>
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	e002      	b.n	80066b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80066b0:	f7fe f9d4 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 80066b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009a      	lsls	r2, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	4a22      	ldr	r2, [pc, #136]	; (8006758 <UART_SetConfig+0x118>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	0119      	lsls	r1, r3, #4
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	009a      	lsls	r2, r3, #2
 80066e0:	441a      	add	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066ec:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <UART_SetConfig+0x118>)
 80066ee:	fba3 0302 	umull	r0, r3, r3, r2
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	2064      	movs	r0, #100	; 0x64
 80066f6:	fb00 f303 	mul.w	r3, r0, r3
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	3332      	adds	r3, #50	; 0x32
 8006700:	4a15      	ldr	r2, [pc, #84]	; (8006758 <UART_SetConfig+0x118>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800670c:	4419      	add	r1, r3
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009a      	lsls	r2, r3, #2
 8006718:	441a      	add	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	fbb2 f2f3 	udiv	r2, r2, r3
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <UART_SetConfig+0x118>)
 8006726:	fba3 0302 	umull	r0, r3, r3, r2
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	2064      	movs	r0, #100	; 0x64
 800672e:	fb00 f303 	mul.w	r3, r0, r3
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	3332      	adds	r3, #50	; 0x32
 8006738:	4a07      	ldr	r2, [pc, #28]	; (8006758 <UART_SetConfig+0x118>)
 800673a:	fba2 2303 	umull	r2, r3, r2, r3
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	f003 020f 	and.w	r2, r3, #15
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	440a      	add	r2, r1
 800674a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40013800 	.word	0x40013800
 8006758:	51eb851f 	.word	0x51eb851f

0800675c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006762:	f3ef 8305 	mrs	r3, IPSR
 8006766:	60bb      	str	r3, [r7, #8]
  return(result);
 8006768:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10f      	bne.n	800678e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800676e:	f3ef 8310 	mrs	r3, PRIMASK
 8006772:	607b      	str	r3, [r7, #4]
  return(result);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <osKernelInitialize+0x32>
 800677a:	4b10      	ldr	r3, [pc, #64]	; (80067bc <osKernelInitialize+0x60>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d109      	bne.n	8006796 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006782:	f3ef 8311 	mrs	r3, BASEPRI
 8006786:	603b      	str	r3, [r7, #0]
  return(result);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800678e:	f06f 0305 	mvn.w	r3, #5
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e00c      	b.n	80067b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <osKernelInitialize+0x60>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <osKernelInitialize+0x60>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e002      	b.n	80067b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80067b0:	68fb      	ldr	r3, [r7, #12]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr
 80067bc:	200000c4 	.word	0x200000c4

080067c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c6:	f3ef 8305 	mrs	r3, IPSR
 80067ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80067cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10f      	bne.n	80067f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d2:	f3ef 8310 	mrs	r3, PRIMASK
 80067d6:	607b      	str	r3, [r7, #4]
  return(result);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <osKernelStart+0x32>
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <osKernelStart+0x64>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d109      	bne.n	80067fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067e6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ea:	603b      	str	r3, [r7, #0]
  return(result);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80067f2:	f06f 0305 	mvn.w	r3, #5
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	e00e      	b.n	8006818 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <osKernelStart+0x64>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d107      	bne.n	8006812 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006802:	4b08      	ldr	r3, [pc, #32]	; (8006824 <osKernelStart+0x64>)
 8006804:	2202      	movs	r2, #2
 8006806:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006808:	f001 fd4a 	bl	80082a0 <vTaskStartScheduler>
      stat = osOK;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e002      	b.n	8006818 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006812:	f04f 33ff 	mov.w	r3, #4294967295
 8006816:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	200000c4 	.word	0x200000c4

08006828 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b092      	sub	sp, #72	; 0x48
 800682c:	af04      	add	r7, sp, #16
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006838:	f3ef 8305 	mrs	r3, IPSR
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006840:	2b00      	cmp	r3, #0
 8006842:	f040 8094 	bne.w	800696e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006846:	f3ef 8310 	mrs	r3, PRIMASK
 800684a:	623b      	str	r3, [r7, #32]
  return(result);
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f040 808d 	bne.w	800696e <osThreadNew+0x146>
 8006854:	4b48      	ldr	r3, [pc, #288]	; (8006978 <osThreadNew+0x150>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d106      	bne.n	800686a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800685c:	f3ef 8311 	mrs	r3, BASEPRI
 8006860:	61fb      	str	r3, [r7, #28]
  return(result);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 8082 	bne.w	800696e <osThreadNew+0x146>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d07e      	beq.n	800696e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006874:	2318      	movs	r3, #24
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006878:	2300      	movs	r3, #0
 800687a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800687c:	f107 031b 	add.w	r3, r7, #27
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006882:	f04f 33ff 	mov.w	r3, #4294967295
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d045      	beq.n	800691a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <osThreadNew+0x74>
        name = attr->name;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <osThreadNew+0x9a>
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	2b38      	cmp	r3, #56	; 0x38
 80068b4:	d805      	bhi.n	80068c2 <osThreadNew+0x9a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <osThreadNew+0x9e>
        return (NULL);
 80068c2:	2300      	movs	r3, #0
 80068c4:	e054      	b.n	8006970 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00e      	beq.n	80068fc <osThreadNew+0xd4>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	2b5b      	cmp	r3, #91	; 0x5b
 80068e4:	d90a      	bls.n	80068fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d006      	beq.n	80068fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <osThreadNew+0xd4>
        mem = 1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068fa:	e010      	b.n	800691e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10c      	bne.n	800691e <osThreadNew+0xf6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d108      	bne.n	800691e <osThreadNew+0xf6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <osThreadNew+0xf6>
          mem = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
 8006918:	e001      	b.n	800691e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	2b01      	cmp	r3, #1
 8006922:	d110      	bne.n	8006946 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800692c:	9202      	str	r2, [sp, #8]
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006938:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f001 fae4 	bl	8007f08 <xTaskCreateStatic>
 8006940:	4603      	mov	r3, r0
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e013      	b.n	800696e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	2b00      	cmp	r3, #0
 800694a:	d110      	bne.n	800696e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	b29a      	uxth	r2, r3
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f001 fb2e 	bl	8007fc0 <xTaskCreate>
 8006964:	4603      	mov	r3, r0
 8006966:	2b01      	cmp	r3, #1
 8006968:	d001      	beq.n	800696e <osThreadNew+0x146>
          hTask = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800696e:	697b      	ldr	r3, [r7, #20]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3738      	adds	r7, #56	; 0x38
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	200000c4 	.word	0x200000c4

0800697c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006982:	f3ef 8305 	mrs	r3, IPSR
 8006986:	60bb      	str	r3, [r7, #8]
  return(result);
 8006988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10f      	bne.n	80069ae <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800698e:	f3ef 8310 	mrs	r3, PRIMASK
 8006992:	607b      	str	r3, [r7, #4]
  return(result);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d109      	bne.n	80069ae <osThreadYield+0x32>
 800699a:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <osThreadYield+0x5c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d109      	bne.n	80069b6 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069a2:	f3ef 8311 	mrs	r3, BASEPRI
 80069a6:	603b      	str	r3, [r7, #0]
  return(result);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <osThreadYield+0x3a>
    stat = osErrorISR;
 80069ae:	f06f 0305 	mvn.w	r3, #5
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e009      	b.n	80069ca <osThreadYield+0x4e>
  } else {
    stat = osOK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 80069ba:	4b08      	ldr	r3, [pc, #32]	; (80069dc <osThreadYield+0x60>)
 80069bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80069ca:	68fb      	ldr	r3, [r7, #12]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	200000c4 	.word	0x200000c4
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e8:	f3ef 8305 	mrs	r3, IPSR
 80069ec:	613b      	str	r3, [r7, #16]
  return(result);
 80069ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10f      	bne.n	8006a14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f4:	f3ef 8310 	mrs	r3, PRIMASK
 80069f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <osDelay+0x34>
 8006a00:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <osDelay+0x58>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d109      	bne.n	8006a1c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a08:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <osDelay+0x3c>
    stat = osErrorISR;
 8006a14:	f06f 0305 	mvn.w	r3, #5
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e007      	b.n	8006a2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fc06 	bl	8008238 <vTaskDelay>
    }
  }

  return (stat);
 8006a2c:	697b      	ldr	r3, [r7, #20]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200000c4 	.word	0x200000c4

08006a3c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a4c:	f3ef 8305 	mrs	r3, IPSR
 8006a50:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a52:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 8086 	bne.w	8006b66 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5e:	617b      	str	r3, [r7, #20]
  return(result);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d17f      	bne.n	8006b66 <osSemaphoreNew+0x12a>
 8006a66:	4b42      	ldr	r3, [pc, #264]	; (8006b70 <osSemaphoreNew+0x134>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d105      	bne.n	8006a7a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a72:	613b      	str	r3, [r7, #16]
  return(result);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d175      	bne.n	8006b66 <osSemaphoreNew+0x12a>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d072      	beq.n	8006b66 <osSemaphoreNew+0x12a>
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d86e      	bhi.n	8006b66 <osSemaphoreNew+0x12a>
    mem = -1;
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <osSemaphoreNew+0x6e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b4f      	cmp	r3, #79	; 0x4f
 8006aa2:	d902      	bls.n	8006aaa <osSemaphoreNew+0x6e>
        mem = 1;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	623b      	str	r3, [r7, #32]
 8006aa8:	e00c      	b.n	8006ac4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d108      	bne.n	8006ac4 <osSemaphoreNew+0x88>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <osSemaphoreNew+0x88>
          mem = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	e001      	b.n	8006ac4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d04c      	beq.n	8006b66 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d128      	bne.n	8006b24 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d10a      	bne.n	8006aee <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2203      	movs	r2, #3
 8006ade:	9200      	str	r2, [sp, #0]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	f000 fafb 	bl	80070e0 <xQueueGenericCreateStatic>
 8006aea:	6278      	str	r0, [r7, #36]	; 0x24
 8006aec:	e005      	b.n	8006afa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006aee:	2203      	movs	r2, #3
 8006af0:	2100      	movs	r1, #0
 8006af2:	2001      	movs	r0, #1
 8006af4:	f000 fb6b 	bl	80071ce <xQueueGenericCreate>
 8006af8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d022      	beq.n	8006b46 <osSemaphoreNew+0x10a>
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d01f      	beq.n	8006b46 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b06:	2300      	movs	r3, #0
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b0e:	f000 fc29 	bl	8007364 <xQueueGenericSend>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d016      	beq.n	8006b46 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b1a:	f001 f825 	bl	8007b68 <vQueueDelete>
            hSemaphore = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
 8006b22:	e010      	b.n	8006b46 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d108      	bne.n	8006b3c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 fbac 	bl	8007290 <xQueueCreateCountingSemaphoreStatic>
 8006b38:	6278      	str	r0, [r7, #36]	; 0x24
 8006b3a:	e004      	b.n	8006b46 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fbdd 	bl	80072fe <xQueueCreateCountingSemaphore>
 8006b44:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <osSemaphoreNew+0x11e>
          name = attr->name;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e001      	b.n	8006b5e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b5e:	69f9      	ldr	r1, [r7, #28]
 8006b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b62:	f001 f94b 	bl	8007dfc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3728      	adds	r7, #40	; 0x28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	200000c4 	.word	0x200000c4

08006b74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b84:	f3ef 8305 	mrs	r3, IPSR
 8006b88:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d16f      	bne.n	8006c70 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b90:	f3ef 8310 	mrs	r3, PRIMASK
 8006b94:	617b      	str	r3, [r7, #20]
  return(result);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d169      	bne.n	8006c70 <osMessageQueueNew+0xfc>
 8006b9c:	4b37      	ldr	r3, [pc, #220]	; (8006c7c <osMessageQueueNew+0x108>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d105      	bne.n	8006bb0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ba4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d15f      	bne.n	8006c70 <osMessageQueueNew+0xfc>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d05c      	beq.n	8006c70 <osMessageQueueNew+0xfc>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d059      	beq.n	8006c70 <osMessageQueueNew+0xfc>
    mem = -1;
 8006bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d029      	beq.n	8006c1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d012      	beq.n	8006bf6 <osMessageQueueNew+0x82>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b4f      	cmp	r3, #79	; 0x4f
 8006bd6:	d90e      	bls.n	8006bf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d302      	bcc.n	8006bf6 <osMessageQueueNew+0x82>
        mem = 1;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	623b      	str	r3, [r7, #32]
 8006bf4:	e014      	b.n	8006c20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d110      	bne.n	8006c20 <osMessageQueueNew+0xac>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d108      	bne.n	8006c20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <osMessageQueueNew+0xac>
          mem = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	623b      	str	r3, [r7, #32]
 8006c1a:	e001      	b.n	8006c20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10b      	bne.n	8006c3e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	9100      	str	r1, [sp, #0]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fa53 	bl	80070e0 <xQueueGenericCreateStatic>
 8006c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c3c:	e008      	b.n	8006c50 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d105      	bne.n	8006c50 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006c44:	2200      	movs	r2, #0
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fac0 	bl	80071ce <xQueueGenericCreate>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00c      	beq.n	8006c70 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e001      	b.n	8006c68 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c68:	69f9      	ldr	r1, [r7, #28]
 8006c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c6c:	f001 f8c6 	bl	8007dfc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3728      	adds	r7, #40	; 0x28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	200000c4 	.word	0x200000c4

08006c80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	; 0x28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c98:	f3ef 8305 	mrs	r3, IPSR
 8006c9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10f      	bne.n	8006cc4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d109      	bne.n	8006cc4 <osMessageQueuePut+0x44>
 8006cb0:	4b2b      	ldr	r3, [pc, #172]	; (8006d60 <osMessageQueuePut+0xe0>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d12e      	bne.n	8006d16 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d028      	beq.n	8006d16 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <osMessageQueuePut+0x56>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <osMessageQueuePut+0x56>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006cd6:	f06f 0303 	mvn.w	r3, #3
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cdc:	e039      	b.n	8006d52 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ce2:	f107 0210 	add.w	r2, r7, #16
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	6a38      	ldr	r0, [r7, #32]
 8006cec:	f000 fc38 	bl	8007560 <xQueueGenericSendFromISR>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d003      	beq.n	8006cfe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006cf6:	f06f 0302 	mvn.w	r3, #2
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cfc:	e029      	b.n	8006d52 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d026      	beq.n	8006d52 <osMessageQueuePut+0xd2>
 8006d04:	4b17      	ldr	r3, [pc, #92]	; (8006d64 <osMessageQueuePut+0xe4>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d14:	e01d      	b.n	8006d52 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <osMessageQueuePut+0xa2>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006d22:	f06f 0303 	mvn.w	r3, #3
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
 8006d28:	e014      	b.n	8006d54 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	6a38      	ldr	r0, [r7, #32]
 8006d32:	f000 fb17 	bl	8007364 <xQueueGenericSend>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d00b      	beq.n	8006d54 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006d42:	f06f 0301 	mvn.w	r3, #1
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
 8006d48:	e004      	b.n	8006d54 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006d4a:	f06f 0302 	mvn.w	r3, #2
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d50:	e000      	b.n	8006d54 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3728      	adds	r7, #40	; 0x28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	200000c4 	.word	0x200000c4
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	; 0x28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d7e:	f3ef 8305 	mrs	r3, IPSR
 8006d82:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d84:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10f      	bne.n	8006daa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <osMessageQueueGet+0x42>
 8006d96:	4b2b      	ldr	r3, [pc, #172]	; (8006e44 <osMessageQueueGet+0xdc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d12e      	bne.n	8006dfc <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006da2:	617b      	str	r3, [r7, #20]
  return(result);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d028      	beq.n	8006dfc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <osMessageQueueGet+0x54>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <osMessageQueueGet+0x54>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006dbc:	f06f 0303 	mvn.w	r3, #3
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dc2:	e038      	b.n	8006e36 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006dc8:	f107 0310 	add.w	r3, r7, #16
 8006dcc:	461a      	mov	r2, r3
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	6a38      	ldr	r0, [r7, #32]
 8006dd2:	f000 fe49 	bl	8007a68 <xQueueReceiveFromISR>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d003      	beq.n	8006de4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006ddc:	f06f 0302 	mvn.w	r3, #2
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006de2:	e028      	b.n	8006e36 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d025      	beq.n	8006e36 <osMessageQueueGet+0xce>
 8006dea:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <osMessageQueueGet+0xe0>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dfa:	e01c      	b.n	8006e36 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <osMessageQueueGet+0xa0>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d103      	bne.n	8006e10 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006e08:	f06f 0303 	mvn.w	r3, #3
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0e:	e013      	b.n	8006e38 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	6a38      	ldr	r0, [r7, #32]
 8006e16:	f000 fc3b 	bl	8007690 <xQueueReceive>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d00b      	beq.n	8006e38 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006e26:	f06f 0301 	mvn.w	r3, #1
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e2c:	e004      	b.n	8006e38 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006e2e:	f06f 0302 	mvn.w	r3, #2
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
 8006e34:	e000      	b.n	8006e38 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e36:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3728      	adds	r7, #40	; 0x28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200000c4 	.word	0x200000c4
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4a06      	ldr	r2, [pc, #24]	; (8006e74 <vApplicationGetIdleTaskMemory+0x28>)
 8006e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	4a05      	ldr	r2, [pc, #20]	; (8006e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2280      	movs	r2, #128	; 0x80
 8006e68:	601a      	str	r2, [r3, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr
 8006e74:	200000c8 	.word	0x200000c8
 8006e78:	20000124 	.word	0x20000124

08006e7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a07      	ldr	r2, [pc, #28]	; (8006ea8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4a06      	ldr	r2, [pc, #24]	; (8006eac <vApplicationGetTimerTaskMemory+0x30>)
 8006e92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e9a:	601a      	str	r2, [r3, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bc80      	pop	{r7}
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20000324 	.word	0x20000324
 8006eac:	20000380 	.word	0x20000380

08006eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f103 0208 	add.w	r2, r3, #8
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f103 0208 	add.w	r2, r3, #8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f103 0208 	add.w	r2, r3, #8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr

08006eee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr

08006f06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	601a      	str	r2, [r3, #0]
}
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr

08006f4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d103      	bne.n	8006f6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	e00c      	b.n	8006f86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	e002      	b.n	8006f7a <vListInsert+0x2e>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d2f6      	bcs.n	8006f74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	601a      	str	r2, [r3, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr

08006fbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6892      	ldr	r2, [r2, #8]
 8006fd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6852      	ldr	r2, [r2, #4]
 8006fdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d103      	bne.n	8006ff0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	1e5a      	subs	r2, r3, #1
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr
	...

08007010 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800703a:	f002 fd87 	bl	8009b4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800704a:	fb01 f303 	mul.w	r3, r1, r3
 800704e:	441a      	add	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	3b01      	subs	r3, #1
 800706c:	68f9      	ldr	r1, [r7, #12]
 800706e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	441a      	add	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	22ff      	movs	r2, #255	; 0xff
 800707e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d114      	bne.n	80070ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01a      	beq.n	80070ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3310      	adds	r3, #16
 800709c:	4618      	mov	r0, r3
 800709e:	f001 fb9b 	bl	80087d8 <xTaskRemoveFromEventList>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d012      	beq.n	80070ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <xQueueGenericReset+0xcc>)
 80070aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	e009      	b.n	80070ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3310      	adds	r3, #16
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fef6 	bl	8006eb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3324      	adds	r3, #36	; 0x24
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff fef1 	bl	8006eb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070ce:	f002 fd6d 	bl	8009bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070d2:	2301      	movs	r3, #1
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	e000ed04 	.word	0xe000ed04

080070e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08e      	sub	sp, #56	; 0x38
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <xQueueGenericCreateStatic+0x52>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <xQueueGenericCreateStatic+0x56>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <xQueueGenericCreateStatic+0x58>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	623b      	str	r3, [r7, #32]
}
 800714e:	bf00      	nop
 8007150:	e7fe      	b.n	8007150 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <xQueueGenericCreateStatic+0x7e>
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <xQueueGenericCreateStatic+0x82>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <xQueueGenericCreateStatic+0x84>
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	61fb      	str	r3, [r7, #28]
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800717e:	2350      	movs	r3, #80	; 0x50
 8007180:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b50      	cmp	r3, #80	; 0x50
 8007186:	d00a      	beq.n	800719e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	61bb      	str	r3, [r7, #24]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00d      	beq.n	80071c4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f843 	bl	800724a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3730      	adds	r7, #48	; 0x30
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b08a      	sub	sp, #40	; 0x28
 80071d2:	af02      	add	r7, sp, #8
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	4613      	mov	r3, r2
 80071da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10a      	bne.n	80071f8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	613b      	str	r3, [r7, #16]
}
 80071f4:	bf00      	nop
 80071f6:	e7fe      	b.n	80071f6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d102      	bne.n	8007204 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e004      	b.n	800720e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	3350      	adds	r3, #80	; 0x50
 8007212:	4618      	mov	r0, r3
 8007214:	f002 fd9a 	bl	8009d4c <pvPortMalloc>
 8007218:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	3350      	adds	r3, #80	; 0x50
 8007224:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800722e:	79fa      	ldrb	r2, [r7, #7]
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4613      	mov	r3, r2
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f805 	bl	800724a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007240:	69bb      	ldr	r3, [r7, #24]
	}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e002      	b.n	800726c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007278:	2101      	movs	r1, #1
 800727a:	69b8      	ldr	r0, [r7, #24]
 800727c:	f7ff fec8 	bl	8007010 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	78fa      	ldrb	r2, [r7, #3]
 8007284:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08a      	sub	sp, #40	; 0x28
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10a      	bne.n	80072b8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	61bb      	str	r3, [r7, #24]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d90a      	bls.n	80072d6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	617b      	str	r3, [r7, #20]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072d6:	2302      	movs	r3, #2
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	2100      	movs	r1, #0
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fefd 	bl	80070e0 <xQueueGenericCreateStatic>
 80072e6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072f4:	69fb      	ldr	r3, [r7, #28]
	}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	613b      	str	r3, [r7, #16]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	429a      	cmp	r2, r3
 800732a:	d90a      	bls.n	8007342 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	60fb      	str	r3, [r7, #12]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007342:	2202      	movs	r2, #2
 8007344:	2100      	movs	r1, #0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ff41 	bl	80071ce <xQueueGenericCreate>
 800734c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800735a:	697b      	ldr	r3, [r7, #20]
	}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08e      	sub	sp, #56	; 0x38
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007372:	2300      	movs	r3, #0
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <xQueueGenericSend+0x32>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d103      	bne.n	80073a4 <xQueueGenericSend+0x40>
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <xQueueGenericSend+0x44>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <xQueueGenericSend+0x46>
 80073a8:	2300      	movs	r3, #0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <xQueueGenericSend+0x60>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d103      	bne.n	80073d2 <xQueueGenericSend+0x6e>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <xQueueGenericSend+0x72>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <xQueueGenericSend+0x74>
 80073d6:	2300      	movs	r3, #0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	623b      	str	r3, [r7, #32]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073f2:	f001 fbb3 	bl	8008b5c <xTaskGetSchedulerState>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <xQueueGenericSend+0x9e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <xQueueGenericSend+0xa2>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <xQueueGenericSend+0xa4>
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <xQueueGenericSend+0xbe>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	61fb      	str	r3, [r7, #28]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007422:	f002 fb93 	bl	8009b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742e:	429a      	cmp	r2, r3
 8007430:	d302      	bcc.n	8007438 <xQueueGenericSend+0xd4>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d129      	bne.n	800748c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800743e:	f000 fbcd 	bl	8007bdc <prvCopyDataToQueue>
 8007442:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	3324      	adds	r3, #36	; 0x24
 8007450:	4618      	mov	r0, r3
 8007452:	f001 f9c1 	bl	80087d8 <xTaskRemoveFromEventList>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d013      	beq.n	8007484 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800745c:	4b3f      	ldr	r3, [pc, #252]	; (800755c <xQueueGenericSend+0x1f8>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	e00a      	b.n	8007484 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007474:	4b39      	ldr	r3, [pc, #228]	; (800755c <xQueueGenericSend+0x1f8>)
 8007476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007484:	f002 fb92 	bl	8009bac <vPortExitCritical>
				return pdPASS;
 8007488:	2301      	movs	r3, #1
 800748a:	e063      	b.n	8007554 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007492:	f002 fb8b 	bl	8009bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007496:	2300      	movs	r3, #0
 8007498:	e05c      	b.n	8007554 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a0:	f107 0314 	add.w	r3, r7, #20
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 f9fb 	bl	80088a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074aa:	2301      	movs	r3, #1
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ae:	f002 fb7d 	bl	8009bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074b2:	f000 ff5b 	bl	800836c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074b6:	f002 fb49 	bl	8009b4c <vPortEnterCritical>
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c0:	b25b      	sxtb	r3, r3
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d103      	bne.n	80074d0 <xQueueGenericSend+0x16c>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074d6:	b25b      	sxtb	r3, r3
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074dc:	d103      	bne.n	80074e6 <xQueueGenericSend+0x182>
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074e6:	f002 fb61 	bl	8009bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074ea:	1d3a      	adds	r2, r7, #4
 80074ec:	f107 0314 	add.w	r3, r7, #20
 80074f0:	4611      	mov	r1, r2
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 f9ea 	bl	80088cc <xTaskCheckForTimeOut>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d124      	bne.n	8007548 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007500:	f000 fc64 	bl	8007dcc <prvIsQueueFull>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d018      	beq.n	800753c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	3310      	adds	r3, #16
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f001 f910 	bl	8008738 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751a:	f000 fbef 	bl	8007cfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800751e:	f000 ff33 	bl	8008388 <xTaskResumeAll>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	f47f af7c 	bne.w	8007422 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800752a:	4b0c      	ldr	r3, [pc, #48]	; (800755c <xQueueGenericSend+0x1f8>)
 800752c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	e772      	b.n	8007422 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800753c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800753e:	f000 fbdd 	bl	8007cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007542:	f000 ff21 	bl	8008388 <xTaskResumeAll>
 8007546:	e76c      	b.n	8007422 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800754a:	f000 fbd7 	bl	8007cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800754e:	f000 ff1b 	bl	8008388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007552:	2300      	movs	r3, #0
		}
	}
}
 8007554:	4618      	mov	r0, r3
 8007556:	3738      	adds	r7, #56	; 0x38
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08e      	sub	sp, #56	; 0x38
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <xQueueGenericSendFromISR+0x3c>
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <xQueueGenericSendFromISR+0x40>
 800759c:	2301      	movs	r3, #1
 800759e:	e000      	b.n	80075a2 <xQueueGenericSendFromISR+0x42>
 80075a0:	2300      	movs	r3, #0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	623b      	str	r3, [r7, #32]
}
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d103      	bne.n	80075ca <xQueueGenericSendFromISR+0x6a>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <xQueueGenericSendFromISR+0x6e>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e000      	b.n	80075d0 <xQueueGenericSendFromISR+0x70>
 80075ce:	2300      	movs	r3, #0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	61fb      	str	r3, [r7, #28]
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ea:	f002 fb71 	bl	8009cd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075ee:	f3ef 8211 	mrs	r2, BASEPRI
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	61ba      	str	r2, [r7, #24]
 8007604:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007606:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	429a      	cmp	r2, r3
 8007614:	d302      	bcc.n	800761c <xQueueGenericSendFromISR+0xbc>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d12c      	bne.n	8007676 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800762c:	f000 fad6 	bl	8007bdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007630:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d112      	bne.n	8007660 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d016      	beq.n	8007670 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	3324      	adds	r3, #36	; 0x24
 8007646:	4618      	mov	r0, r3
 8007648:	f001 f8c6 	bl	80087d8 <xTaskRemoveFromEventList>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00e      	beq.n	8007670 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e007      	b.n	8007670 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007660:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007664:	3301      	adds	r3, #1
 8007666:	b2db      	uxtb	r3, r3
 8007668:	b25a      	sxtb	r2, r3
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007670:	2301      	movs	r3, #1
 8007672:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007674:	e001      	b.n	800767a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007676:	2300      	movs	r3, #0
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007684:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007688:	4618      	mov	r0, r3
 800768a:	3738      	adds	r7, #56	; 0x38
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08c      	sub	sp, #48	; 0x30
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10a      	bne.n	80076c0 <xQueueReceive+0x30>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	623b      	str	r3, [r7, #32]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d103      	bne.n	80076ce <xQueueReceive+0x3e>
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <xQueueReceive+0x42>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <xQueueReceive+0x44>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <xQueueReceive+0x5e>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	61fb      	str	r3, [r7, #28]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076ee:	f001 fa35 	bl	8008b5c <xTaskGetSchedulerState>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <xQueueReceive+0x6e>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <xQueueReceive+0x72>
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <xQueueReceive+0x74>
 8007702:	2300      	movs	r3, #0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <xQueueReceive+0x8e>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	61bb      	str	r3, [r7, #24]
}
 800771a:	bf00      	nop
 800771c:	e7fe      	b.n	800771c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800771e:	f002 fa15 	bl	8009b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01f      	beq.n	800776e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007732:	f000 fabd 	bl	8007cb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	1e5a      	subs	r2, r3, #1
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00f      	beq.n	8007766 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	3310      	adds	r3, #16
 800774a:	4618      	mov	r0, r3
 800774c:	f001 f844 	bl	80087d8 <xTaskRemoveFromEventList>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007756:	4b3d      	ldr	r3, [pc, #244]	; (800784c <xQueueReceive+0x1bc>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007766:	f002 fa21 	bl	8009bac <vPortExitCritical>
				return pdPASS;
 800776a:	2301      	movs	r3, #1
 800776c:	e069      	b.n	8007842 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d103      	bne.n	800777c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007774:	f002 fa1a 	bl	8009bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007778:	2300      	movs	r3, #0
 800777a:	e062      	b.n	8007842 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007782:	f107 0310 	add.w	r3, r7, #16
 8007786:	4618      	mov	r0, r3
 8007788:	f001 f88a 	bl	80088a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800778c:	2301      	movs	r3, #1
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007790:	f002 fa0c 	bl	8009bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007794:	f000 fdea 	bl	800836c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007798:	f002 f9d8 	bl	8009b4c <vPortEnterCritical>
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d103      	bne.n	80077b2 <xQueueReceive+0x122>
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b8:	b25b      	sxtb	r3, r3
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	d103      	bne.n	80077c8 <xQueueReceive+0x138>
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c8:	f002 f9f0 	bl	8009bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077cc:	1d3a      	adds	r2, r7, #4
 80077ce:	f107 0310 	add.w	r3, r7, #16
 80077d2:	4611      	mov	r1, r2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 f879 	bl	80088cc <xTaskCheckForTimeOut>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d123      	bne.n	8007828 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e2:	f000 fadd 	bl	8007da0 <prvIsQueueEmpty>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d017      	beq.n	800781c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	3324      	adds	r3, #36	; 0x24
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 ff9f 	bl	8008738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fc:	f000 fa7e 	bl	8007cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007800:	f000 fdc2 	bl	8008388 <xTaskResumeAll>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d189      	bne.n	800771e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800780a:	4b10      	ldr	r3, [pc, #64]	; (800784c <xQueueReceive+0x1bc>)
 800780c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	e780      	b.n	800771e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800781c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781e:	f000 fa6d 	bl	8007cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007822:	f000 fdb1 	bl	8008388 <xTaskResumeAll>
 8007826:	e77a      	b.n	800771e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800782a:	f000 fa67 	bl	8007cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800782e:	f000 fdab 	bl	8008388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007834:	f000 fab4 	bl	8007da0 <prvIsQueueEmpty>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	f43f af6f 	beq.w	800771e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007842:	4618      	mov	r0, r3
 8007844:	3730      	adds	r7, #48	; 0x30
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08e      	sub	sp, #56	; 0x38
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800785a:	2300      	movs	r3, #0
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007862:	2300      	movs	r3, #0
 8007864:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	623b      	str	r3, [r7, #32]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	61fb      	str	r3, [r7, #28]
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078a0:	f001 f95c 	bl	8008b5c <xTaskGetSchedulerState>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <xQueueSemaphoreTake+0x60>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <xQueueSemaphoreTake+0x64>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <xQueueSemaphoreTake+0x66>
 80078b4:	2300      	movs	r3, #0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	61bb      	str	r3, [r7, #24]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80078d0:	f002 f93c 	bl	8009b4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d024      	beq.n	800792a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	1e5a      	subs	r2, r3, #1
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d104      	bne.n	80078fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80078f0:	f001 fab4 	bl	8008e5c <pvTaskIncrementMutexHeldCount>
 80078f4:	4602      	mov	r2, r0
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00f      	beq.n	8007922 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	3310      	adds	r3, #16
 8007906:	4618      	mov	r0, r3
 8007908:	f000 ff66 	bl	80087d8 <xTaskRemoveFromEventList>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007912:	4b54      	ldr	r3, [pc, #336]	; (8007a64 <xQueueSemaphoreTake+0x214>)
 8007914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007922:	f002 f943 	bl	8009bac <vPortExitCritical>
				return pdPASS;
 8007926:	2301      	movs	r3, #1
 8007928:	e097      	b.n	8007a5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d111      	bne.n	8007954 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	617b      	str	r3, [r7, #20]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800794c:	f002 f92e 	bl	8009bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007950:	2300      	movs	r3, #0
 8007952:	e082      	b.n	8007a5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800795a:	f107 030c 	add.w	r3, r7, #12
 800795e:	4618      	mov	r0, r3
 8007960:	f000 ff9e 	bl	80088a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007968:	f002 f920 	bl	8009bac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800796c:	f000 fcfe 	bl	800836c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007970:	f002 f8ec 	bl	8009b4c <vPortEnterCritical>
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800797a:	b25b      	sxtb	r3, r3
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d103      	bne.n	800798a <xQueueSemaphoreTake+0x13a>
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007990:	b25b      	sxtb	r3, r3
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d103      	bne.n	80079a0 <xQueueSemaphoreTake+0x150>
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079a0:	f002 f904 	bl	8009bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079a4:	463a      	mov	r2, r7
 80079a6:	f107 030c 	add.w	r3, r7, #12
 80079aa:	4611      	mov	r1, r2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 ff8d 	bl	80088cc <xTaskCheckForTimeOut>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d132      	bne.n	8007a1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079ba:	f000 f9f1 	bl	8007da0 <prvIsQueueEmpty>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d026      	beq.n	8007a12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d109      	bne.n	80079e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80079cc:	f002 f8be 	bl	8009b4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 f8df 	bl	8008b98 <xTaskPriorityInherit>
 80079da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80079dc:	f002 f8e6 	bl	8009bac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	3324      	adds	r3, #36	; 0x24
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fea5 	bl	8008738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079f0:	f000 f984 	bl	8007cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079f4:	f000 fcc8 	bl	8008388 <xTaskResumeAll>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f47f af68 	bne.w	80078d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007a00:	4b18      	ldr	r3, [pc, #96]	; (8007a64 <xQueueSemaphoreTake+0x214>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	e75e      	b.n	80078d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a14:	f000 f972 	bl	8007cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a18:	f000 fcb6 	bl	8008388 <xTaskResumeAll>
 8007a1c:	e758      	b.n	80078d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a20:	f000 f96c 	bl	8007cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a24:	f000 fcb0 	bl	8008388 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a2a:	f000 f9b9 	bl	8007da0 <prvIsQueueEmpty>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f43f af4d 	beq.w	80078d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00d      	beq.n	8007a58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007a3c:	f002 f886 	bl	8009b4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a42:	f000 f8b4 	bl	8007bae <prvGetDisinheritPriorityAfterTimeout>
 8007a46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f001 f97e 	bl	8008d50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a54:	f002 f8aa 	bl	8009bac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3738      	adds	r7, #56	; 0x38
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08e      	sub	sp, #56	; 0x38
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	623b      	str	r3, [r7, #32]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <xQueueReceiveFromISR+0x3a>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <xQueueReceiveFromISR+0x3e>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <xQueueReceiveFromISR+0x40>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	61fb      	str	r3, [r7, #28]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ac2:	f002 f905 	bl	8009cd0 <vPortValidateInterruptPriority>
	__asm volatile
 8007ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	61ba      	str	r2, [r7, #24]
 8007adc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007ade:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d02f      	beq.n	8007b4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007afc:	f000 f8d8 	bl	8007cb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	1e5a      	subs	r2, r3, #1
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d112      	bne.n	8007b38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d016      	beq.n	8007b48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fe5a 	bl	80087d8 <xTaskRemoveFromEventList>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00e      	beq.n	8007b48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e007      	b.n	8007b48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	b25a      	sxtb	r2, r3
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b4c:	e001      	b.n	8007b52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f383 8811 	msr	BASEPRI, r3
}
 8007b5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3738      	adds	r7, #56	; 0x38
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <vQueueDelete+0x28>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	60bb      	str	r3, [r7, #8]
}
 8007b8c:	bf00      	nop
 8007b8e:	e7fe      	b.n	8007b8e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f95b 	bl	8007e4c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d102      	bne.n	8007ba6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f002 f8e5 	bl	8009d70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d006      	beq.n	8007bcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e001      	b.n	8007bd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
	}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr

08007bdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10d      	bne.n	8007c16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d14d      	bne.n	8007c9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f834 	bl	8008c74 <xTaskPriorityDisinherit>
 8007c0c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	605a      	str	r2, [r3, #4]
 8007c14:	e043      	b.n	8007c9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d119      	bne.n	8007c50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6898      	ldr	r0, [r3, #8]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	461a      	mov	r2, r3
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	f002 f8ee 	bl	8009e08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	441a      	add	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d32b      	bcc.n	8007c9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	609a      	str	r2, [r3, #8]
 8007c4e:	e026      	b.n	8007c9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68d8      	ldr	r0, [r3, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	f002 f8d4 	bl	8009e08 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	425b      	negs	r3, r3
 8007c6a:	441a      	add	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d207      	bcs.n	8007c8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	425b      	negs	r3, r3
 8007c86:	441a      	add	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d105      	bne.n	8007c9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d018      	beq.n	8007cf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	441a      	add	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d303      	bcc.n	8007ce4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68d9      	ldr	r1, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	461a      	mov	r2, r3
 8007cee:	6838      	ldr	r0, [r7, #0]
 8007cf0:	f002 f88a 	bl	8009e08 <memcpy>
	}
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d04:	f001 ff22 	bl	8009b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d10:	e011      	b.n	8007d36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d012      	beq.n	8007d40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3324      	adds	r3, #36	; 0x24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fd5a 	bl	80087d8 <xTaskRemoveFromEventList>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d2a:	f000 fe31 	bl	8008990 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	dce9      	bgt.n	8007d12 <prvUnlockQueue+0x16>
 8007d3e:	e000      	b.n	8007d42 <prvUnlockQueue+0x46>
					break;
 8007d40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	22ff      	movs	r2, #255	; 0xff
 8007d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d4a:	f001 ff2f 	bl	8009bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d4e:	f001 fefd 	bl	8009b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d5a:	e011      	b.n	8007d80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d012      	beq.n	8007d8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3310      	adds	r3, #16
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fd35 	bl	80087d8 <xTaskRemoveFromEventList>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d74:	f000 fe0c 	bl	8008990 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dce9      	bgt.n	8007d5c <prvUnlockQueue+0x60>
 8007d88:	e000      	b.n	8007d8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	22ff      	movs	r2, #255	; 0xff
 8007d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d94:	f001 ff0a 	bl	8009bac <vPortExitCritical>
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da8:	f001 fed0 	bl	8009b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e001      	b.n	8007dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dbe:	f001 fef5 	bl	8009bac <vPortExitCritical>

	return xReturn;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dd4:	f001 feba 	bl	8009b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d102      	bne.n	8007dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007de4:	2301      	movs	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e001      	b.n	8007dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dee:	f001 fedd 	bl	8009bac <vPortExitCritical>

	return xReturn;
 8007df2:	68fb      	ldr	r3, [r7, #12]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e014      	b.n	8007e36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e0c:	4a0e      	ldr	r2, [pc, #56]	; (8007e48 <vQueueAddToRegistry+0x4c>)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e18:	490b      	ldr	r1, [pc, #44]	; (8007e48 <vQueueAddToRegistry+0x4c>)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e22:	4a09      	ldr	r2, [pc, #36]	; (8007e48 <vQueueAddToRegistry+0x4c>)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	4413      	add	r3, r2
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e2e:	e006      	b.n	8007e3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	3301      	adds	r3, #1
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b07      	cmp	r3, #7
 8007e3a:	d9e7      	bls.n	8007e0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr
 8007e48:	2000106c 	.word	0x2000106c

08007e4c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	e016      	b.n	8007e88 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e5a:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <vQueueUnregisterQueue+0x50>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4413      	add	r3, r2
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d10b      	bne.n	8007e82 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e6a:	4a0c      	ldr	r2, [pc, #48]	; (8007e9c <vQueueUnregisterQueue+0x50>)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2100      	movs	r1, #0
 8007e70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e74:	4a09      	ldr	r2, [pc, #36]	; (8007e9c <vQueueUnregisterQueue+0x50>)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	605a      	str	r2, [r3, #4]
				break;
 8007e80:	e006      	b.n	8007e90 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3301      	adds	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b07      	cmp	r3, #7
 8007e8c:	d9e5      	bls.n	8007e5a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bc80      	pop	{r7}
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	2000106c 	.word	0x2000106c

08007ea0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007eb0:	f001 fe4c 	bl	8009b4c <vPortEnterCritical>
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eba:	b25b      	sxtb	r3, r3
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec0:	d103      	bne.n	8007eca <vQueueWaitForMessageRestricted+0x2a>
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ed0:	b25b      	sxtb	r3, r3
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d103      	bne.n	8007ee0 <vQueueWaitForMessageRestricted+0x40>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ee0:	f001 fe64 	bl	8009bac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	3324      	adds	r3, #36	; 0x24
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fc43 	bl	8008780 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007efa:	6978      	ldr	r0, [r7, #20]
 8007efc:	f7ff fefe 	bl	8007cfc <prvUnlockQueue>
	}
 8007f00:	bf00      	nop
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08e      	sub	sp, #56	; 0x38
 8007f0c:	af04      	add	r7, sp, #16
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	623b      	str	r3, [r7, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <xTaskCreateStatic+0x46>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	61fb      	str	r3, [r7, #28]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f4e:	235c      	movs	r3, #92	; 0x5c
 8007f50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2b5c      	cmp	r3, #92	; 0x5c
 8007f56:	d00a      	beq.n	8007f6e <xTaskCreateStatic+0x66>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	61bb      	str	r3, [r7, #24]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01e      	beq.n	8007fb2 <xTaskCreateStatic+0xaa>
 8007f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d01b      	beq.n	8007fb2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 f850 	bl	800804a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fac:	f000 f8d4 	bl	8008158 <prvAddNewTaskToReadyList>
 8007fb0:	e001      	b.n	8007fb6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fb6:	697b      	ldr	r3, [r7, #20]
	}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3728      	adds	r7, #40	; 0x28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08c      	sub	sp, #48	; 0x30
 8007fc4:	af04      	add	r7, sp, #16
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 feb9 	bl	8009d4c <pvPortMalloc>
 8007fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007fe2:	205c      	movs	r0, #92	; 0x5c
 8007fe4:	f001 feb2 	bl	8009d4c <pvPortMalloc>
 8007fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ff6:	e005      	b.n	8008004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ff8:	6978      	ldr	r0, [r7, #20]
 8007ffa:	f001 feb9 	bl	8009d70 <vPortFree>
 8007ffe:	e001      	b.n	8008004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008000:	2300      	movs	r3, #0
 8008002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d017      	beq.n	800803a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	2300      	movs	r3, #0
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f80e 	bl	800804a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800802e:	69f8      	ldr	r0, [r7, #28]
 8008030:	f000 f892 	bl	8008158 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008034:	2301      	movs	r3, #1
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	e002      	b.n	8008040 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800803a:	f04f 33ff 	mov.w	r3, #4294967295
 800803e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008040:	69bb      	ldr	r3, [r7, #24]
	}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b088      	sub	sp, #32
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	461a      	mov	r2, r3
 8008062:	21a5      	movs	r1, #165	; 0xa5
 8008064:	f001 fede 	bl	8009e24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008072:	3b01      	subs	r3, #1
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	f023 0307 	bic.w	r3, r3, #7
 8008080:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	617b      	str	r3, [r7, #20]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080a2:	2300      	movs	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]
 80080a6:	e012      	b.n	80080ce <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	4413      	add	r3, r2
 80080ae:	7819      	ldrb	r1, [r3, #0]
 80080b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	4413      	add	r3, r2
 80080b6:	3334      	adds	r3, #52	; 0x34
 80080b8:	460a      	mov	r2, r1
 80080ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d006      	beq.n	80080d6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	3301      	adds	r3, #1
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	2b0f      	cmp	r3, #15
 80080d2:	d9e9      	bls.n	80080a8 <prvInitialiseNewTask+0x5e>
 80080d4:	e000      	b.n	80080d8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80080d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	2b37      	cmp	r3, #55	; 0x37
 80080e4:	d901      	bls.n	80080ea <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080e6:	2337      	movs	r3, #55	; 0x37
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	2200      	movs	r2, #0
 80080fa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	3304      	adds	r3, #4
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fef4 	bl	8006eee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	3318      	adds	r3, #24
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe feef 	bl	8006eee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008114:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008124:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	2200      	movs	r2, #0
 800812a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	68f9      	ldr	r1, [r7, #12]
 8008138:	69b8      	ldr	r0, [r7, #24]
 800813a:	f001 fc13 	bl	8009964 <pxPortInitialiseStack>
 800813e:	4602      	mov	r2, r0
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008150:	bf00      	nop
 8008152:	3720      	adds	r7, #32
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008160:	f001 fcf4 	bl	8009b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008164:	4b2d      	ldr	r3, [pc, #180]	; (800821c <prvAddNewTaskToReadyList+0xc4>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3301      	adds	r3, #1
 800816a:	4a2c      	ldr	r2, [pc, #176]	; (800821c <prvAddNewTaskToReadyList+0xc4>)
 800816c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800816e:	4b2c      	ldr	r3, [pc, #176]	; (8008220 <prvAddNewTaskToReadyList+0xc8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008176:	4a2a      	ldr	r2, [pc, #168]	; (8008220 <prvAddNewTaskToReadyList+0xc8>)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800817c:	4b27      	ldr	r3, [pc, #156]	; (800821c <prvAddNewTaskToReadyList+0xc4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d110      	bne.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008184:	f000 fc28 	bl	80089d8 <prvInitialiseTaskLists>
 8008188:	e00d      	b.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800818a:	4b26      	ldr	r3, [pc, #152]	; (8008224 <prvAddNewTaskToReadyList+0xcc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d109      	bne.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008192:	4b23      	ldr	r3, [pc, #140]	; (8008220 <prvAddNewTaskToReadyList+0xc8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	429a      	cmp	r2, r3
 800819e:	d802      	bhi.n	80081a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081a0:	4a1f      	ldr	r2, [pc, #124]	; (8008220 <prvAddNewTaskToReadyList+0xc8>)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081a6:	4b20      	ldr	r3, [pc, #128]	; (8008228 <prvAddNewTaskToReadyList+0xd0>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3301      	adds	r3, #1
 80081ac:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <prvAddNewTaskToReadyList+0xd0>)
 80081ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081b0:	4b1d      	ldr	r3, [pc, #116]	; (8008228 <prvAddNewTaskToReadyList+0xd0>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081bc:	4b1b      	ldr	r3, [pc, #108]	; (800822c <prvAddNewTaskToReadyList+0xd4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d903      	bls.n	80081cc <prvAddNewTaskToReadyList+0x74>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	4a18      	ldr	r2, [pc, #96]	; (800822c <prvAddNewTaskToReadyList+0xd4>)
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a15      	ldr	r2, [pc, #84]	; (8008230 <prvAddNewTaskToReadyList+0xd8>)
 80081da:	441a      	add	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe fe8f 	bl	8006f06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081e8:	f001 fce0 	bl	8009bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081ec:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <prvAddNewTaskToReadyList+0xcc>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <prvAddNewTaskToReadyList+0xc8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	429a      	cmp	r2, r3
 8008200:	d207      	bcs.n	8008212 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008202:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <prvAddNewTaskToReadyList+0xdc>)
 8008204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000c54 	.word	0x20000c54
 8008220:	20000780 	.word	0x20000780
 8008224:	20000c60 	.word	0x20000c60
 8008228:	20000c70 	.word	0x20000c70
 800822c:	20000c5c 	.word	0x20000c5c
 8008230:	20000784 	.word	0x20000784
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d017      	beq.n	800827a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <vTaskDelay+0x60>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <vTaskDelay+0x30>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60bb      	str	r3, [r7, #8]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008268:	f000 f880 	bl	800836c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800826c:	2100      	movs	r1, #0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 ffbe 	bl	80091f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008274:	f000 f888 	bl	8008388 <xTaskResumeAll>
 8008278:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d107      	bne.n	8008290 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008280:	4b06      	ldr	r3, [pc, #24]	; (800829c <vTaskDelay+0x64>)
 8008282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20000c7c 	.word	0x20000c7c
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	; 0x28
 80082a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ae:	463a      	mov	r2, r7
 80082b0:	1d39      	adds	r1, r7, #4
 80082b2:	f107 0308 	add.w	r3, r7, #8
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fdc8 	bl	8006e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	9202      	str	r2, [sp, #8]
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	2300      	movs	r3, #0
 80082cc:	460a      	mov	r2, r1
 80082ce:	4921      	ldr	r1, [pc, #132]	; (8008354 <vTaskStartScheduler+0xb4>)
 80082d0:	4821      	ldr	r0, [pc, #132]	; (8008358 <vTaskStartScheduler+0xb8>)
 80082d2:	f7ff fe19 	bl	8007f08 <xTaskCreateStatic>
 80082d6:	4603      	mov	r3, r0
 80082d8:	4a20      	ldr	r2, [pc, #128]	; (800835c <vTaskStartScheduler+0xbc>)
 80082da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082dc:	4b1f      	ldr	r3, [pc, #124]	; (800835c <vTaskStartScheduler+0xbc>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082e4:	2301      	movs	r3, #1
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	e001      	b.n	80082ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d102      	bne.n	80082fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082f4:	f000 ffd0 	bl	8009298 <xTimerCreateTimerTask>
 80082f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d116      	bne.n	800832e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	613b      	str	r3, [r7, #16]
}
 8008312:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008314:	4b12      	ldr	r3, [pc, #72]	; (8008360 <vTaskStartScheduler+0xc0>)
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
 800831a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800831c:	4b11      	ldr	r3, [pc, #68]	; (8008364 <vTaskStartScheduler+0xc4>)
 800831e:	2201      	movs	r2, #1
 8008320:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008322:	4b11      	ldr	r3, [pc, #68]	; (8008368 <vTaskStartScheduler+0xc8>)
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008328:	f001 fb9e 	bl	8009a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800832c:	e00e      	b.n	800834c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d10a      	bne.n	800834c <vTaskStartScheduler+0xac>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60fb      	str	r3, [r7, #12]
}
 8008348:	bf00      	nop
 800834a:	e7fe      	b.n	800834a <vTaskStartScheduler+0xaa>
}
 800834c:	bf00      	nop
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	0800a7b0 	.word	0x0800a7b0
 8008358:	080089a9 	.word	0x080089a9
 800835c:	20000c78 	.word	0x20000c78
 8008360:	20000c74 	.word	0x20000c74
 8008364:	20000c60 	.word	0x20000c60
 8008368:	20000c58 	.word	0x20000c58

0800836c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008370:	4b04      	ldr	r3, [pc, #16]	; (8008384 <vTaskSuspendAll+0x18>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	4a03      	ldr	r2, [pc, #12]	; (8008384 <vTaskSuspendAll+0x18>)
 8008378:	6013      	str	r3, [r2, #0]
}
 800837a:	bf00      	nop
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000c7c 	.word	0x20000c7c

08008388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008392:	2300      	movs	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008396:	4b42      	ldr	r3, [pc, #264]	; (80084a0 <xTaskResumeAll+0x118>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10a      	bne.n	80083b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	603b      	str	r3, [r7, #0]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083b4:	f001 fbca 	bl	8009b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083b8:	4b39      	ldr	r3, [pc, #228]	; (80084a0 <xTaskResumeAll+0x118>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3b01      	subs	r3, #1
 80083be:	4a38      	ldr	r2, [pc, #224]	; (80084a0 <xTaskResumeAll+0x118>)
 80083c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083c2:	4b37      	ldr	r3, [pc, #220]	; (80084a0 <xTaskResumeAll+0x118>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d162      	bne.n	8008490 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083ca:	4b36      	ldr	r3, [pc, #216]	; (80084a4 <xTaskResumeAll+0x11c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05e      	beq.n	8008490 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083d2:	e02f      	b.n	8008434 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80083d4:	4b34      	ldr	r3, [pc, #208]	; (80084a8 <xTaskResumeAll+0x120>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3318      	adds	r3, #24
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fdeb 	bl	8006fbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fde6 	bl	8006fbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f4:	4b2d      	ldr	r3, [pc, #180]	; (80084ac <xTaskResumeAll+0x124>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d903      	bls.n	8008404 <xTaskResumeAll+0x7c>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	4a2a      	ldr	r2, [pc, #168]	; (80084ac <xTaskResumeAll+0x124>)
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4a27      	ldr	r2, [pc, #156]	; (80084b0 <xTaskResumeAll+0x128>)
 8008412:	441a      	add	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f7fe fd73 	bl	8006f06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008424:	4b23      	ldr	r3, [pc, #140]	; (80084b4 <xTaskResumeAll+0x12c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	429a      	cmp	r2, r3
 800842c:	d302      	bcc.n	8008434 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800842e:	4b22      	ldr	r3, [pc, #136]	; (80084b8 <xTaskResumeAll+0x130>)
 8008430:	2201      	movs	r2, #1
 8008432:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008434:	4b1c      	ldr	r3, [pc, #112]	; (80084a8 <xTaskResumeAll+0x120>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1cb      	bne.n	80083d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008442:	f000 fb67 	bl	8008b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008446:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <xTaskResumeAll+0x134>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d010      	beq.n	8008474 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008452:	f000 f857 	bl	8008504 <xTaskIncrementTick>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800845c:	4b16      	ldr	r3, [pc, #88]	; (80084b8 <xTaskResumeAll+0x130>)
 800845e:	2201      	movs	r2, #1
 8008460:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3b01      	subs	r3, #1
 8008466:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f1      	bne.n	8008452 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800846e:	4b13      	ldr	r3, [pc, #76]	; (80084bc <xTaskResumeAll+0x134>)
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008474:	4b10      	ldr	r3, [pc, #64]	; (80084b8 <xTaskResumeAll+0x130>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d009      	beq.n	8008490 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800847c:	2301      	movs	r3, #1
 800847e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008480:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <xTaskResumeAll+0x138>)
 8008482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008490:	f001 fb8c 	bl	8009bac <vPortExitCritical>

	return xAlreadyYielded;
 8008494:	68bb      	ldr	r3, [r7, #8]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000c7c 	.word	0x20000c7c
 80084a4:	20000c54 	.word	0x20000c54
 80084a8:	20000c14 	.word	0x20000c14
 80084ac:	20000c5c 	.word	0x20000c5c
 80084b0:	20000784 	.word	0x20000784
 80084b4:	20000780 	.word	0x20000780
 80084b8:	20000c68 	.word	0x20000c68
 80084bc:	20000c64 	.word	0x20000c64
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084ca:	4b04      	ldr	r3, [pc, #16]	; (80084dc <xTaskGetTickCount+0x18>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084d0:	687b      	ldr	r3, [r7, #4]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr
 80084dc:	20000c58 	.word	0x20000c58

080084e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084e6:	f001 fbf3 	bl	8009cd0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80084ea:	2300      	movs	r3, #0
 80084ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80084ee:	4b04      	ldr	r3, [pc, #16]	; (8008500 <xTaskGetTickCountFromISR+0x20>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084f4:	683b      	ldr	r3, [r7, #0]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000c58 	.word	0x20000c58

08008504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800850e:	4b51      	ldr	r3, [pc, #324]	; (8008654 <xTaskIncrementTick+0x150>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f040 808e 	bne.w	8008634 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008518:	4b4f      	ldr	r3, [pc, #316]	; (8008658 <xTaskIncrementTick+0x154>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3301      	adds	r3, #1
 800851e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008520:	4a4d      	ldr	r2, [pc, #308]	; (8008658 <xTaskIncrementTick+0x154>)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d120      	bne.n	800856e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800852c:	4b4b      	ldr	r3, [pc, #300]	; (800865c <xTaskIncrementTick+0x158>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <xTaskIncrementTick+0x48>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	603b      	str	r3, [r7, #0]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <xTaskIncrementTick+0x46>
 800854c:	4b43      	ldr	r3, [pc, #268]	; (800865c <xTaskIncrementTick+0x158>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	4b43      	ldr	r3, [pc, #268]	; (8008660 <xTaskIncrementTick+0x15c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a41      	ldr	r2, [pc, #260]	; (800865c <xTaskIncrementTick+0x158>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	4a41      	ldr	r2, [pc, #260]	; (8008660 <xTaskIncrementTick+0x15c>)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	4b40      	ldr	r3, [pc, #256]	; (8008664 <xTaskIncrementTick+0x160>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	4a3f      	ldr	r2, [pc, #252]	; (8008664 <xTaskIncrementTick+0x160>)
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	f000 fad3 	bl	8008b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800856e:	4b3e      	ldr	r3, [pc, #248]	; (8008668 <xTaskIncrementTick+0x164>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	429a      	cmp	r2, r3
 8008576:	d34e      	bcc.n	8008616 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008578:	4b38      	ldr	r3, [pc, #224]	; (800865c <xTaskIncrementTick+0x158>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <xTaskIncrementTick+0x82>
 8008582:	2301      	movs	r3, #1
 8008584:	e000      	b.n	8008588 <xTaskIncrementTick+0x84>
 8008586:	2300      	movs	r3, #0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800858c:	4b36      	ldr	r3, [pc, #216]	; (8008668 <xTaskIncrementTick+0x164>)
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	601a      	str	r2, [r3, #0]
					break;
 8008594:	e03f      	b.n	8008616 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008596:	4b31      	ldr	r3, [pc, #196]	; (800865c <xTaskIncrementTick+0x158>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d203      	bcs.n	80085b6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085ae:	4a2e      	ldr	r2, [pc, #184]	; (8008668 <xTaskIncrementTick+0x164>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6013      	str	r3, [r2, #0]
						break;
 80085b4:	e02f      	b.n	8008616 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fcfe 	bl	8006fbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3318      	adds	r3, #24
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe fcf5 	bl	8006fbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d6:	4b25      	ldr	r3, [pc, #148]	; (800866c <xTaskIncrementTick+0x168>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d903      	bls.n	80085e6 <xTaskIncrementTick+0xe2>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	4a22      	ldr	r2, [pc, #136]	; (800866c <xTaskIncrementTick+0x168>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4a1f      	ldr	r2, [pc, #124]	; (8008670 <xTaskIncrementTick+0x16c>)
 80085f4:	441a      	add	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f7fe fc82 	bl	8006f06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008606:	4b1b      	ldr	r3, [pc, #108]	; (8008674 <xTaskIncrementTick+0x170>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	429a      	cmp	r2, r3
 800860e:	d3b3      	bcc.n	8008578 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008614:	e7b0      	b.n	8008578 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008616:	4b17      	ldr	r3, [pc, #92]	; (8008674 <xTaskIncrementTick+0x170>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4914      	ldr	r1, [pc, #80]	; (8008670 <xTaskIncrementTick+0x16c>)
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d907      	bls.n	800863e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800862e:	2301      	movs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e004      	b.n	800863e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008634:	4b10      	ldr	r3, [pc, #64]	; (8008678 <xTaskIncrementTick+0x174>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	4a0f      	ldr	r2, [pc, #60]	; (8008678 <xTaskIncrementTick+0x174>)
 800863c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <xTaskIncrementTick+0x178>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008646:	2301      	movs	r3, #1
 8008648:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800864a:	697b      	ldr	r3, [r7, #20]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20000c7c 	.word	0x20000c7c
 8008658:	20000c58 	.word	0x20000c58
 800865c:	20000c0c 	.word	0x20000c0c
 8008660:	20000c10 	.word	0x20000c10
 8008664:	20000c6c 	.word	0x20000c6c
 8008668:	20000c74 	.word	0x20000c74
 800866c:	20000c5c 	.word	0x20000c5c
 8008670:	20000784 	.word	0x20000784
 8008674:	20000780 	.word	0x20000780
 8008678:	20000c64 	.word	0x20000c64
 800867c:	20000c68 	.word	0x20000c68

08008680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008686:	4b27      	ldr	r3, [pc, #156]	; (8008724 <vTaskSwitchContext+0xa4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800868e:	4b26      	ldr	r3, [pc, #152]	; (8008728 <vTaskSwitchContext+0xa8>)
 8008690:	2201      	movs	r2, #1
 8008692:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008694:	e041      	b.n	800871a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008696:	4b24      	ldr	r3, [pc, #144]	; (8008728 <vTaskSwitchContext+0xa8>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800869c:	4b23      	ldr	r3, [pc, #140]	; (800872c <vTaskSwitchContext+0xac>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e010      	b.n	80086c6 <vTaskSwitchContext+0x46>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	607b      	str	r3, [r7, #4]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <vTaskSwitchContext+0x3e>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	491a      	ldr	r1, [pc, #104]	; (8008730 <vTaskSwitchContext+0xb0>)
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	440b      	add	r3, r1
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0e4      	beq.n	80086a4 <vTaskSwitchContext+0x24>
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4a12      	ldr	r2, [pc, #72]	; (8008730 <vTaskSwitchContext+0xb0>)
 80086e6:	4413      	add	r3, r2
 80086e8:	60bb      	str	r3, [r7, #8]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	605a      	str	r2, [r3, #4]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	3308      	adds	r3, #8
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d104      	bne.n	800870a <vTaskSwitchContext+0x8a>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	605a      	str	r2, [r3, #4]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4a08      	ldr	r2, [pc, #32]	; (8008734 <vTaskSwitchContext+0xb4>)
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	4a05      	ldr	r2, [pc, #20]	; (800872c <vTaskSwitchContext+0xac>)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6013      	str	r3, [r2, #0]
}
 800871a:	bf00      	nop
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr
 8008724:	20000c7c 	.word	0x20000c7c
 8008728:	20000c68 	.word	0x20000c68
 800872c:	20000c5c 	.word	0x20000c5c
 8008730:	20000784 	.word	0x20000784
 8008734:	20000780 	.word	0x20000780

08008738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10a      	bne.n	800875e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	60fb      	str	r3, [r7, #12]
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800875e:	4b07      	ldr	r3, [pc, #28]	; (800877c <vTaskPlaceOnEventList+0x44>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3318      	adds	r3, #24
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fe fbf0 	bl	8006f4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800876c:	2101      	movs	r1, #1
 800876e:	6838      	ldr	r0, [r7, #0]
 8008770:	f000 fd3e 	bl	80091f0 <prvAddCurrentTaskToDelayedList>
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20000780 	.word	0x20000780

08008780 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	617b      	str	r3, [r7, #20]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087a8:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3318      	adds	r3, #24
 80087ae:	4619      	mov	r1, r3
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7fe fba8 	bl	8006f06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80087bc:	f04f 33ff 	mov.w	r3, #4294967295
 80087c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	68b8      	ldr	r0, [r7, #8]
 80087c6:	f000 fd13 	bl	80091f0 <prvAddCurrentTaskToDelayedList>
	}
 80087ca:	bf00      	nop
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000780 	.word	0x20000780

080087d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	60fb      	str	r3, [r7, #12]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	3318      	adds	r3, #24
 8008808:	4618      	mov	r0, r3
 800880a:	f7fe fbd7 	bl	8006fbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800880e:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <xTaskRemoveFromEventList+0xb0>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d11d      	bne.n	8008852 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	3304      	adds	r3, #4
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fbce 	bl	8006fbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	4b19      	ldr	r3, [pc, #100]	; (800888c <xTaskRemoveFromEventList+0xb4>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d903      	bls.n	8008834 <xTaskRemoveFromEventList+0x5c>
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	4a16      	ldr	r2, [pc, #88]	; (800888c <xTaskRemoveFromEventList+0xb4>)
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4a13      	ldr	r2, [pc, #76]	; (8008890 <xTaskRemoveFromEventList+0xb8>)
 8008842:	441a      	add	r2, r3
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	3304      	adds	r3, #4
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f7fe fb5b 	bl	8006f06 <vListInsertEnd>
 8008850:	e005      	b.n	800885e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	3318      	adds	r3, #24
 8008856:	4619      	mov	r1, r3
 8008858:	480e      	ldr	r0, [pc, #56]	; (8008894 <xTaskRemoveFromEventList+0xbc>)
 800885a:	f7fe fb54 	bl	8006f06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <xTaskRemoveFromEventList+0xc0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	429a      	cmp	r2, r3
 800886a:	d905      	bls.n	8008878 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <xTaskRemoveFromEventList+0xc4>)
 8008872:	2201      	movs	r2, #1
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	e001      	b.n	800887c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800887c:	697b      	ldr	r3, [r7, #20]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000c7c 	.word	0x20000c7c
 800888c:	20000c5c 	.word	0x20000c5c
 8008890:	20000784 	.word	0x20000784
 8008894:	20000c14 	.word	0x20000c14
 8008898:	20000780 	.word	0x20000780
 800889c:	20000c68 	.word	0x20000c68

080088a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088a8:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <vTaskInternalSetTimeOutState+0x24>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <vTaskInternalSetTimeOutState+0x28>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	605a      	str	r2, [r3, #4]
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20000c6c 	.word	0x20000c6c
 80088c8:	20000c58 	.word	0x20000c58

080088cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	613b      	str	r3, [r7, #16]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	60fb      	str	r3, [r7, #12]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800890e:	f001 f91d 	bl	8009b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008912:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <xTaskCheckForTimeOut+0xbc>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d102      	bne.n	8008932 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800892c:	2300      	movs	r3, #0
 800892e:	61fb      	str	r3, [r7, #28]
 8008930:	e023      	b.n	800897a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4b15      	ldr	r3, [pc, #84]	; (800898c <xTaskCheckForTimeOut+0xc0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	d007      	beq.n	800894e <xTaskCheckForTimeOut+0x82>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	429a      	cmp	r2, r3
 8008946:	d302      	bcc.n	800894e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	61fb      	str	r3, [r7, #28]
 800894c:	e015      	b.n	800897a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	429a      	cmp	r2, r3
 8008956:	d20b      	bcs.n	8008970 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff ff9b 	bl	80088a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800896a:	2300      	movs	r3, #0
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	e004      	b.n	800897a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008976:	2301      	movs	r3, #1
 8008978:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800897a:	f001 f917 	bl	8009bac <vPortExitCritical>

	return xReturn;
 800897e:	69fb      	ldr	r3, [r7, #28]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3720      	adds	r7, #32
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000c58 	.word	0x20000c58
 800898c:	20000c6c 	.word	0x20000c6c

08008990 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008990:	b480      	push	{r7}
 8008992:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008994:	4b03      	ldr	r3, [pc, #12]	; (80089a4 <vTaskMissedYield+0x14>)
 8008996:	2201      	movs	r2, #1
 8008998:	601a      	str	r2, [r3, #0]
}
 800899a:	bf00      	nop
 800899c:	46bd      	mov	sp, r7
 800899e:	bc80      	pop	{r7}
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000c68 	.word	0x20000c68

080089a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089b0:	f000 f852 	bl	8008a58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089b4:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <prvIdleTask+0x28>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d9f9      	bls.n	80089b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <prvIdleTask+0x2c>)
 80089be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089cc:	e7f0      	b.n	80089b0 <prvIdleTask+0x8>
 80089ce:	bf00      	nop
 80089d0:	20000784 	.word	0x20000784
 80089d4:	e000ed04 	.word	0xe000ed04

080089d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089de:	2300      	movs	r3, #0
 80089e0:	607b      	str	r3, [r7, #4]
 80089e2:	e00c      	b.n	80089fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4a12      	ldr	r2, [pc, #72]	; (8008a38 <prvInitialiseTaskLists+0x60>)
 80089f0:	4413      	add	r3, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fa5c 	bl	8006eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3301      	adds	r3, #1
 80089fc:	607b      	str	r3, [r7, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b37      	cmp	r3, #55	; 0x37
 8008a02:	d9ef      	bls.n	80089e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a04:	480d      	ldr	r0, [pc, #52]	; (8008a3c <prvInitialiseTaskLists+0x64>)
 8008a06:	f7fe fa53 	bl	8006eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a0a:	480d      	ldr	r0, [pc, #52]	; (8008a40 <prvInitialiseTaskLists+0x68>)
 8008a0c:	f7fe fa50 	bl	8006eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a10:	480c      	ldr	r0, [pc, #48]	; (8008a44 <prvInitialiseTaskLists+0x6c>)
 8008a12:	f7fe fa4d 	bl	8006eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a16:	480c      	ldr	r0, [pc, #48]	; (8008a48 <prvInitialiseTaskLists+0x70>)
 8008a18:	f7fe fa4a 	bl	8006eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a1c:	480b      	ldr	r0, [pc, #44]	; (8008a4c <prvInitialiseTaskLists+0x74>)
 8008a1e:	f7fe fa47 	bl	8006eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <prvInitialiseTaskLists+0x78>)
 8008a24:	4a05      	ldr	r2, [pc, #20]	; (8008a3c <prvInitialiseTaskLists+0x64>)
 8008a26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <prvInitialiseTaskLists+0x7c>)
 8008a2a:	4a05      	ldr	r2, [pc, #20]	; (8008a40 <prvInitialiseTaskLists+0x68>)
 8008a2c:	601a      	str	r2, [r3, #0]
}
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000784 	.word	0x20000784
 8008a3c:	20000be4 	.word	0x20000be4
 8008a40:	20000bf8 	.word	0x20000bf8
 8008a44:	20000c14 	.word	0x20000c14
 8008a48:	20000c28 	.word	0x20000c28
 8008a4c:	20000c40 	.word	0x20000c40
 8008a50:	20000c0c 	.word	0x20000c0c
 8008a54:	20000c10 	.word	0x20000c10

08008a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a5e:	e019      	b.n	8008a94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a60:	f001 f874 	bl	8009b4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008a64:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <prvCheckTasksWaitingTermination+0x50>)
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe faa3 	bl	8006fbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a76:	4b0d      	ldr	r3, [pc, #52]	; (8008aac <prvCheckTasksWaitingTermination+0x54>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	4a0b      	ldr	r2, [pc, #44]	; (8008aac <prvCheckTasksWaitingTermination+0x54>)
 8008a7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a80:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <prvCheckTasksWaitingTermination+0x58>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	4a0a      	ldr	r2, [pc, #40]	; (8008ab0 <prvCheckTasksWaitingTermination+0x58>)
 8008a88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a8a:	f001 f88f 	bl	8009bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f810 	bl	8008ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a94:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <prvCheckTasksWaitingTermination+0x58>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e1      	bne.n	8008a60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20000c28 	.word	0x20000c28
 8008aac:	20000c54 	.word	0x20000c54
 8008ab0:	20000c3c 	.word	0x20000c3c

08008ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d108      	bne.n	8008ad8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 f950 	bl	8009d70 <vPortFree>
				vPortFree( pxTCB );
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 f94d 	bl	8009d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ad6:	e018      	b.n	8008b0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d103      	bne.n	8008aea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 f944 	bl	8009d70 <vPortFree>
	}
 8008ae8:	e00f      	b.n	8008b0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d00a      	beq.n	8008b0a <prvDeleteTCB+0x56>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60fb      	str	r3, [r7, #12]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <prvDeleteTCB+0x54>
	}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b1a:	4b0e      	ldr	r3, [pc, #56]	; (8008b54 <prvResetNextTaskUnblockTime+0x40>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <prvResetNextTaskUnblockTime+0x14>
 8008b24:	2301      	movs	r3, #1
 8008b26:	e000      	b.n	8008b2a <prvResetNextTaskUnblockTime+0x16>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d004      	beq.n	8008b38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b2e:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <prvResetNextTaskUnblockTime+0x44>)
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b36:	e008      	b.n	8008b4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b38:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <prvResetNextTaskUnblockTime+0x40>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	4a04      	ldr	r2, [pc, #16]	; (8008b58 <prvResetNextTaskUnblockTime+0x44>)
 8008b48:	6013      	str	r3, [r2, #0]
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr
 8008b54:	20000c0c 	.word	0x20000c0c
 8008b58:	20000c74 	.word	0x20000c74

08008b5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b62:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <xTaskGetSchedulerState+0x34>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d102      	bne.n	8008b70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	607b      	str	r3, [r7, #4]
 8008b6e:	e008      	b.n	8008b82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b70:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <xTaskGetSchedulerState+0x38>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	607b      	str	r3, [r7, #4]
 8008b7c:	e001      	b.n	8008b82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b82:	687b      	ldr	r3, [r7, #4]
	}
 8008b84:	4618      	mov	r0, r3
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bc80      	pop	{r7}
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20000c60 	.word	0x20000c60
 8008b94:	20000c7c 	.word	0x20000c7c

08008b98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d056      	beq.n	8008c5c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb2:	4b2d      	ldr	r3, [pc, #180]	; (8008c68 <xTaskPriorityInherit+0xd0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d246      	bcs.n	8008c4a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	db06      	blt.n	8008bd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc4:	4b28      	ldr	r3, [pc, #160]	; (8008c68 <xTaskPriorityInherit+0xd0>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	6959      	ldr	r1, [r3, #20]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4a22      	ldr	r2, [pc, #136]	; (8008c6c <xTaskPriorityInherit+0xd4>)
 8008be4:	4413      	add	r3, r2
 8008be6:	4299      	cmp	r1, r3
 8008be8:	d101      	bne.n	8008bee <xTaskPriorityInherit+0x56>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <xTaskPriorityInherit+0x58>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d022      	beq.n	8008c3a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe f9df 	bl	8006fbc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bfe:	4b1a      	ldr	r3, [pc, #104]	; (8008c68 <xTaskPriorityInherit+0xd0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	4b18      	ldr	r3, [pc, #96]	; (8008c70 <xTaskPriorityInherit+0xd8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d903      	bls.n	8008c1c <xTaskPriorityInherit+0x84>
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <xTaskPriorityInherit+0xd8>)
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4a10      	ldr	r2, [pc, #64]	; (8008c6c <xTaskPriorityInherit+0xd4>)
 8008c2a:	441a      	add	r2, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f7fe f967 	bl	8006f06 <vListInsertEnd>
 8008c38:	e004      	b.n	8008c44 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <xTaskPriorityInherit+0xd0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e008      	b.n	8008c5c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c4e:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <xTaskPriorityInherit+0xd0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d201      	bcs.n	8008c5c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
	}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000780 	.word	0x20000780
 8008c6c:	20000784 	.word	0x20000784
 8008c70:	20000c5c 	.word	0x20000c5c

08008c74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d056      	beq.n	8008d38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c8a:	4b2e      	ldr	r3, [pc, #184]	; (8008d44 <xTaskPriorityDisinherit+0xd0>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d00a      	beq.n	8008caa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	60fb      	str	r3, [r7, #12]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	60bb      	str	r3, [r7, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d02c      	beq.n	8008d38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d128      	bne.n	8008d38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe f966 	bl	8006fbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d08:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <xTaskPriorityDisinherit+0xd4>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d903      	bls.n	8008d18 <xTaskPriorityDisinherit+0xa4>
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	4a0c      	ldr	r2, [pc, #48]	; (8008d48 <xTaskPriorityDisinherit+0xd4>)
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <xTaskPriorityDisinherit+0xd8>)
 8008d26:	441a      	add	r2, r3
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fe f8e9 	bl	8006f06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d38:	697b      	ldr	r3, [r7, #20]
	}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000780 	.word	0x20000780
 8008d48:	20000c5c 	.word	0x20000c5c
 8008d4c:	20000784 	.word	0x20000784

08008d50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d06f      	beq.n	8008e48 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d902      	bls.n	8008d96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e002      	b.n	8008d9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d050      	beq.n	8008e48 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d14b      	bne.n	8008e48 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008db0:	4b27      	ldr	r3, [pc, #156]	; (8008e50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d10a      	bne.n	8008dd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	60bb      	str	r3, [r7, #8]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db04      	blt.n	8008dee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	6959      	ldr	r1, [r3, #20]
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4613      	mov	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4a15      	ldr	r2, [pc, #84]	; (8008e54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008dfe:	4413      	add	r3, r2
 8008e00:	4299      	cmp	r1, r3
 8008e02:	d101      	bne.n	8008e08 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d01c      	beq.n	8008e48 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe f8d2 	bl	8006fbc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1c:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d903      	bls.n	8008e2c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a0b      	ldr	r2, [pc, #44]	; (8008e58 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4a06      	ldr	r2, [pc, #24]	; (8008e54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e3a:	441a      	add	r2, r3
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f7fe f85f 	bl	8006f06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e48:	bf00      	nop
 8008e4a:	3720      	adds	r7, #32
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000780 	.word	0x20000780
 8008e54:	20000784 	.word	0x20000784
 8008e58:	20000c5c 	.word	0x20000c5c

08008e5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e68:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e6e:	3201      	adds	r2, #1
 8008e70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008e72:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e74:	681b      	ldr	r3, [r3, #0]
	}
 8008e76:	4618      	mov	r0, r3
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000780 	.word	0x20000780

08008e84 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008e8e:	f000 fe5d 	bl	8009b4c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008e92:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <ulTaskNotifyTake+0x88>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d113      	bne.n	8008ec4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008e9c:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <ulTaskNotifyTake+0x88>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008eac:	2101      	movs	r1, #1
 8008eae:	6838      	ldr	r0, [r7, #0]
 8008eb0:	f000 f99e 	bl	80091f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008eb4:	4b16      	ldr	r3, [pc, #88]	; (8008f10 <ulTaskNotifyTake+0x8c>)
 8008eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008ec4:	f000 fe72 	bl	8009bac <vPortExitCritical>

		taskENTER_CRITICAL();
 8008ec8:	f000 fe40 	bl	8009b4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008ecc:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <ulTaskNotifyTake+0x88>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00c      	beq.n	8008ef4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <ulTaskNotifyTake+0x88>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	655a      	str	r2, [r3, #84]	; 0x54
 8008ee8:	e004      	b.n	8008ef4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008eea:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <ulTaskNotifyTake+0x88>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	3a01      	subs	r2, #1
 8008ef2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <ulTaskNotifyTake+0x88>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8008efe:	f000 fe55 	bl	8009bac <vPortExitCritical>

		return ulReturn;
 8008f02:	68fb      	ldr	r3, [r7, #12]
	}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20000780 	.word	0x20000780
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	; 0x28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	4613      	mov	r3, r2
 8008f22:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008f24:	2301      	movs	r3, #1
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <xTaskGenericNotify+0x30>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	61bb      	str	r3, [r7, #24]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008f48:	f000 fe00 	bl	8009b4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f60:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	2202      	movs	r2, #2
 8008f66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d828      	bhi.n	8008fc2 <xTaskGenericNotify+0xae>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <xTaskGenericNotify+0x64>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008fc3 	.word	0x08008fc3
 8008f7c:	08008f8d 	.word	0x08008f8d
 8008f80:	08008f9b 	.word	0x08008f9b
 8008f84:	08008fa7 	.word	0x08008fa7
 8008f88:	08008faf 	.word	0x08008faf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008f98:	e013      	b.n	8008fc2 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008fa4:	e00d      	b.n	8008fc2 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008fac:	e009      	b.n	8008fc2 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008fae:	7ffb      	ldrb	r3, [r7, #31]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d003      	beq.n	8008fbc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008fba:	e001      	b.n	8008fc0 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008fc0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008fc2:	7ffb      	ldrb	r3, [r7, #31]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d13a      	bne.n	800903e <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fd fff5 	bl	8006fbc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	4b1d      	ldr	r3, [pc, #116]	; (800904c <xTaskGenericNotify+0x138>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d903      	bls.n	8008fe6 <xTaskGenericNotify+0xd2>
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	4a1a      	ldr	r2, [pc, #104]	; (800904c <xTaskGenericNotify+0x138>)
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4a17      	ldr	r2, [pc, #92]	; (8009050 <xTaskGenericNotify+0x13c>)
 8008ff4:	441a      	add	r2, r3
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7fd ff82 	bl	8006f06 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <xTaskGenericNotify+0x10c>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	617b      	str	r3, [r7, #20]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009024:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <xTaskGenericNotify+0x140>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	429a      	cmp	r2, r3
 800902c:	d907      	bls.n	800903e <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800902e:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <xTaskGenericNotify+0x144>)
 8009030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800903e:	f000 fdb5 	bl	8009bac <vPortExitCritical>

		return xReturn;
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009044:	4618      	mov	r0, r3
 8009046:	3728      	adds	r7, #40	; 0x28
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20000c5c 	.word	0x20000c5c
 8009050:	20000784 	.word	0x20000784
 8009054:	20000780 	.word	0x20000780
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08e      	sub	sp, #56	; 0x38
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4613      	mov	r3, r2
 800906a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800906c:	2301      	movs	r3, #1
 800906e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10a      	bne.n	800908c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009088:	bf00      	nop
 800908a:	e7fe      	b.n	800908a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800908c:	f000 fe20 	bl	8009cd0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009094:	f3ef 8211 	mrs	r2, BASEPRI
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	623a      	str	r2, [r7, #32]
 80090aa:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80090ac:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80090c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d828      	bhi.n	8009128 <xTaskGenericNotifyFromISR+0xcc>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <xTaskGenericNotifyFromISR+0x80>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	08009129 	.word	0x08009129
 80090e0:	080090f1 	.word	0x080090f1
 80090e4:	080090ff 	.word	0x080090ff
 80090e8:	0800910b 	.word	0x0800910b
 80090ec:	08009113 	.word	0x08009113
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	431a      	orrs	r2, r3
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80090fc:	e014      	b.n	8009128 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009108:	e00e      	b.n	8009128 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009110:	e00a      	b.n	8009128 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009112:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009116:	2b02      	cmp	r3, #2
 8009118:	d003      	beq.n	8009122 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009120:	e001      	b.n	8009126 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8009122:	2300      	movs	r3, #0
 8009124:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009126:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800912c:	2b01      	cmp	r3, #1
 800912e:	d147      	bne.n	80091c0 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00a      	beq.n	800914e <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	61bb      	str	r3, [r7, #24]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800914e:	4b22      	ldr	r3, [pc, #136]	; (80091d8 <xTaskGenericNotifyFromISR+0x17c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d11d      	bne.n	8009192 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	3304      	adds	r3, #4
 800915a:	4618      	mov	r0, r3
 800915c:	f7fd ff2e 	bl	8006fbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009164:	4b1d      	ldr	r3, [pc, #116]	; (80091dc <xTaskGenericNotifyFromISR+0x180>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d903      	bls.n	8009174 <xTaskGenericNotifyFromISR+0x118>
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	4a1a      	ldr	r2, [pc, #104]	; (80091dc <xTaskGenericNotifyFromISR+0x180>)
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4a17      	ldr	r2, [pc, #92]	; (80091e0 <xTaskGenericNotifyFromISR+0x184>)
 8009182:	441a      	add	r2, r3
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f7fd febb 	bl	8006f06 <vListInsertEnd>
 8009190:	e005      	b.n	800919e <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	3318      	adds	r3, #24
 8009196:	4619      	mov	r1, r3
 8009198:	4812      	ldr	r0, [pc, #72]	; (80091e4 <xTaskGenericNotifyFromISR+0x188>)
 800919a:	f7fd feb4 	bl	8006f06 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a2:	4b11      	ldr	r3, [pc, #68]	; (80091e8 <xTaskGenericNotifyFromISR+0x18c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d909      	bls.n	80091c0 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80091ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80091b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b4:	2201      	movs	r2, #1
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e002      	b.n	80091c0 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80091ba:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <xTaskGenericNotifyFromISR+0x190>)
 80091bc:	2201      	movs	r2, #1
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	f383 8811 	msr	BASEPRI, r3
}
 80091ca:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80091cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3738      	adds	r7, #56	; 0x38
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000c7c 	.word	0x20000c7c
 80091dc:	20000c5c 	.word	0x20000c5c
 80091e0:	20000784 	.word	0x20000784
 80091e4:	20000c14 	.word	0x20000c14
 80091e8:	20000780 	.word	0x20000780
 80091ec:	20000c68 	.word	0x20000c68

080091f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091fa:	4b21      	ldr	r3, [pc, #132]	; (8009280 <prvAddCurrentTaskToDelayedList+0x90>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009200:	4b20      	ldr	r3, [pc, #128]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3304      	adds	r3, #4
 8009206:	4618      	mov	r0, r3
 8009208:	f7fd fed8 	bl	8006fbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009212:	d10a      	bne.n	800922a <prvAddCurrentTaskToDelayedList+0x3a>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800921a:	4b1a      	ldr	r3, [pc, #104]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4819      	ldr	r0, [pc, #100]	; (8009288 <prvAddCurrentTaskToDelayedList+0x98>)
 8009224:	f7fd fe6f 	bl	8006f06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009228:	e026      	b.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4413      	add	r3, r2
 8009230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009232:	4b14      	ldr	r3, [pc, #80]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	429a      	cmp	r2, r3
 8009240:	d209      	bcs.n	8009256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009242:	4b12      	ldr	r3, [pc, #72]	; (800928c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3304      	adds	r3, #4
 800924c:	4619      	mov	r1, r3
 800924e:	4610      	mov	r0, r2
 8009250:	f7fd fe7c 	bl	8006f4c <vListInsert>
}
 8009254:	e010      	b.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009256:	4b0e      	ldr	r3, [pc, #56]	; (8009290 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f7fd fe72 	bl	8006f4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	429a      	cmp	r2, r3
 8009270:	d202      	bcs.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009272:	4a08      	ldr	r2, [pc, #32]	; (8009294 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	6013      	str	r3, [r2, #0]
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	20000c58 	.word	0x20000c58
 8009284:	20000780 	.word	0x20000780
 8009288:	20000c40 	.word	0x20000c40
 800928c:	20000c10 	.word	0x20000c10
 8009290:	20000c0c 	.word	0x20000c0c
 8009294:	20000c74 	.word	0x20000c74

08009298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	; 0x28
 800929c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092a2:	f000 fb1f 	bl	80098e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092a6:	4b1c      	ldr	r3, [pc, #112]	; (8009318 <xTimerCreateTimerTask+0x80>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d021      	beq.n	80092f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092b6:	1d3a      	adds	r2, r7, #4
 80092b8:	f107 0108 	add.w	r1, r7, #8
 80092bc:	f107 030c 	add.w	r3, r7, #12
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fd fddb 	bl	8006e7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	9202      	str	r2, [sp, #8]
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	2302      	movs	r3, #2
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	2300      	movs	r3, #0
 80092d6:	460a      	mov	r2, r1
 80092d8:	4910      	ldr	r1, [pc, #64]	; (800931c <xTimerCreateTimerTask+0x84>)
 80092da:	4811      	ldr	r0, [pc, #68]	; (8009320 <xTimerCreateTimerTask+0x88>)
 80092dc:	f7fe fe14 	bl	8007f08 <xTaskCreateStatic>
 80092e0:	4603      	mov	r3, r0
 80092e2:	4a10      	ldr	r2, [pc, #64]	; (8009324 <xTimerCreateTimerTask+0x8c>)
 80092e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092e6:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <xTimerCreateTimerTask+0x8c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092ee:	2301      	movs	r3, #1
 80092f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	613b      	str	r3, [r7, #16]
}
 800930a:	bf00      	nop
 800930c:	e7fe      	b.n	800930c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800930e:	697b      	ldr	r3, [r7, #20]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000cb0 	.word	0x20000cb0
 800931c:	0800a7b8 	.word	0x0800a7b8
 8009320:	080094ed 	.word	0x080094ed
 8009324:	20000cb4 	.word	0x20000cb4

08009328 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af02      	add	r7, sp, #8
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009336:	2030      	movs	r0, #48	; 0x30
 8009338:	f000 fd08 	bl	8009d4c <pvPortMalloc>
 800933c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00d      	beq.n	8009360 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	9301      	str	r3, [sp, #4]
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f809 	bl	800936a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009360:	697b      	ldr	r3, [r7, #20]
	}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b086      	sub	sp, #24
 800936e:	af00      	add	r7, sp, #0
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	60b9      	str	r1, [r7, #8]
 8009374:	607a      	str	r2, [r7, #4]
 8009376:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	617b      	str	r3, [r7, #20]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d015      	beq.n	80093c6 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800939a:	f000 faa3 	bl	80098e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	6a3a      	ldr	r2, [r7, #32]
 80093ba:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	3304      	adds	r3, #4
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fd fd94 	bl	8006eee <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80093c6:	bf00      	nop
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08a      	sub	sp, #40	; 0x28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093de:	2300      	movs	r3, #0
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	623b      	str	r3, [r7, #32]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093fe:	4b1a      	ldr	r3, [pc, #104]	; (8009468 <xTimerGenericCommand+0x98>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d02a      	beq.n	800945c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b05      	cmp	r3, #5
 8009416:	dc18      	bgt.n	800944a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009418:	f7ff fba0 	bl	8008b5c <xTaskGetSchedulerState>
 800941c:	4603      	mov	r3, r0
 800941e:	2b02      	cmp	r3, #2
 8009420:	d109      	bne.n	8009436 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009422:	4b11      	ldr	r3, [pc, #68]	; (8009468 <xTimerGenericCommand+0x98>)
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	f107 0110 	add.w	r1, r7, #16
 800942a:	2300      	movs	r3, #0
 800942c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942e:	f7fd ff99 	bl	8007364 <xQueueGenericSend>
 8009432:	6278      	str	r0, [r7, #36]	; 0x24
 8009434:	e012      	b.n	800945c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009436:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <xTimerGenericCommand+0x98>)
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f107 0110 	add.w	r1, r7, #16
 800943e:	2300      	movs	r3, #0
 8009440:	2200      	movs	r2, #0
 8009442:	f7fd ff8f 	bl	8007364 <xQueueGenericSend>
 8009446:	6278      	str	r0, [r7, #36]	; 0x24
 8009448:	e008      	b.n	800945c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800944a:	4b07      	ldr	r3, [pc, #28]	; (8009468 <xTimerGenericCommand+0x98>)
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	f107 0110 	add.w	r1, r7, #16
 8009452:	2300      	movs	r3, #0
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	f7fe f883 	bl	8007560 <xQueueGenericSendFromISR>
 800945a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800945e:	4618      	mov	r0, r3
 8009460:	3728      	adds	r7, #40	; 0x28
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20000cb0 	.word	0x20000cb0

0800946c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af02      	add	r7, sp, #8
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009476:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <prvProcessExpiredTimer+0x7c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	3304      	adds	r3, #4
 8009484:	4618      	mov	r0, r3
 8009486:	f7fd fd99 	bl	8006fbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d122      	bne.n	80094d8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	699a      	ldr	r2, [r3, #24]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	18d1      	adds	r1, r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	6978      	ldr	r0, [r7, #20]
 80094a0:	f000 f8c8 	bl	8009634 <prvInsertTimerInActiveList>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d016      	beq.n	80094d8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094aa:	2300      	movs	r3, #0
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	2300      	movs	r3, #0
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	2100      	movs	r1, #0
 80094b4:	6978      	ldr	r0, [r7, #20]
 80094b6:	f7ff ff8b 	bl	80093d0 <xTimerGenericCommand>
 80094ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	60fb      	str	r3, [r7, #12]
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	6978      	ldr	r0, [r7, #20]
 80094de:	4798      	blx	r3
}
 80094e0:	bf00      	nop
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000ca8 	.word	0x20000ca8

080094ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094f4:	f107 0308 	add.w	r3, r7, #8
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f857 	bl	80095ac <prvGetNextExpireTime>
 80094fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4619      	mov	r1, r3
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 f803 	bl	8009510 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800950a:	f000 f8d5 	bl	80096b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800950e:	e7f1      	b.n	80094f4 <prvTimerTask+0x8>

08009510 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800951a:	f7fe ff27 	bl	800836c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800951e:	f107 0308 	add.w	r3, r7, #8
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f866 	bl	80095f4 <prvSampleTimeNow>
 8009528:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d130      	bne.n	8009592 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <prvProcessTimerOrBlockTask+0x3c>
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	429a      	cmp	r2, r3
 800953c:	d806      	bhi.n	800954c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800953e:	f7fe ff23 	bl	8008388 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009542:	68f9      	ldr	r1, [r7, #12]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff ff91 	bl	800946c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800954a:	e024      	b.n	8009596 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d008      	beq.n	8009564 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <prvProcessTimerOrBlockTask+0x90>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	bf0c      	ite	eq
 800955c:	2301      	moveq	r3, #1
 800955e:	2300      	movne	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009564:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <prvProcessTimerOrBlockTask+0x94>)
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4619      	mov	r1, r3
 8009572:	f7fe fc95 	bl	8007ea0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009576:	f7fe ff07 	bl	8008388 <xTaskResumeAll>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009580:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <prvProcessTimerOrBlockTask+0x98>)
 8009582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
}
 8009590:	e001      	b.n	8009596 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009592:	f7fe fef9 	bl	8008388 <xTaskResumeAll>
}
 8009596:	bf00      	nop
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20000cac 	.word	0x20000cac
 80095a4:	20000cb0 	.word	0x20000cb0
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095b4:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <prvGetNextExpireTime+0x44>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bf0c      	ite	eq
 80095be:	2301      	moveq	r3, #1
 80095c0:	2300      	movne	r3, #0
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d105      	bne.n	80095de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095d2:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <prvGetNextExpireTime+0x44>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	e001      	b.n	80095e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095e2:	68fb      	ldr	r3, [r7, #12]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20000ca8 	.word	0x20000ca8

080095f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095fc:	f7fe ff62 	bl	80084c4 <xTaskGetTickCount>
 8009600:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009602:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <prvSampleTimeNow+0x3c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	429a      	cmp	r2, r3
 800960a:	d205      	bcs.n	8009618 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800960c:	f000 f908 	bl	8009820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e002      	b.n	800961e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800961e:	4a04      	ldr	r2, [pc, #16]	; (8009630 <prvSampleTimeNow+0x3c>)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009624:	68fb      	ldr	r3, [r7, #12]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20000cb8 	.word	0x20000cb8

08009634 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
 8009640:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	d812      	bhi.n	8009680 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	429a      	cmp	r2, r3
 8009666:	d302      	bcc.n	800966e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009668:	2301      	movs	r3, #1
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	e01b      	b.n	80096a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800966e:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <prvInsertTimerInActiveList+0x7c>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7fd fc67 	bl	8006f4c <vListInsert>
 800967e:	e012      	b.n	80096a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d206      	bcs.n	8009696 <prvInsertTimerInActiveList+0x62>
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	429a      	cmp	r2, r3
 800968e:	d302      	bcc.n	8009696 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009690:	2301      	movs	r3, #1
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	e007      	b.n	80096a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009696:	4b07      	ldr	r3, [pc, #28]	; (80096b4 <prvInsertTimerInActiveList+0x80>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3304      	adds	r3, #4
 800969e:	4619      	mov	r1, r3
 80096a0:	4610      	mov	r0, r2
 80096a2:	f7fd fc53 	bl	8006f4c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096a6:	697b      	ldr	r3, [r7, #20]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	20000cac 	.word	0x20000cac
 80096b4:	20000ca8 	.word	0x20000ca8

080096b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08e      	sub	sp, #56	; 0x38
 80096bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096be:	e09d      	b.n	80097fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da18      	bge.n	80096f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096c6:	1d3b      	adds	r3, r7, #4
 80096c8:	3304      	adds	r3, #4
 80096ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	61fb      	str	r3, [r7, #28]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096ee:	6850      	ldr	r0, [r2, #4]
 80096f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096f2:	6892      	ldr	r2, [r2, #8]
 80096f4:	4611      	mov	r1, r2
 80096f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	db7d      	blt.n	80097fa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d004      	beq.n	8009714 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	3304      	adds	r3, #4
 800970e:	4618      	mov	r0, r3
 8009710:	f7fd fc54 	bl	8006fbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009714:	463b      	mov	r3, r7
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff ff6c 	bl	80095f4 <prvSampleTimeNow>
 800971c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b09      	cmp	r3, #9
 8009722:	d86b      	bhi.n	80097fc <prvProcessReceivedCommands+0x144>
 8009724:	a201      	add	r2, pc, #4	; (adr r2, 800972c <prvProcessReceivedCommands+0x74>)
 8009726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972a:	bf00      	nop
 800972c:	08009755 	.word	0x08009755
 8009730:	08009755 	.word	0x08009755
 8009734:	08009755 	.word	0x08009755
 8009738:	080097fd 	.word	0x080097fd
 800973c:	080097b1 	.word	0x080097b1
 8009740:	080097e9 	.word	0x080097e9
 8009744:	08009755 	.word	0x08009755
 8009748:	08009755 	.word	0x08009755
 800974c:	080097fd 	.word	0x080097fd
 8009750:	080097b1 	.word	0x080097b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	18d1      	adds	r1, r2, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009762:	f7ff ff67 	bl	8009634 <prvInsertTimerInActiveList>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d047      	beq.n	80097fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009772:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d13f      	bne.n	80097fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	441a      	add	r2, r3
 8009784:	2300      	movs	r3, #0
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	2300      	movs	r3, #0
 800978a:	2100      	movs	r1, #0
 800978c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800978e:	f7ff fe1f 	bl	80093d0 <xTimerGenericCommand>
 8009792:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d130      	bne.n	80097fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	61bb      	str	r3, [r7, #24]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	617b      	str	r3, [r7, #20]
}
 80097d0:	bf00      	nop
 80097d2:	e7fe      	b.n	80097d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	18d1      	adds	r1, r2, r3
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e2:	f7ff ff27 	bl	8009634 <prvInsertTimerInActiveList>
					break;
 80097e6:	e009      	b.n	80097fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d104      	bne.n	80097fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80097f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f4:	f000 fabc 	bl	8009d70 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097f8:	e000      	b.n	80097fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80097fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097fc:	4b07      	ldr	r3, [pc, #28]	; (800981c <prvProcessReceivedCommands+0x164>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	1d39      	adds	r1, r7, #4
 8009802:	2200      	movs	r2, #0
 8009804:	4618      	mov	r0, r3
 8009806:	f7fd ff43 	bl	8007690 <xQueueReceive>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	f47f af57 	bne.w	80096c0 <prvProcessReceivedCommands+0x8>
	}
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	3730      	adds	r7, #48	; 0x30
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20000cb0 	.word	0x20000cb0

08009820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009826:	e045      	b.n	80098b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009828:	4b2c      	ldr	r3, [pc, #176]	; (80098dc <prvSwitchTimerLists+0xbc>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009832:	4b2a      	ldr	r3, [pc, #168]	; (80098dc <prvSwitchTimerLists+0xbc>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3304      	adds	r3, #4
 8009840:	4618      	mov	r0, r3
 8009842:	f7fd fbbb 	bl	8006fbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d12e      	bne.n	80098b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4413      	add	r3, r2
 800985e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	429a      	cmp	r2, r3
 8009866:	d90e      	bls.n	8009886 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009874:	4b19      	ldr	r3, [pc, #100]	; (80098dc <prvSwitchTimerLists+0xbc>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3304      	adds	r3, #4
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f7fd fb64 	bl	8006f4c <vListInsert>
 8009884:	e016      	b.n	80098b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009886:	2300      	movs	r3, #0
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	2300      	movs	r3, #0
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	2100      	movs	r1, #0
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff fd9d 	bl	80093d0 <xTimerGenericCommand>
 8009896:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10a      	bne.n	80098b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	603b      	str	r3, [r7, #0]
}
 80098b0:	bf00      	nop
 80098b2:	e7fe      	b.n	80098b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098b4:	4b09      	ldr	r3, [pc, #36]	; (80098dc <prvSwitchTimerLists+0xbc>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1b4      	bne.n	8009828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <prvSwitchTimerLists+0xbc>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098c4:	4b06      	ldr	r3, [pc, #24]	; (80098e0 <prvSwitchTimerLists+0xc0>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a04      	ldr	r2, [pc, #16]	; (80098dc <prvSwitchTimerLists+0xbc>)
 80098ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098cc:	4a04      	ldr	r2, [pc, #16]	; (80098e0 <prvSwitchTimerLists+0xc0>)
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6013      	str	r3, [r2, #0]
}
 80098d2:	bf00      	nop
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000ca8 	.word	0x20000ca8
 80098e0:	20000cac 	.word	0x20000cac

080098e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098ea:	f000 f92f 	bl	8009b4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098ee:	4b15      	ldr	r3, [pc, #84]	; (8009944 <prvCheckForValidListAndQueue+0x60>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d120      	bne.n	8009938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098f6:	4814      	ldr	r0, [pc, #80]	; (8009948 <prvCheckForValidListAndQueue+0x64>)
 80098f8:	f7fd fada 	bl	8006eb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098fc:	4813      	ldr	r0, [pc, #76]	; (800994c <prvCheckForValidListAndQueue+0x68>)
 80098fe:	f7fd fad7 	bl	8006eb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009902:	4b13      	ldr	r3, [pc, #76]	; (8009950 <prvCheckForValidListAndQueue+0x6c>)
 8009904:	4a10      	ldr	r2, [pc, #64]	; (8009948 <prvCheckForValidListAndQueue+0x64>)
 8009906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009908:	4b12      	ldr	r3, [pc, #72]	; (8009954 <prvCheckForValidListAndQueue+0x70>)
 800990a:	4a10      	ldr	r2, [pc, #64]	; (800994c <prvCheckForValidListAndQueue+0x68>)
 800990c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800990e:	2300      	movs	r3, #0
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	4b11      	ldr	r3, [pc, #68]	; (8009958 <prvCheckForValidListAndQueue+0x74>)
 8009914:	4a11      	ldr	r2, [pc, #68]	; (800995c <prvCheckForValidListAndQueue+0x78>)
 8009916:	2110      	movs	r1, #16
 8009918:	200a      	movs	r0, #10
 800991a:	f7fd fbe1 	bl	80070e0 <xQueueGenericCreateStatic>
 800991e:	4603      	mov	r3, r0
 8009920:	4a08      	ldr	r2, [pc, #32]	; (8009944 <prvCheckForValidListAndQueue+0x60>)
 8009922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009924:	4b07      	ldr	r3, [pc, #28]	; (8009944 <prvCheckForValidListAndQueue+0x60>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800992c:	4b05      	ldr	r3, [pc, #20]	; (8009944 <prvCheckForValidListAndQueue+0x60>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	490b      	ldr	r1, [pc, #44]	; (8009960 <prvCheckForValidListAndQueue+0x7c>)
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fa62 	bl	8007dfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009938:	f000 f938 	bl	8009bac <vPortExitCritical>
}
 800993c:	bf00      	nop
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20000cb0 	.word	0x20000cb0
 8009948:	20000c80 	.word	0x20000c80
 800994c:	20000c94 	.word	0x20000c94
 8009950:	20000ca8 	.word	0x20000ca8
 8009954:	20000cac 	.word	0x20000cac
 8009958:	20000d5c 	.word	0x20000d5c
 800995c:	20000cbc 	.word	0x20000cbc
 8009960:	0800a7c0 	.word	0x0800a7c0

08009964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3b04      	subs	r3, #4
 8009974:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800997c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3b04      	subs	r3, #4
 8009982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f023 0201 	bic.w	r2, r3, #1
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3b04      	subs	r3, #4
 8009992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009994:	4a08      	ldr	r2, [pc, #32]	; (80099b8 <pxPortInitialiseStack+0x54>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3b14      	subs	r3, #20
 800999e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3b20      	subs	r3, #32
 80099aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099ac:	68fb      	ldr	r3, [r7, #12]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc80      	pop	{r7}
 80099b6:	4770      	bx	lr
 80099b8:	080099bd 	.word	0x080099bd

080099bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <prvTaskExitError+0x54>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ce:	d00a      	beq.n	80099e6 <prvTaskExitError+0x2a>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	60fb      	str	r3, [r7, #12]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <prvTaskExitError+0x28>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	60bb      	str	r3, [r7, #8]
}
 80099f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099fa:	bf00      	nop
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0fc      	beq.n	80099fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bc80      	pop	{r7}
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	20000034 	.word	0x20000034
	...

08009a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <pxCurrentTCBConst2>)
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	6808      	ldr	r0, [r1, #0]
 8009a26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009a2a:	f380 8809 	msr	PSP, r0
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8811 	msr	BASEPRI, r0
 8009a3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009a3e:	4770      	bx	lr

08009a40 <pxCurrentTCBConst2>:
 8009a40:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop

08009a48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009a48:	4806      	ldr	r0, [pc, #24]	; (8009a64 <prvPortStartFirstTask+0x1c>)
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	6800      	ldr	r0, [r0, #0]
 8009a4e:	f380 8808 	msr	MSP, r0
 8009a52:	b662      	cpsie	i
 8009a54:	b661      	cpsie	f
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	df00      	svc	0
 8009a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a62:	bf00      	nop
 8009a64:	e000ed08 	.word	0xe000ed08

08009a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a6e:	4b32      	ldr	r3, [pc, #200]	; (8009b38 <xPortStartScheduler+0xd0>)
 8009a70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	22ff      	movs	r2, #255	; 0xff
 8009a7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	4b2a      	ldr	r3, [pc, #168]	; (8009b3c <xPortStartScheduler+0xd4>)
 8009a94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a96:	4b2a      	ldr	r3, [pc, #168]	; (8009b40 <xPortStartScheduler+0xd8>)
 8009a98:	2207      	movs	r2, #7
 8009a9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a9c:	e009      	b.n	8009ab2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009a9e:	4b28      	ldr	r3, [pc, #160]	; (8009b40 <xPortStartScheduler+0xd8>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	4a26      	ldr	r2, [pc, #152]	; (8009b40 <xPortStartScheduler+0xd8>)
 8009aa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aba:	2b80      	cmp	r3, #128	; 0x80
 8009abc:	d0ef      	beq.n	8009a9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009abe:	4b20      	ldr	r3, [pc, #128]	; (8009b40 <xPortStartScheduler+0xd8>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f1c3 0307 	rsb	r3, r3, #7
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d00a      	beq.n	8009ae0 <xPortStartScheduler+0x78>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	60bb      	str	r3, [r7, #8]
}
 8009adc:	bf00      	nop
 8009ade:	e7fe      	b.n	8009ade <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ae0:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <xPortStartScheduler+0xd8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	021b      	lsls	r3, r3, #8
 8009ae6:	4a16      	ldr	r2, [pc, #88]	; (8009b40 <xPortStartScheduler+0xd8>)
 8009ae8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009aea:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <xPortStartScheduler+0xd8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009af2:	4a13      	ldr	r2, [pc, #76]	; (8009b40 <xPortStartScheduler+0xd8>)
 8009af4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009afe:	4b11      	ldr	r3, [pc, #68]	; (8009b44 <xPortStartScheduler+0xdc>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a10      	ldr	r2, [pc, #64]	; (8009b44 <xPortStartScheduler+0xdc>)
 8009b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <xPortStartScheduler+0xdc>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a0d      	ldr	r2, [pc, #52]	; (8009b44 <xPortStartScheduler+0xdc>)
 8009b10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b16:	f000 f8b9 	bl	8009c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <xPortStartScheduler+0xe0>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b20:	f7ff ff92 	bl	8009a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b24:	f7fe fdac 	bl	8008680 <vTaskSwitchContext>
	prvTaskExitError();
 8009b28:	f7ff ff48 	bl	80099bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	e000e400 	.word	0xe000e400
 8009b3c:	20000dac 	.word	0x20000dac
 8009b40:	20000db0 	.word	0x20000db0
 8009b44:	e000ed20 	.word	0xe000ed20
 8009b48:	20000034 	.word	0x20000034

08009b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	607b      	str	r3, [r7, #4]
}
 8009b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b66:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <vPortEnterCritical+0x58>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	4a0d      	ldr	r2, [pc, #52]	; (8009ba4 <vPortEnterCritical+0x58>)
 8009b6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b70:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <vPortEnterCritical+0x58>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d10f      	bne.n	8009b98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b78:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <vPortEnterCritical+0x5c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00a      	beq.n	8009b98 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	603b      	str	r3, [r7, #0]
}
 8009b94:	bf00      	nop
 8009b96:	e7fe      	b.n	8009b96 <vPortEnterCritical+0x4a>
	}
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bc80      	pop	{r7}
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000034 	.word	0x20000034
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bb2:	4b11      	ldr	r3, [pc, #68]	; (8009bf8 <vPortExitCritical+0x4c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10a      	bne.n	8009bd0 <vPortExitCritical+0x24>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	607b      	str	r3, [r7, #4]
}
 8009bcc:	bf00      	nop
 8009bce:	e7fe      	b.n	8009bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bd0:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <vPortExitCritical+0x4c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	4a08      	ldr	r2, [pc, #32]	; (8009bf8 <vPortExitCritical+0x4c>)
 8009bd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bda:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <vPortExitCritical+0x4c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d105      	bne.n	8009bee <vPortExitCritical+0x42>
 8009be2:	2300      	movs	r3, #0
 8009be4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	f383 8811 	msr	BASEPRI, r3
}
 8009bec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bee:	bf00      	nop
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr
 8009bf8:	20000034 	.word	0x20000034
 8009bfc:	00000000 	.word	0x00000000

08009c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c00:	f3ef 8009 	mrs	r0, PSP
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <pxCurrentTCBConst>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c10:	6010      	str	r0, [r2, #0]
 8009c12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009c16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c1a:	f380 8811 	msr	BASEPRI, r0
 8009c1e:	f7fe fd2f 	bl	8008680 <vTaskSwitchContext>
 8009c22:	f04f 0000 	mov.w	r0, #0
 8009c26:	f380 8811 	msr	BASEPRI, r0
 8009c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009c2e:	6819      	ldr	r1, [r3, #0]
 8009c30:	6808      	ldr	r0, [r1, #0]
 8009c32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c36:	f380 8809 	msr	PSP, r0
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	4770      	bx	lr

08009c40 <pxCurrentTCBConst>:
 8009c40:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop

08009c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	607b      	str	r3, [r7, #4]
}
 8009c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c62:	f7fe fc4f 	bl	8008504 <xTaskIncrementTick>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c6c:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <SysTick_Handler+0x40>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	2300      	movs	r3, #0
 8009c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	f383 8811 	msr	BASEPRI, r3
}
 8009c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c90:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <vPortSetupTimerInterrupt+0x30>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c96:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <vPortSetupTimerInterrupt+0x34>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c9c:	4b09      	ldr	r3, [pc, #36]	; (8009cc4 <vPortSetupTimerInterrupt+0x38>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a09      	ldr	r2, [pc, #36]	; (8009cc8 <vPortSetupTimerInterrupt+0x3c>)
 8009ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca6:	099b      	lsrs	r3, r3, #6
 8009ca8:	4a08      	ldr	r2, [pc, #32]	; (8009ccc <vPortSetupTimerInterrupt+0x40>)
 8009caa:	3b01      	subs	r3, #1
 8009cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cae:	4b03      	ldr	r3, [pc, #12]	; (8009cbc <vPortSetupTimerInterrupt+0x30>)
 8009cb0:	2207      	movs	r2, #7
 8009cb2:	601a      	str	r2, [r3, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr
 8009cbc:	e000e010 	.word	0xe000e010
 8009cc0:	e000e018 	.word	0xe000e018
 8009cc4:	20000028 	.word	0x20000028
 8009cc8:	10624dd3 	.word	0x10624dd3
 8009ccc:	e000e014 	.word	0xe000e014

08009cd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cd6:	f3ef 8305 	mrs	r3, IPSR
 8009cda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b0f      	cmp	r3, #15
 8009ce0:	d914      	bls.n	8009d0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ce2:	4a16      	ldr	r2, [pc, #88]	; (8009d3c <vPortValidateInterruptPriority+0x6c>)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cec:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <vPortValidateInterruptPriority+0x70>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	7afa      	ldrb	r2, [r7, #11]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d20a      	bcs.n	8009d0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	607b      	str	r3, [r7, #4]
}
 8009d08:	bf00      	nop
 8009d0a:	e7fe      	b.n	8009d0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d0c:	4b0d      	ldr	r3, [pc, #52]	; (8009d44 <vPortValidateInterruptPriority+0x74>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d14:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <vPortValidateInterruptPriority+0x78>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d90a      	bls.n	8009d32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	603b      	str	r3, [r7, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <vPortValidateInterruptPriority+0x60>
	}
 8009d32:	bf00      	nop
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bc80      	pop	{r7}
 8009d3a:	4770      	bx	lr
 8009d3c:	e000e3f0 	.word	0xe000e3f0
 8009d40:	20000dac 	.word	0x20000dac
 8009d44:	e000ed0c 	.word	0xe000ed0c
 8009d48:	20000db0 	.word	0x20000db0

08009d4c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8009d54:	f7fe fb0a 	bl	800836c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f845 	bl	8009de8 <malloc>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d62:	f7fe fb11 	bl	8008388 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8009d66:	68fb      	ldr	r3, [r7, #12]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	if( pv )
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d006      	beq.n	8009d8c <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8009d7e:	f7fe faf5 	bl	800836c <vTaskSuspendAll>
		{
			free( pv );
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f838 	bl	8009df8 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8009d88:	f7fe fafe 	bl	8008388 <xTaskResumeAll>
	}
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <__errno>:
 8009d94:	4b01      	ldr	r3, [pc, #4]	; (8009d9c <__errno+0x8>)
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	20000038 	.word	0x20000038

08009da0 <__libc_init_array>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	2600      	movs	r6, #0
 8009da4:	4d0c      	ldr	r5, [pc, #48]	; (8009dd8 <__libc_init_array+0x38>)
 8009da6:	4c0d      	ldr	r4, [pc, #52]	; (8009ddc <__libc_init_array+0x3c>)
 8009da8:	1b64      	subs	r4, r4, r5
 8009daa:	10a4      	asrs	r4, r4, #2
 8009dac:	42a6      	cmp	r6, r4
 8009dae:	d109      	bne.n	8009dc4 <__libc_init_array+0x24>
 8009db0:	f000 fc6c 	bl	800a68c <_init>
 8009db4:	2600      	movs	r6, #0
 8009db6:	4d0a      	ldr	r5, [pc, #40]	; (8009de0 <__libc_init_array+0x40>)
 8009db8:	4c0a      	ldr	r4, [pc, #40]	; (8009de4 <__libc_init_array+0x44>)
 8009dba:	1b64      	subs	r4, r4, r5
 8009dbc:	10a4      	asrs	r4, r4, #2
 8009dbe:	42a6      	cmp	r6, r4
 8009dc0:	d105      	bne.n	8009dce <__libc_init_array+0x2e>
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dc8:	4798      	blx	r3
 8009dca:	3601      	adds	r6, #1
 8009dcc:	e7ee      	b.n	8009dac <__libc_init_array+0xc>
 8009dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd2:	4798      	blx	r3
 8009dd4:	3601      	adds	r6, #1
 8009dd6:	e7f2      	b.n	8009dbe <__libc_init_array+0x1e>
 8009dd8:	0800a934 	.word	0x0800a934
 8009ddc:	0800a934 	.word	0x0800a934
 8009de0:	0800a934 	.word	0x0800a934
 8009de4:	0800a938 	.word	0x0800a938

08009de8 <malloc>:
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <malloc+0xc>)
 8009dea:	4601      	mov	r1, r0
 8009dec:	6818      	ldr	r0, [r3, #0]
 8009dee:	f000 b86d 	b.w	8009ecc <_malloc_r>
 8009df2:	bf00      	nop
 8009df4:	20000038 	.word	0x20000038

08009df8 <free>:
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <free+0xc>)
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f000 b819 	b.w	8009e34 <_free_r>
 8009e02:	bf00      	nop
 8009e04:	20000038 	.word	0x20000038

08009e08 <memcpy>:
 8009e08:	440a      	add	r2, r1
 8009e0a:	4291      	cmp	r1, r2
 8009e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e10:	d100      	bne.n	8009e14 <memcpy+0xc>
 8009e12:	4770      	bx	lr
 8009e14:	b510      	push	{r4, lr}
 8009e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1a:	4291      	cmp	r1, r2
 8009e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e20:	d1f9      	bne.n	8009e16 <memcpy+0xe>
 8009e22:	bd10      	pop	{r4, pc}

08009e24 <memset>:
 8009e24:	4603      	mov	r3, r0
 8009e26:	4402      	add	r2, r0
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d100      	bne.n	8009e2e <memset+0xa>
 8009e2c:	4770      	bx	lr
 8009e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e32:	e7f9      	b.n	8009e28 <memset+0x4>

08009e34 <_free_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4605      	mov	r5, r0
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d043      	beq.n	8009ec4 <_free_r+0x90>
 8009e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e40:	1f0c      	subs	r4, r1, #4
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	bfb8      	it	lt
 8009e46:	18e4      	addlt	r4, r4, r3
 8009e48:	f000 f8ca 	bl	8009fe0 <__malloc_lock>
 8009e4c:	4a1e      	ldr	r2, [pc, #120]	; (8009ec8 <_free_r+0x94>)
 8009e4e:	6813      	ldr	r3, [r2, #0]
 8009e50:	4610      	mov	r0, r2
 8009e52:	b933      	cbnz	r3, 8009e62 <_free_r+0x2e>
 8009e54:	6063      	str	r3, [r4, #4]
 8009e56:	6014      	str	r4, [r2, #0]
 8009e58:	4628      	mov	r0, r5
 8009e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e5e:	f000 b8c5 	b.w	8009fec <__malloc_unlock>
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	d90a      	bls.n	8009e7c <_free_r+0x48>
 8009e66:	6821      	ldr	r1, [r4, #0]
 8009e68:	1862      	adds	r2, r4, r1
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	bf01      	itttt	eq
 8009e6e:	681a      	ldreq	r2, [r3, #0]
 8009e70:	685b      	ldreq	r3, [r3, #4]
 8009e72:	1852      	addeq	r2, r2, r1
 8009e74:	6022      	streq	r2, [r4, #0]
 8009e76:	6063      	str	r3, [r4, #4]
 8009e78:	6004      	str	r4, [r0, #0]
 8009e7a:	e7ed      	b.n	8009e58 <_free_r+0x24>
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	b10b      	cbz	r3, 8009e86 <_free_r+0x52>
 8009e82:	42a3      	cmp	r3, r4
 8009e84:	d9fa      	bls.n	8009e7c <_free_r+0x48>
 8009e86:	6811      	ldr	r1, [r2, #0]
 8009e88:	1850      	adds	r0, r2, r1
 8009e8a:	42a0      	cmp	r0, r4
 8009e8c:	d10b      	bne.n	8009ea6 <_free_r+0x72>
 8009e8e:	6820      	ldr	r0, [r4, #0]
 8009e90:	4401      	add	r1, r0
 8009e92:	1850      	adds	r0, r2, r1
 8009e94:	4283      	cmp	r3, r0
 8009e96:	6011      	str	r1, [r2, #0]
 8009e98:	d1de      	bne.n	8009e58 <_free_r+0x24>
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	4401      	add	r1, r0
 8009ea0:	6011      	str	r1, [r2, #0]
 8009ea2:	6053      	str	r3, [r2, #4]
 8009ea4:	e7d8      	b.n	8009e58 <_free_r+0x24>
 8009ea6:	d902      	bls.n	8009eae <_free_r+0x7a>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	602b      	str	r3, [r5, #0]
 8009eac:	e7d4      	b.n	8009e58 <_free_r+0x24>
 8009eae:	6820      	ldr	r0, [r4, #0]
 8009eb0:	1821      	adds	r1, r4, r0
 8009eb2:	428b      	cmp	r3, r1
 8009eb4:	bf01      	itttt	eq
 8009eb6:	6819      	ldreq	r1, [r3, #0]
 8009eb8:	685b      	ldreq	r3, [r3, #4]
 8009eba:	1809      	addeq	r1, r1, r0
 8009ebc:	6021      	streq	r1, [r4, #0]
 8009ebe:	6063      	str	r3, [r4, #4]
 8009ec0:	6054      	str	r4, [r2, #4]
 8009ec2:	e7c9      	b.n	8009e58 <_free_r+0x24>
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20000db4 	.word	0x20000db4

08009ecc <_malloc_r>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	1ccd      	adds	r5, r1, #3
 8009ed0:	f025 0503 	bic.w	r5, r5, #3
 8009ed4:	3508      	adds	r5, #8
 8009ed6:	2d0c      	cmp	r5, #12
 8009ed8:	bf38      	it	cc
 8009eda:	250c      	movcc	r5, #12
 8009edc:	2d00      	cmp	r5, #0
 8009ede:	4606      	mov	r6, r0
 8009ee0:	db01      	blt.n	8009ee6 <_malloc_r+0x1a>
 8009ee2:	42a9      	cmp	r1, r5
 8009ee4:	d903      	bls.n	8009eee <_malloc_r+0x22>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	6033      	str	r3, [r6, #0]
 8009eea:	2000      	movs	r0, #0
 8009eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eee:	f000 f877 	bl	8009fe0 <__malloc_lock>
 8009ef2:	4921      	ldr	r1, [pc, #132]	; (8009f78 <_malloc_r+0xac>)
 8009ef4:	680a      	ldr	r2, [r1, #0]
 8009ef6:	4614      	mov	r4, r2
 8009ef8:	b99c      	cbnz	r4, 8009f22 <_malloc_r+0x56>
 8009efa:	4f20      	ldr	r7, [pc, #128]	; (8009f7c <_malloc_r+0xb0>)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	b923      	cbnz	r3, 8009f0a <_malloc_r+0x3e>
 8009f00:	4621      	mov	r1, r4
 8009f02:	4630      	mov	r0, r6
 8009f04:	f000 f83c 	bl	8009f80 <_sbrk_r>
 8009f08:	6038      	str	r0, [r7, #0]
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f000 f837 	bl	8009f80 <_sbrk_r>
 8009f12:	1c43      	adds	r3, r0, #1
 8009f14:	d123      	bne.n	8009f5e <_malloc_r+0x92>
 8009f16:	230c      	movs	r3, #12
 8009f18:	4630      	mov	r0, r6
 8009f1a:	6033      	str	r3, [r6, #0]
 8009f1c:	f000 f866 	bl	8009fec <__malloc_unlock>
 8009f20:	e7e3      	b.n	8009eea <_malloc_r+0x1e>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	1b5b      	subs	r3, r3, r5
 8009f26:	d417      	bmi.n	8009f58 <_malloc_r+0x8c>
 8009f28:	2b0b      	cmp	r3, #11
 8009f2a:	d903      	bls.n	8009f34 <_malloc_r+0x68>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	441c      	add	r4, r3
 8009f30:	6025      	str	r5, [r4, #0]
 8009f32:	e004      	b.n	8009f3e <_malloc_r+0x72>
 8009f34:	6863      	ldr	r3, [r4, #4]
 8009f36:	42a2      	cmp	r2, r4
 8009f38:	bf0c      	ite	eq
 8009f3a:	600b      	streq	r3, [r1, #0]
 8009f3c:	6053      	strne	r3, [r2, #4]
 8009f3e:	4630      	mov	r0, r6
 8009f40:	f000 f854 	bl	8009fec <__malloc_unlock>
 8009f44:	f104 000b 	add.w	r0, r4, #11
 8009f48:	1d23      	adds	r3, r4, #4
 8009f4a:	f020 0007 	bic.w	r0, r0, #7
 8009f4e:	1ac2      	subs	r2, r0, r3
 8009f50:	d0cc      	beq.n	8009eec <_malloc_r+0x20>
 8009f52:	1a1b      	subs	r3, r3, r0
 8009f54:	50a3      	str	r3, [r4, r2]
 8009f56:	e7c9      	b.n	8009eec <_malloc_r+0x20>
 8009f58:	4622      	mov	r2, r4
 8009f5a:	6864      	ldr	r4, [r4, #4]
 8009f5c:	e7cc      	b.n	8009ef8 <_malloc_r+0x2c>
 8009f5e:	1cc4      	adds	r4, r0, #3
 8009f60:	f024 0403 	bic.w	r4, r4, #3
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d0e3      	beq.n	8009f30 <_malloc_r+0x64>
 8009f68:	1a21      	subs	r1, r4, r0
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f000 f808 	bl	8009f80 <_sbrk_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	d1dd      	bne.n	8009f30 <_malloc_r+0x64>
 8009f74:	e7cf      	b.n	8009f16 <_malloc_r+0x4a>
 8009f76:	bf00      	nop
 8009f78:	20000db4 	.word	0x20000db4
 8009f7c:	20000db8 	.word	0x20000db8

08009f80 <_sbrk_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	2300      	movs	r3, #0
 8009f84:	4d05      	ldr	r5, [pc, #20]	; (8009f9c <_sbrk_r+0x1c>)
 8009f86:	4604      	mov	r4, r0
 8009f88:	4608      	mov	r0, r1
 8009f8a:	602b      	str	r3, [r5, #0]
 8009f8c:	f7f9 f950 	bl	8003230 <_sbrk>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_sbrk_r+0x1a>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_sbrk_r+0x1a>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	200010ac 	.word	0x200010ac

08009fa0 <siprintf>:
 8009fa0:	b40e      	push	{r1, r2, r3}
 8009fa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fa6:	b500      	push	{lr}
 8009fa8:	b09c      	sub	sp, #112	; 0x70
 8009faa:	ab1d      	add	r3, sp, #116	; 0x74
 8009fac:	9002      	str	r0, [sp, #8]
 8009fae:	9006      	str	r0, [sp, #24]
 8009fb0:	9107      	str	r1, [sp, #28]
 8009fb2:	9104      	str	r1, [sp, #16]
 8009fb4:	4808      	ldr	r0, [pc, #32]	; (8009fd8 <siprintf+0x38>)
 8009fb6:	4909      	ldr	r1, [pc, #36]	; (8009fdc <siprintf+0x3c>)
 8009fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fbc:	9105      	str	r1, [sp, #20]
 8009fbe:	6800      	ldr	r0, [r0, #0]
 8009fc0:	a902      	add	r1, sp, #8
 8009fc2:	9301      	str	r3, [sp, #4]
 8009fc4:	f000 f874 	bl	800a0b0 <_svfiprintf_r>
 8009fc8:	2200      	movs	r2, #0
 8009fca:	9b02      	ldr	r3, [sp, #8]
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	b01c      	add	sp, #112	; 0x70
 8009fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fd4:	b003      	add	sp, #12
 8009fd6:	4770      	bx	lr
 8009fd8:	20000038 	.word	0x20000038
 8009fdc:	ffff0208 	.word	0xffff0208

08009fe0 <__malloc_lock>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__malloc_lock+0x8>)
 8009fe2:	f000 bafb 	b.w	800a5dc <__retarget_lock_acquire_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	200010b4 	.word	0x200010b4

08009fec <__malloc_unlock>:
 8009fec:	4801      	ldr	r0, [pc, #4]	; (8009ff4 <__malloc_unlock+0x8>)
 8009fee:	f000 baf6 	b.w	800a5de <__retarget_lock_release_recursive>
 8009ff2:	bf00      	nop
 8009ff4:	200010b4 	.word	0x200010b4

08009ff8 <__ssputs_r>:
 8009ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	688e      	ldr	r6, [r1, #8]
 8009ffe:	4682      	mov	sl, r0
 800a000:	429e      	cmp	r6, r3
 800a002:	460c      	mov	r4, r1
 800a004:	4690      	mov	r8, r2
 800a006:	461f      	mov	r7, r3
 800a008:	d838      	bhi.n	800a07c <__ssputs_r+0x84>
 800a00a:	898a      	ldrh	r2, [r1, #12]
 800a00c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a010:	d032      	beq.n	800a078 <__ssputs_r+0x80>
 800a012:	6825      	ldr	r5, [r4, #0]
 800a014:	6909      	ldr	r1, [r1, #16]
 800a016:	3301      	adds	r3, #1
 800a018:	eba5 0901 	sub.w	r9, r5, r1
 800a01c:	6965      	ldr	r5, [r4, #20]
 800a01e:	444b      	add	r3, r9
 800a020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a028:	106d      	asrs	r5, r5, #1
 800a02a:	429d      	cmp	r5, r3
 800a02c:	bf38      	it	cc
 800a02e:	461d      	movcc	r5, r3
 800a030:	0553      	lsls	r3, r2, #21
 800a032:	d531      	bpl.n	800a098 <__ssputs_r+0xa0>
 800a034:	4629      	mov	r1, r5
 800a036:	f7ff ff49 	bl	8009ecc <_malloc_r>
 800a03a:	4606      	mov	r6, r0
 800a03c:	b950      	cbnz	r0, 800a054 <__ssputs_r+0x5c>
 800a03e:	230c      	movs	r3, #12
 800a040:	f04f 30ff 	mov.w	r0, #4294967295
 800a044:	f8ca 3000 	str.w	r3, [sl]
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a04e:	81a3      	strh	r3, [r4, #12]
 800a050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a054:	464a      	mov	r2, r9
 800a056:	6921      	ldr	r1, [r4, #16]
 800a058:	f7ff fed6 	bl	8009e08 <memcpy>
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	6126      	str	r6, [r4, #16]
 800a06a:	444e      	add	r6, r9
 800a06c:	6026      	str	r6, [r4, #0]
 800a06e:	463e      	mov	r6, r7
 800a070:	6165      	str	r5, [r4, #20]
 800a072:	eba5 0509 	sub.w	r5, r5, r9
 800a076:	60a5      	str	r5, [r4, #8]
 800a078:	42be      	cmp	r6, r7
 800a07a:	d900      	bls.n	800a07e <__ssputs_r+0x86>
 800a07c:	463e      	mov	r6, r7
 800a07e:	4632      	mov	r2, r6
 800a080:	4641      	mov	r1, r8
 800a082:	6820      	ldr	r0, [r4, #0]
 800a084:	f000 faba 	bl	800a5fc <memmove>
 800a088:	68a3      	ldr	r3, [r4, #8]
 800a08a:	6822      	ldr	r2, [r4, #0]
 800a08c:	1b9b      	subs	r3, r3, r6
 800a08e:	4432      	add	r2, r6
 800a090:	2000      	movs	r0, #0
 800a092:	60a3      	str	r3, [r4, #8]
 800a094:	6022      	str	r2, [r4, #0]
 800a096:	e7db      	b.n	800a050 <__ssputs_r+0x58>
 800a098:	462a      	mov	r2, r5
 800a09a:	f000 fac9 	bl	800a630 <_realloc_r>
 800a09e:	4606      	mov	r6, r0
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d1e1      	bne.n	800a068 <__ssputs_r+0x70>
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	6921      	ldr	r1, [r4, #16]
 800a0a8:	f7ff fec4 	bl	8009e34 <_free_r>
 800a0ac:	e7c7      	b.n	800a03e <__ssputs_r+0x46>
	...

0800a0b0 <_svfiprintf_r>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	4698      	mov	r8, r3
 800a0b6:	898b      	ldrh	r3, [r1, #12]
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	061b      	lsls	r3, r3, #24
 800a0bc:	460d      	mov	r5, r1
 800a0be:	4614      	mov	r4, r2
 800a0c0:	b09d      	sub	sp, #116	; 0x74
 800a0c2:	d50e      	bpl.n	800a0e2 <_svfiprintf_r+0x32>
 800a0c4:	690b      	ldr	r3, [r1, #16]
 800a0c6:	b963      	cbnz	r3, 800a0e2 <_svfiprintf_r+0x32>
 800a0c8:	2140      	movs	r1, #64	; 0x40
 800a0ca:	f7ff feff 	bl	8009ecc <_malloc_r>
 800a0ce:	6028      	str	r0, [r5, #0]
 800a0d0:	6128      	str	r0, [r5, #16]
 800a0d2:	b920      	cbnz	r0, 800a0de <_svfiprintf_r+0x2e>
 800a0d4:	230c      	movs	r3, #12
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	e0d1      	b.n	800a282 <_svfiprintf_r+0x1d2>
 800a0de:	2340      	movs	r3, #64	; 0x40
 800a0e0:	616b      	str	r3, [r5, #20]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	2320      	movs	r3, #32
 800a0e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ec:	2330      	movs	r3, #48	; 0x30
 800a0ee:	f04f 0901 	mov.w	r9, #1
 800a0f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a29c <_svfiprintf_r+0x1ec>
 800a0fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0fe:	4623      	mov	r3, r4
 800a100:	469a      	mov	sl, r3
 800a102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a106:	b10a      	cbz	r2, 800a10c <_svfiprintf_r+0x5c>
 800a108:	2a25      	cmp	r2, #37	; 0x25
 800a10a:	d1f9      	bne.n	800a100 <_svfiprintf_r+0x50>
 800a10c:	ebba 0b04 	subs.w	fp, sl, r4
 800a110:	d00b      	beq.n	800a12a <_svfiprintf_r+0x7a>
 800a112:	465b      	mov	r3, fp
 800a114:	4622      	mov	r2, r4
 800a116:	4629      	mov	r1, r5
 800a118:	4638      	mov	r0, r7
 800a11a:	f7ff ff6d 	bl	8009ff8 <__ssputs_r>
 800a11e:	3001      	adds	r0, #1
 800a120:	f000 80aa 	beq.w	800a278 <_svfiprintf_r+0x1c8>
 800a124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a126:	445a      	add	r2, fp
 800a128:	9209      	str	r2, [sp, #36]	; 0x24
 800a12a:	f89a 3000 	ldrb.w	r3, [sl]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 80a2 	beq.w	800a278 <_svfiprintf_r+0x1c8>
 800a134:	2300      	movs	r3, #0
 800a136:	f04f 32ff 	mov.w	r2, #4294967295
 800a13a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a13e:	f10a 0a01 	add.w	sl, sl, #1
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	9307      	str	r3, [sp, #28]
 800a146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a14a:	931a      	str	r3, [sp, #104]	; 0x68
 800a14c:	4654      	mov	r4, sl
 800a14e:	2205      	movs	r2, #5
 800a150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a154:	4851      	ldr	r0, [pc, #324]	; (800a29c <_svfiprintf_r+0x1ec>)
 800a156:	f000 fa43 	bl	800a5e0 <memchr>
 800a15a:	9a04      	ldr	r2, [sp, #16]
 800a15c:	b9d8      	cbnz	r0, 800a196 <_svfiprintf_r+0xe6>
 800a15e:	06d0      	lsls	r0, r2, #27
 800a160:	bf44      	itt	mi
 800a162:	2320      	movmi	r3, #32
 800a164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a168:	0711      	lsls	r1, r2, #28
 800a16a:	bf44      	itt	mi
 800a16c:	232b      	movmi	r3, #43	; 0x2b
 800a16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a172:	f89a 3000 	ldrb.w	r3, [sl]
 800a176:	2b2a      	cmp	r3, #42	; 0x2a
 800a178:	d015      	beq.n	800a1a6 <_svfiprintf_r+0xf6>
 800a17a:	4654      	mov	r4, sl
 800a17c:	2000      	movs	r0, #0
 800a17e:	f04f 0c0a 	mov.w	ip, #10
 800a182:	9a07      	ldr	r2, [sp, #28]
 800a184:	4621      	mov	r1, r4
 800a186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a18a:	3b30      	subs	r3, #48	; 0x30
 800a18c:	2b09      	cmp	r3, #9
 800a18e:	d94e      	bls.n	800a22e <_svfiprintf_r+0x17e>
 800a190:	b1b0      	cbz	r0, 800a1c0 <_svfiprintf_r+0x110>
 800a192:	9207      	str	r2, [sp, #28]
 800a194:	e014      	b.n	800a1c0 <_svfiprintf_r+0x110>
 800a196:	eba0 0308 	sub.w	r3, r0, r8
 800a19a:	fa09 f303 	lsl.w	r3, r9, r3
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	46a2      	mov	sl, r4
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	e7d2      	b.n	800a14c <_svfiprintf_r+0x9c>
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	1d19      	adds	r1, r3, #4
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	9103      	str	r1, [sp, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bfbb      	ittet	lt
 800a1b2:	425b      	neglt	r3, r3
 800a1b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a1b8:	9307      	strge	r3, [sp, #28]
 800a1ba:	9307      	strlt	r3, [sp, #28]
 800a1bc:	bfb8      	it	lt
 800a1be:	9204      	strlt	r2, [sp, #16]
 800a1c0:	7823      	ldrb	r3, [r4, #0]
 800a1c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a1c4:	d10c      	bne.n	800a1e0 <_svfiprintf_r+0x130>
 800a1c6:	7863      	ldrb	r3, [r4, #1]
 800a1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ca:	d135      	bne.n	800a238 <_svfiprintf_r+0x188>
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	3402      	adds	r4, #2
 800a1d0:	1d1a      	adds	r2, r3, #4
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	9203      	str	r2, [sp, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bfb8      	it	lt
 800a1da:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1de:	9305      	str	r3, [sp, #20]
 800a1e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a2ac <_svfiprintf_r+0x1fc>
 800a1e4:	2203      	movs	r2, #3
 800a1e6:	4650      	mov	r0, sl
 800a1e8:	7821      	ldrb	r1, [r4, #0]
 800a1ea:	f000 f9f9 	bl	800a5e0 <memchr>
 800a1ee:	b140      	cbz	r0, 800a202 <_svfiprintf_r+0x152>
 800a1f0:	2340      	movs	r3, #64	; 0x40
 800a1f2:	eba0 000a 	sub.w	r0, r0, sl
 800a1f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	3401      	adds	r4, #1
 800a1fe:	4303      	orrs	r3, r0
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a206:	2206      	movs	r2, #6
 800a208:	4825      	ldr	r0, [pc, #148]	; (800a2a0 <_svfiprintf_r+0x1f0>)
 800a20a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a20e:	f000 f9e7 	bl	800a5e0 <memchr>
 800a212:	2800      	cmp	r0, #0
 800a214:	d038      	beq.n	800a288 <_svfiprintf_r+0x1d8>
 800a216:	4b23      	ldr	r3, [pc, #140]	; (800a2a4 <_svfiprintf_r+0x1f4>)
 800a218:	bb1b      	cbnz	r3, 800a262 <_svfiprintf_r+0x1b2>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	3307      	adds	r3, #7
 800a21e:	f023 0307 	bic.w	r3, r3, #7
 800a222:	3308      	adds	r3, #8
 800a224:	9303      	str	r3, [sp, #12]
 800a226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a228:	4433      	add	r3, r6
 800a22a:	9309      	str	r3, [sp, #36]	; 0x24
 800a22c:	e767      	b.n	800a0fe <_svfiprintf_r+0x4e>
 800a22e:	460c      	mov	r4, r1
 800a230:	2001      	movs	r0, #1
 800a232:	fb0c 3202 	mla	r2, ip, r2, r3
 800a236:	e7a5      	b.n	800a184 <_svfiprintf_r+0xd4>
 800a238:	2300      	movs	r3, #0
 800a23a:	f04f 0c0a 	mov.w	ip, #10
 800a23e:	4619      	mov	r1, r3
 800a240:	3401      	adds	r4, #1
 800a242:	9305      	str	r3, [sp, #20]
 800a244:	4620      	mov	r0, r4
 800a246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a24a:	3a30      	subs	r2, #48	; 0x30
 800a24c:	2a09      	cmp	r2, #9
 800a24e:	d903      	bls.n	800a258 <_svfiprintf_r+0x1a8>
 800a250:	2b00      	cmp	r3, #0
 800a252:	d0c5      	beq.n	800a1e0 <_svfiprintf_r+0x130>
 800a254:	9105      	str	r1, [sp, #20]
 800a256:	e7c3      	b.n	800a1e0 <_svfiprintf_r+0x130>
 800a258:	4604      	mov	r4, r0
 800a25a:	2301      	movs	r3, #1
 800a25c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a260:	e7f0      	b.n	800a244 <_svfiprintf_r+0x194>
 800a262:	ab03      	add	r3, sp, #12
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	462a      	mov	r2, r5
 800a268:	4638      	mov	r0, r7
 800a26a:	4b0f      	ldr	r3, [pc, #60]	; (800a2a8 <_svfiprintf_r+0x1f8>)
 800a26c:	a904      	add	r1, sp, #16
 800a26e:	f3af 8000 	nop.w
 800a272:	1c42      	adds	r2, r0, #1
 800a274:	4606      	mov	r6, r0
 800a276:	d1d6      	bne.n	800a226 <_svfiprintf_r+0x176>
 800a278:	89ab      	ldrh	r3, [r5, #12]
 800a27a:	065b      	lsls	r3, r3, #25
 800a27c:	f53f af2c 	bmi.w	800a0d8 <_svfiprintf_r+0x28>
 800a280:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a282:	b01d      	add	sp, #116	; 0x74
 800a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a288:	ab03      	add	r3, sp, #12
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	462a      	mov	r2, r5
 800a28e:	4638      	mov	r0, r7
 800a290:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <_svfiprintf_r+0x1f8>)
 800a292:	a904      	add	r1, sp, #16
 800a294:	f000 f87c 	bl	800a390 <_printf_i>
 800a298:	e7eb      	b.n	800a272 <_svfiprintf_r+0x1c2>
 800a29a:	bf00      	nop
 800a29c:	0800a900 	.word	0x0800a900
 800a2a0:	0800a90a 	.word	0x0800a90a
 800a2a4:	00000000 	.word	0x00000000
 800a2a8:	08009ff9 	.word	0x08009ff9
 800a2ac:	0800a906 	.word	0x0800a906

0800a2b0 <_printf_common>:
 800a2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b4:	4616      	mov	r6, r2
 800a2b6:	4699      	mov	r9, r3
 800a2b8:	688a      	ldr	r2, [r1, #8]
 800a2ba:	690b      	ldr	r3, [r1, #16]
 800a2bc:	4607      	mov	r7, r0
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	bfb8      	it	lt
 800a2c2:	4613      	movlt	r3, r2
 800a2c4:	6033      	str	r3, [r6, #0]
 800a2c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2d0:	b10a      	cbz	r2, 800a2d6 <_printf_common+0x26>
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	6033      	str	r3, [r6, #0]
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	0699      	lsls	r1, r3, #26
 800a2da:	bf42      	ittt	mi
 800a2dc:	6833      	ldrmi	r3, [r6, #0]
 800a2de:	3302      	addmi	r3, #2
 800a2e0:	6033      	strmi	r3, [r6, #0]
 800a2e2:	6825      	ldr	r5, [r4, #0]
 800a2e4:	f015 0506 	ands.w	r5, r5, #6
 800a2e8:	d106      	bne.n	800a2f8 <_printf_common+0x48>
 800a2ea:	f104 0a19 	add.w	sl, r4, #25
 800a2ee:	68e3      	ldr	r3, [r4, #12]
 800a2f0:	6832      	ldr	r2, [r6, #0]
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	42ab      	cmp	r3, r5
 800a2f6:	dc28      	bgt.n	800a34a <_printf_common+0x9a>
 800a2f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2fc:	1e13      	subs	r3, r2, #0
 800a2fe:	6822      	ldr	r2, [r4, #0]
 800a300:	bf18      	it	ne
 800a302:	2301      	movne	r3, #1
 800a304:	0692      	lsls	r2, r2, #26
 800a306:	d42d      	bmi.n	800a364 <_printf_common+0xb4>
 800a308:	4649      	mov	r1, r9
 800a30a:	4638      	mov	r0, r7
 800a30c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a310:	47c0      	blx	r8
 800a312:	3001      	adds	r0, #1
 800a314:	d020      	beq.n	800a358 <_printf_common+0xa8>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	68e5      	ldr	r5, [r4, #12]
 800a31a:	f003 0306 	and.w	r3, r3, #6
 800a31e:	2b04      	cmp	r3, #4
 800a320:	bf18      	it	ne
 800a322:	2500      	movne	r5, #0
 800a324:	6832      	ldr	r2, [r6, #0]
 800a326:	f04f 0600 	mov.w	r6, #0
 800a32a:	68a3      	ldr	r3, [r4, #8]
 800a32c:	bf08      	it	eq
 800a32e:	1aad      	subeq	r5, r5, r2
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	bf08      	it	eq
 800a334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a338:	4293      	cmp	r3, r2
 800a33a:	bfc4      	itt	gt
 800a33c:	1a9b      	subgt	r3, r3, r2
 800a33e:	18ed      	addgt	r5, r5, r3
 800a340:	341a      	adds	r4, #26
 800a342:	42b5      	cmp	r5, r6
 800a344:	d11a      	bne.n	800a37c <_printf_common+0xcc>
 800a346:	2000      	movs	r0, #0
 800a348:	e008      	b.n	800a35c <_printf_common+0xac>
 800a34a:	2301      	movs	r3, #1
 800a34c:	4652      	mov	r2, sl
 800a34e:	4649      	mov	r1, r9
 800a350:	4638      	mov	r0, r7
 800a352:	47c0      	blx	r8
 800a354:	3001      	adds	r0, #1
 800a356:	d103      	bne.n	800a360 <_printf_common+0xb0>
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
 800a35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a360:	3501      	adds	r5, #1
 800a362:	e7c4      	b.n	800a2ee <_printf_common+0x3e>
 800a364:	2030      	movs	r0, #48	; 0x30
 800a366:	18e1      	adds	r1, r4, r3
 800a368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a372:	4422      	add	r2, r4
 800a374:	3302      	adds	r3, #2
 800a376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a37a:	e7c5      	b.n	800a308 <_printf_common+0x58>
 800a37c:	2301      	movs	r3, #1
 800a37e:	4622      	mov	r2, r4
 800a380:	4649      	mov	r1, r9
 800a382:	4638      	mov	r0, r7
 800a384:	47c0      	blx	r8
 800a386:	3001      	adds	r0, #1
 800a388:	d0e6      	beq.n	800a358 <_printf_common+0xa8>
 800a38a:	3601      	adds	r6, #1
 800a38c:	e7d9      	b.n	800a342 <_printf_common+0x92>
	...

0800a390 <_printf_i>:
 800a390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a394:	460c      	mov	r4, r1
 800a396:	7e27      	ldrb	r7, [r4, #24]
 800a398:	4691      	mov	r9, r2
 800a39a:	2f78      	cmp	r7, #120	; 0x78
 800a39c:	4680      	mov	r8, r0
 800a39e:	469a      	mov	sl, r3
 800a3a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3a6:	d807      	bhi.n	800a3b8 <_printf_i+0x28>
 800a3a8:	2f62      	cmp	r7, #98	; 0x62
 800a3aa:	d80a      	bhi.n	800a3c2 <_printf_i+0x32>
 800a3ac:	2f00      	cmp	r7, #0
 800a3ae:	f000 80d9 	beq.w	800a564 <_printf_i+0x1d4>
 800a3b2:	2f58      	cmp	r7, #88	; 0x58
 800a3b4:	f000 80a4 	beq.w	800a500 <_printf_i+0x170>
 800a3b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3c0:	e03a      	b.n	800a438 <_printf_i+0xa8>
 800a3c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3c6:	2b15      	cmp	r3, #21
 800a3c8:	d8f6      	bhi.n	800a3b8 <_printf_i+0x28>
 800a3ca:	a001      	add	r0, pc, #4	; (adr r0, 800a3d0 <_printf_i+0x40>)
 800a3cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a3d0:	0800a429 	.word	0x0800a429
 800a3d4:	0800a43d 	.word	0x0800a43d
 800a3d8:	0800a3b9 	.word	0x0800a3b9
 800a3dc:	0800a3b9 	.word	0x0800a3b9
 800a3e0:	0800a3b9 	.word	0x0800a3b9
 800a3e4:	0800a3b9 	.word	0x0800a3b9
 800a3e8:	0800a43d 	.word	0x0800a43d
 800a3ec:	0800a3b9 	.word	0x0800a3b9
 800a3f0:	0800a3b9 	.word	0x0800a3b9
 800a3f4:	0800a3b9 	.word	0x0800a3b9
 800a3f8:	0800a3b9 	.word	0x0800a3b9
 800a3fc:	0800a54b 	.word	0x0800a54b
 800a400:	0800a46d 	.word	0x0800a46d
 800a404:	0800a52d 	.word	0x0800a52d
 800a408:	0800a3b9 	.word	0x0800a3b9
 800a40c:	0800a3b9 	.word	0x0800a3b9
 800a410:	0800a56d 	.word	0x0800a56d
 800a414:	0800a3b9 	.word	0x0800a3b9
 800a418:	0800a46d 	.word	0x0800a46d
 800a41c:	0800a3b9 	.word	0x0800a3b9
 800a420:	0800a3b9 	.word	0x0800a3b9
 800a424:	0800a535 	.word	0x0800a535
 800a428:	680b      	ldr	r3, [r1, #0]
 800a42a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a42e:	1d1a      	adds	r2, r3, #4
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	600a      	str	r2, [r1, #0]
 800a434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a438:	2301      	movs	r3, #1
 800a43a:	e0a4      	b.n	800a586 <_printf_i+0x1f6>
 800a43c:	6825      	ldr	r5, [r4, #0]
 800a43e:	6808      	ldr	r0, [r1, #0]
 800a440:	062e      	lsls	r6, r5, #24
 800a442:	f100 0304 	add.w	r3, r0, #4
 800a446:	d50a      	bpl.n	800a45e <_printf_i+0xce>
 800a448:	6805      	ldr	r5, [r0, #0]
 800a44a:	600b      	str	r3, [r1, #0]
 800a44c:	2d00      	cmp	r5, #0
 800a44e:	da03      	bge.n	800a458 <_printf_i+0xc8>
 800a450:	232d      	movs	r3, #45	; 0x2d
 800a452:	426d      	negs	r5, r5
 800a454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a458:	230a      	movs	r3, #10
 800a45a:	485e      	ldr	r0, [pc, #376]	; (800a5d4 <_printf_i+0x244>)
 800a45c:	e019      	b.n	800a492 <_printf_i+0x102>
 800a45e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a462:	6805      	ldr	r5, [r0, #0]
 800a464:	600b      	str	r3, [r1, #0]
 800a466:	bf18      	it	ne
 800a468:	b22d      	sxthne	r5, r5
 800a46a:	e7ef      	b.n	800a44c <_printf_i+0xbc>
 800a46c:	680b      	ldr	r3, [r1, #0]
 800a46e:	6825      	ldr	r5, [r4, #0]
 800a470:	1d18      	adds	r0, r3, #4
 800a472:	6008      	str	r0, [r1, #0]
 800a474:	0628      	lsls	r0, r5, #24
 800a476:	d501      	bpl.n	800a47c <_printf_i+0xec>
 800a478:	681d      	ldr	r5, [r3, #0]
 800a47a:	e002      	b.n	800a482 <_printf_i+0xf2>
 800a47c:	0669      	lsls	r1, r5, #25
 800a47e:	d5fb      	bpl.n	800a478 <_printf_i+0xe8>
 800a480:	881d      	ldrh	r5, [r3, #0]
 800a482:	2f6f      	cmp	r7, #111	; 0x6f
 800a484:	bf0c      	ite	eq
 800a486:	2308      	moveq	r3, #8
 800a488:	230a      	movne	r3, #10
 800a48a:	4852      	ldr	r0, [pc, #328]	; (800a5d4 <_printf_i+0x244>)
 800a48c:	2100      	movs	r1, #0
 800a48e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a492:	6866      	ldr	r6, [r4, #4]
 800a494:	2e00      	cmp	r6, #0
 800a496:	bfa8      	it	ge
 800a498:	6821      	ldrge	r1, [r4, #0]
 800a49a:	60a6      	str	r6, [r4, #8]
 800a49c:	bfa4      	itt	ge
 800a49e:	f021 0104 	bicge.w	r1, r1, #4
 800a4a2:	6021      	strge	r1, [r4, #0]
 800a4a4:	b90d      	cbnz	r5, 800a4aa <_printf_i+0x11a>
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	d04d      	beq.n	800a546 <_printf_i+0x1b6>
 800a4aa:	4616      	mov	r6, r2
 800a4ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4b0:	fb03 5711 	mls	r7, r3, r1, r5
 800a4b4:	5dc7      	ldrb	r7, [r0, r7]
 800a4b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4ba:	462f      	mov	r7, r5
 800a4bc:	42bb      	cmp	r3, r7
 800a4be:	460d      	mov	r5, r1
 800a4c0:	d9f4      	bls.n	800a4ac <_printf_i+0x11c>
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	d10b      	bne.n	800a4de <_printf_i+0x14e>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	07df      	lsls	r7, r3, #31
 800a4ca:	d508      	bpl.n	800a4de <_printf_i+0x14e>
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	6861      	ldr	r1, [r4, #4]
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	bfde      	ittt	le
 800a4d4:	2330      	movle	r3, #48	; 0x30
 800a4d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4de:	1b92      	subs	r2, r2, r6
 800a4e0:	6122      	str	r2, [r4, #16]
 800a4e2:	464b      	mov	r3, r9
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	f8cd a000 	str.w	sl, [sp]
 800a4ec:	aa03      	add	r2, sp, #12
 800a4ee:	f7ff fedf 	bl	800a2b0 <_printf_common>
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d14c      	bne.n	800a590 <_printf_i+0x200>
 800a4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fa:	b004      	add	sp, #16
 800a4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a500:	4834      	ldr	r0, [pc, #208]	; (800a5d4 <_printf_i+0x244>)
 800a502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a506:	680e      	ldr	r6, [r1, #0]
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a50e:	061f      	lsls	r7, r3, #24
 800a510:	600e      	str	r6, [r1, #0]
 800a512:	d514      	bpl.n	800a53e <_printf_i+0x1ae>
 800a514:	07d9      	lsls	r1, r3, #31
 800a516:	bf44      	itt	mi
 800a518:	f043 0320 	orrmi.w	r3, r3, #32
 800a51c:	6023      	strmi	r3, [r4, #0]
 800a51e:	b91d      	cbnz	r5, 800a528 <_printf_i+0x198>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	f023 0320 	bic.w	r3, r3, #32
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	2310      	movs	r3, #16
 800a52a:	e7af      	b.n	800a48c <_printf_i+0xfc>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	f043 0320 	orr.w	r3, r3, #32
 800a532:	6023      	str	r3, [r4, #0]
 800a534:	2378      	movs	r3, #120	; 0x78
 800a536:	4828      	ldr	r0, [pc, #160]	; (800a5d8 <_printf_i+0x248>)
 800a538:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a53c:	e7e3      	b.n	800a506 <_printf_i+0x176>
 800a53e:	065e      	lsls	r6, r3, #25
 800a540:	bf48      	it	mi
 800a542:	b2ad      	uxthmi	r5, r5
 800a544:	e7e6      	b.n	800a514 <_printf_i+0x184>
 800a546:	4616      	mov	r6, r2
 800a548:	e7bb      	b.n	800a4c2 <_printf_i+0x132>
 800a54a:	680b      	ldr	r3, [r1, #0]
 800a54c:	6826      	ldr	r6, [r4, #0]
 800a54e:	1d1d      	adds	r5, r3, #4
 800a550:	6960      	ldr	r0, [r4, #20]
 800a552:	600d      	str	r5, [r1, #0]
 800a554:	0635      	lsls	r5, r6, #24
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	d501      	bpl.n	800a55e <_printf_i+0x1ce>
 800a55a:	6018      	str	r0, [r3, #0]
 800a55c:	e002      	b.n	800a564 <_printf_i+0x1d4>
 800a55e:	0671      	lsls	r1, r6, #25
 800a560:	d5fb      	bpl.n	800a55a <_printf_i+0x1ca>
 800a562:	8018      	strh	r0, [r3, #0]
 800a564:	2300      	movs	r3, #0
 800a566:	4616      	mov	r6, r2
 800a568:	6123      	str	r3, [r4, #16]
 800a56a:	e7ba      	b.n	800a4e2 <_printf_i+0x152>
 800a56c:	680b      	ldr	r3, [r1, #0]
 800a56e:	1d1a      	adds	r2, r3, #4
 800a570:	600a      	str	r2, [r1, #0]
 800a572:	681e      	ldr	r6, [r3, #0]
 800a574:	2100      	movs	r1, #0
 800a576:	4630      	mov	r0, r6
 800a578:	6862      	ldr	r2, [r4, #4]
 800a57a:	f000 f831 	bl	800a5e0 <memchr>
 800a57e:	b108      	cbz	r0, 800a584 <_printf_i+0x1f4>
 800a580:	1b80      	subs	r0, r0, r6
 800a582:	6060      	str	r0, [r4, #4]
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	2300      	movs	r3, #0
 800a58a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a58e:	e7a8      	b.n	800a4e2 <_printf_i+0x152>
 800a590:	4632      	mov	r2, r6
 800a592:	4649      	mov	r1, r9
 800a594:	4640      	mov	r0, r8
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	47d0      	blx	sl
 800a59a:	3001      	adds	r0, #1
 800a59c:	d0ab      	beq.n	800a4f6 <_printf_i+0x166>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	079b      	lsls	r3, r3, #30
 800a5a2:	d413      	bmi.n	800a5cc <_printf_i+0x23c>
 800a5a4:	68e0      	ldr	r0, [r4, #12]
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	4298      	cmp	r0, r3
 800a5aa:	bfb8      	it	lt
 800a5ac:	4618      	movlt	r0, r3
 800a5ae:	e7a4      	b.n	800a4fa <_printf_i+0x16a>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	4632      	mov	r2, r6
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	47d0      	blx	sl
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	d09b      	beq.n	800a4f6 <_printf_i+0x166>
 800a5be:	3501      	adds	r5, #1
 800a5c0:	68e3      	ldr	r3, [r4, #12]
 800a5c2:	9903      	ldr	r1, [sp, #12]
 800a5c4:	1a5b      	subs	r3, r3, r1
 800a5c6:	42ab      	cmp	r3, r5
 800a5c8:	dcf2      	bgt.n	800a5b0 <_printf_i+0x220>
 800a5ca:	e7eb      	b.n	800a5a4 <_printf_i+0x214>
 800a5cc:	2500      	movs	r5, #0
 800a5ce:	f104 0619 	add.w	r6, r4, #25
 800a5d2:	e7f5      	b.n	800a5c0 <_printf_i+0x230>
 800a5d4:	0800a911 	.word	0x0800a911
 800a5d8:	0800a922 	.word	0x0800a922

0800a5dc <__retarget_lock_acquire_recursive>:
 800a5dc:	4770      	bx	lr

0800a5de <__retarget_lock_release_recursive>:
 800a5de:	4770      	bx	lr

0800a5e0 <memchr>:
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	b2c9      	uxtb	r1, r1
 800a5e6:	4402      	add	r2, r0
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	d101      	bne.n	800a5f2 <memchr+0x12>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e003      	b.n	800a5fa <memchr+0x1a>
 800a5f2:	7804      	ldrb	r4, [r0, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	428c      	cmp	r4, r1
 800a5f8:	d1f6      	bne.n	800a5e8 <memchr+0x8>
 800a5fa:	bd10      	pop	{r4, pc}

0800a5fc <memmove>:
 800a5fc:	4288      	cmp	r0, r1
 800a5fe:	b510      	push	{r4, lr}
 800a600:	eb01 0402 	add.w	r4, r1, r2
 800a604:	d902      	bls.n	800a60c <memmove+0x10>
 800a606:	4284      	cmp	r4, r0
 800a608:	4623      	mov	r3, r4
 800a60a:	d807      	bhi.n	800a61c <memmove+0x20>
 800a60c:	1e43      	subs	r3, r0, #1
 800a60e:	42a1      	cmp	r1, r4
 800a610:	d008      	beq.n	800a624 <memmove+0x28>
 800a612:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a61a:	e7f8      	b.n	800a60e <memmove+0x12>
 800a61c:	4601      	mov	r1, r0
 800a61e:	4402      	add	r2, r0
 800a620:	428a      	cmp	r2, r1
 800a622:	d100      	bne.n	800a626 <memmove+0x2a>
 800a624:	bd10      	pop	{r4, pc}
 800a626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a62a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a62e:	e7f7      	b.n	800a620 <memmove+0x24>

0800a630 <_realloc_r>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	4607      	mov	r7, r0
 800a634:	4614      	mov	r4, r2
 800a636:	460e      	mov	r6, r1
 800a638:	b921      	cbnz	r1, 800a644 <_realloc_r+0x14>
 800a63a:	4611      	mov	r1, r2
 800a63c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a640:	f7ff bc44 	b.w	8009ecc <_malloc_r>
 800a644:	b922      	cbnz	r2, 800a650 <_realloc_r+0x20>
 800a646:	f7ff fbf5 	bl	8009e34 <_free_r>
 800a64a:	4625      	mov	r5, r4
 800a64c:	4628      	mov	r0, r5
 800a64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a650:	f000 f814 	bl	800a67c <_malloc_usable_size_r>
 800a654:	42a0      	cmp	r0, r4
 800a656:	d20f      	bcs.n	800a678 <_realloc_r+0x48>
 800a658:	4621      	mov	r1, r4
 800a65a:	4638      	mov	r0, r7
 800a65c:	f7ff fc36 	bl	8009ecc <_malloc_r>
 800a660:	4605      	mov	r5, r0
 800a662:	2800      	cmp	r0, #0
 800a664:	d0f2      	beq.n	800a64c <_realloc_r+0x1c>
 800a666:	4631      	mov	r1, r6
 800a668:	4622      	mov	r2, r4
 800a66a:	f7ff fbcd 	bl	8009e08 <memcpy>
 800a66e:	4631      	mov	r1, r6
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff fbdf 	bl	8009e34 <_free_r>
 800a676:	e7e9      	b.n	800a64c <_realloc_r+0x1c>
 800a678:	4635      	mov	r5, r6
 800a67a:	e7e7      	b.n	800a64c <_realloc_r+0x1c>

0800a67c <_malloc_usable_size_r>:
 800a67c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a680:	1f18      	subs	r0, r3, #4
 800a682:	2b00      	cmp	r3, #0
 800a684:	bfbc      	itt	lt
 800a686:	580b      	ldrlt	r3, [r1, r0]
 800a688:	18c0      	addlt	r0, r0, r3
 800a68a:	4770      	bx	lr

0800a68c <_init>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	bf00      	nop
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr

0800a698 <_fini>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	bf00      	nop
 800a69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69e:	bc08      	pop	{r3}
 800a6a0:	469e      	mov	lr, r3
 800a6a2:	4770      	bx	lr
