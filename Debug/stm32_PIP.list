
stm32_PIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009224  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009568  08009568  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08009568  08009568  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009568  08009568  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001010  20000084  080095f4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001094  080095f4  00021094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5fd  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dde  00000000  00000000  0003d6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00041488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  00042ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d8  00000000  00000000  00043fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019000  00000000  00000000  0005f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b46a  00000000  00000000  00078188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001135f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006120  00000000  00000000  00113648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	0800931c 	.word	0x0800931c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	0800931c 	.word	0x0800931c

08000150 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000162:	4619      	mov	r1, r3
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	78fa      	ldrb	r2, [r7, #3]
 8000168:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000170:	3301      	adds	r3, #1
 8000172:	425a      	negs	r2, r3
 8000174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000178:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800017c:	bf58      	it	pl
 800017e:	4253      	negpl	r3, r2
 8000180:	b2da      	uxtb	r2, r3
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800018e:	2b80      	cmp	r3, #128	; 0x80
 8000190:	d113      	bne.n	80001ba <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2201      	movs	r2, #1
 8000196:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80001a0:	3301      	adds	r3, #1
 80001a2:	425a      	negs	r2, r3
 80001a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80001a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80001ac:	bf58      	it	pl
 80001ae:	4253      	negpl	r3, r2
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 80001b8:	e00b      	b.n	80001d2 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2200      	movs	r2, #0
 80001be:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80001c8:	3301      	adds	r3, #1
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80001d2:	bf00      	nop
 80001d4:	370c      	adds	r7, #12
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80001ec:	461a      	mov	r2, r3
 80001ee:	6839      	ldr	r1, [r7, #0]
 80001f0:	6878      	ldr	r0, [r7, #4]
 80001f2:	f000 f805 	bl	8000200 <RingGetNBytes>
 80001f6:	4603      	mov	r3, r0
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4613      	mov	r3, r2
 800020c:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <RingGetNBytes+0x1e>
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <RingGetNBytes+0x22>
 800021e:	2300      	movs	r3, #0
 8000220:	e03e      	b.n	80002a0 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b80      	cmp	r3, #128	; 0x80
 8000226:	d901      	bls.n	800022c <RingGetNBytes+0x2c>
 8000228:	2300      	movs	r3, #0
 800022a:	e039      	b.n	80002a0 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800022c:	2300      	movs	r3, #0
 800022e:	75fb      	strb	r3, [r7, #23]
 8000230:	e01b      	b.n	800026a <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000238:	4619      	mov	r1, r3
 800023a:	7dfb      	ldrb	r3, [r7, #23]
 800023c:	68ba      	ldr	r2, [r7, #8]
 800023e:	4413      	add	r3, r2
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	5c52      	ldrb	r2, [r2, r1]
 8000244:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800024c:	3301      	adds	r3, #1
 800024e:	425a      	negs	r2, r3
 8000250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000254:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000258:	bf58      	it	pl
 800025a:	4253      	negpl	r3, r2
 800025c:	b2da      	uxtb	r2, r3
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000264:	7dfb      	ldrb	r3, [r7, #23]
 8000266:	3301      	adds	r3, #1
 8000268:	75fb      	strb	r3, [r7, #23]
 800026a:	7dfa      	ldrb	r2, [r7, #23]
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	429a      	cmp	r2, r3
 8000270:	d205      	bcs.n	800027e <RingGetNBytes+0x7e>
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000278:	7dfa      	ldrb	r2, [r7, #23]
 800027a:	429a      	cmp	r2, r3
 800027c:	d3d9      	bcc.n	8000232 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000284:	7dfb      	ldrb	r3, [r7, #23]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	b2da      	uxtb	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2200      	movs	r2, #0
 8000294:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f000 f805 	bl	80002a8 <RingClear>

	return uCounter;
 800029e:	7dfb      	ldrb	r3, [r7, #23]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2200      	movs	r2, #0
 80002bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2200      	movs	r2, #0
 80002c4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2200      	movs	r2, #0
 80002cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
	...

080002dc <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af02      	add	r7, sp, #8
 80002e2:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 80002e4:	4b42      	ldr	r3, [pc, #264]	; (80003f0 <ModbusInit+0x114>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d87d      	bhi.n	80003e8 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	33bc      	adds	r3, #188	; 0xbc
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ffd9 	bl	80002a8 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	d109      	bne.n	8000312 <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80002fe:	4a3d      	ldr	r2, [pc, #244]	; (80003f4 <ModbusInit+0x118>)
 8000300:	6879      	ldr	r1, [r7, #4]
 8000302:	483d      	ldr	r0, [pc, #244]	; (80003f8 <ModbusInit+0x11c>)
 8000304:	f005 f8dc 	bl	80054c0 <osThreadNew>
 8000308:	4602      	mov	r2, r0
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000310:	e033      	b.n	800037a <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b04      	cmp	r3, #4
 8000318:	d12e      	bne.n	8000378 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800031a:	4a38      	ldr	r2, [pc, #224]	; (80003fc <ModbusInit+0x120>)
 800031c:	6879      	ldr	r1, [r7, #4]
 800031e:	4838      	ldr	r0, [pc, #224]	; (8000400 <ModbusInit+0x124>)
 8000320:	f005 f8ce 	bl	80054c0 <osThreadNew>
 8000324:	4602      	mov	r2, r0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000332:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800033a:	4a32      	ldr	r2, [pc, #200]	; (8000404 <ModbusInit+0x128>)
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	2200      	movs	r2, #0
 8000340:	4831      	ldr	r0, [pc, #196]	; (8000408 <ModbusInit+0x12c>)
 8000342:	f007 fe3d 	bl	8007fc0 <xTimerCreate>
 8000346:	4602      	mov	r2, r0
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000354:	2b00      	cmp	r3, #0
 8000356:	d100      	bne.n	800035a <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8000358:	e7fe      	b.n	8000358 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800035a:	4a2c      	ldr	r2, [pc, #176]	; (800040c <ModbusInit+0x130>)
 800035c:	2110      	movs	r1, #16
 800035e:	2002      	movs	r0, #2
 8000360:	f005 fa54 	bl	800580c <osMessageQueueNew>
 8000364:	4602      	mov	r2, r0
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000372:	2b00      	cmp	r3, #0
 8000374:	d101      	bne.n	800037a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8000376:	e7fe      	b.n	8000376 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8000378:	e7fe      	b.n	8000378 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000380:	2b00      	cmp	r3, #0
 8000382:	d100      	bne.n	8000386 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8000384:	e7fe      	b.n	8000384 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800038c:	4a20      	ldr	r2, [pc, #128]	; (8000410 <ModbusInit+0x134>)
 800038e:	9200      	str	r2, [sp, #0]
 8000390:	2200      	movs	r2, #0
 8000392:	2105      	movs	r1, #5
 8000394:	481f      	ldr	r0, [pc, #124]	; (8000414 <ModbusInit+0x138>)
 8000396:	f007 fe13 	bl	8007fc0 <xTimerCreate>
 800039a:	4602      	mov	r2, r0
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d100      	bne.n	80003ae <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 80003ac:	e7fe      	b.n	80003ac <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 80003ae:	4a1a      	ldr	r2, [pc, #104]	; (8000418 <ModbusInit+0x13c>)
 80003b0:	2101      	movs	r1, #1
 80003b2:	2001      	movs	r0, #1
 80003b4:	f005 f98e 	bl	80056d4 <osSemaphoreNew>
 80003b8:	4602      	mov	r2, r0
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d100      	bne.n	80003cc <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 80003ca:	e7fe      	b.n	80003ca <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <ModbusInit+0x114>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <ModbusInit+0x140>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <ModbusInit+0x114>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <ModbusInit+0x114>)
 80003e4:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80003e6:	e000      	b.n	80003ea <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 80003e8:	e7fe      	b.n	80003e8 <ModbusInit+0x10c>
}
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	200000a0 	.word	0x200000a0
 80003f4:	0800945c 	.word	0x0800945c
 80003f8:	08000609 	.word	0x08000609
 80003fc:	08009480 	.word	0x08009480
 8000400:	08000a7d 	.word	0x08000a7d
 8000404:	080005ad 	.word	0x080005ad
 8000408:	08009378 	.word	0x08009378
 800040c:	08009444 	.word	0x08009444
 8000410:	08000529 	.word	0x08000529
 8000414:	08009388 	.word	0x08009388
 8000418:	080094a4 	.word	0x080094a4
 800041c:	20000da0 	.word	0x20000da0

08000420 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800042e:	2b01      	cmp	r3, #1
 8000430:	d00f      	beq.n	8000452 <ModbusStart+0x32>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000438:	2b03      	cmp	r3, #3
 800043a:	d00a      	beq.n	8000452 <ModbusStart+0x32>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000442:	2b02      	cmp	r3, #2
 8000444:	d005      	beq.n	8000452 <ModbusStart+0x32>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800044c:	2b04      	cmp	r3, #4
 800044e:	d000      	beq.n	8000452 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8000450:	e7fe      	b.n	8000450 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000458:	2b04      	cmp	r3, #4
 800045a:	d100      	bne.n	800045e <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 800045c:	e7fe      	b.n	800045c <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000464:	2b01      	cmp	r3, #1
 8000466:	d004      	beq.n	8000472 <ModbusStart+0x52>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800046e:	2b04      	cmp	r3, #4
 8000470:	d13c      	bne.n	80004ec <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	68d8      	ldr	r0, [r3, #12]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	8a1b      	ldrh	r3, [r3, #16]
 8000482:	2200      	movs	r2, #0
 8000484:	4619      	mov	r1, r3
 8000486:	f002 ff69 	bl	800335c <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d105      	bne.n	800049e <ModbusStart+0x7e>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000498:	2b00      	cmp	r3, #0
 800049a:	d100      	bne.n	800049e <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800049c:	e7fe      	b.n	800049c <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800049e:	bf00      	nop
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 fd58 	bl	8004f5a <HAL_UART_GetState>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b20      	cmp	r3, #32
 80004ae:	d1f7      	bne.n	80004a0 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6858      	ldr	r0, [r3, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	33a6      	adds	r3, #166	; 0xa6
 80004b8:	2201      	movs	r2, #1
 80004ba:	4619      	mov	r1, r3
 80004bc:	f004 fa86 	bl	80049cc <HAL_UART_Receive_IT>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d000      	beq.n	80004c8 <ModbusStart+0xa8>
          {
                while(1)
 80004c6:	e7fe      	b.n	80004c6 <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	7a1b      	ldrb	r3, [r3, #8]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d004      	beq.n	80004da <ModbusStart+0xba>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d100      	bne.n	80004da <ModbusStart+0xba>
          {
        	  while(1)
 80004d8:	e7fe      	b.n	80004d8 <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	7a1b      	ldrb	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d104      	bne.n	80004ec <ModbusStart+0xcc>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d100      	bne.n	80004ec <ModbusStart+0xcc>
          {
             	  while(1)
 80004ea:	e7fe      	b.n	80004ea <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e02a      	b.n	800058c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8000536:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <vTimerCallbackT35+0x7c>)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	d11e      	bne.n	8000586 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8000548:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <vTimerCallbackT35+0x7c>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b04      	cmp	r3, #4
 8000554:	d10c      	bne.n	8000570 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8000556:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <vTimerCallbackT35+0x7c>)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8000562:	2300      	movs	r3, #0
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	2200      	movs	r2, #0
 800056a:	2103      	movs	r1, #3
 800056c:	f007 fd7c 	bl	8008068 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8000570:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <vTimerCallbackT35+0x7c>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000578:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800057c:	2300      	movs	r3, #0
 800057e:	2203      	movs	r2, #3
 8000580:	2100      	movs	r1, #0
 8000582:	f007 fb13 	bl	8007bac <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <vTimerCallbackT35+0x80>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbce      	blt.n	8000536 <vTimerCallbackT35+0xe>
		}

	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000da0 	.word	0x20000da0
 80005a8:	200000a0 	.word	0x200000a0

080005ac <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e017      	b.n	80005ea <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 80005ba:	4a11      	ldr	r2, [pc, #68]	; (8000600 <vTimerCallbackTimeout+0x54>)
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d10b      	bne.n	80005e4 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <vTimerCallbackTimeout+0x54>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d4:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80005d8:	2300      	movs	r3, #0
 80005da:	2203      	movs	r2, #3
 80005dc:	f06f 0107 	mvn.w	r1, #7
 80005e0:	f007 fae4 	bl	8007bac <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <vTimerCallbackTimeout+0x58>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4293      	cmp	r3, r2
 80005f4:	dbe1      	blt.n	80005ba <vTimerCallbackTimeout+0xe>
		}

	}

}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000da0 	.word	0x20000da0
 8000604:	200000a0 	.word	0x200000a0

08000608 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2200      	movs	r2, #0
 8000618:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000620:	2b01      	cmp	r3, #1
 8000622:	d004      	beq.n	800062e <StartTaskModbusSlave+0x26>
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800062a:	2b04      	cmp	r3, #4
 800062c:	d117      	bne.n	800065e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800062e:	f04f 31ff 	mov.w	r1, #4294967295
 8000632:	2001      	movs	r0, #1
 8000634:	f007 fa72 	bl	8007b1c <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f000 fbe9 	bl	8000e10 <getRxBuffer>
 800063e:	4603      	mov	r3, r0
 8000640:	f113 0f03 	cmn.w	r3, #3
 8000644:	d10b      	bne.n	800065e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	22fd      	movs	r2, #253	; 0xfd
 800064a:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000652:	3301      	adds	r3, #1
 8000654:	b29a      	uxth	r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 800065c:	e0a1      	b.n	80007a2 <StartTaskModbusSlave+0x19a>
	  }
	   //modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
   }

   if (modH->u8BufferSize < 7)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000664:	2b06      	cmp	r3, #6
 8000666:	d80b      	bhi.n	8000680 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	22fa      	movs	r2, #250	; 0xfa
 800066c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000674:	3301      	adds	r3, #1
 8000676:	b29a      	uxth	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	  {
		  netconn_close(modH->newconn);
		  netconn_delete(modH->newconn);
	  }
  #endif
	  continue;
 800067e:	e090      	b.n	80007a2 <StartTaskModbusSlave+0x19a>
    }

		// check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	7cda      	ldrb	r2, [r3, #19]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	7a1b      	ldrb	r3, [r3, #8]
 8000688:	429a      	cmp	r2, r3
 800068a:	f040 8089 	bne.w	80007a0 <StartTaskModbusSlave+0x198>
        #endif
		continue;
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f000 fc08 	bl	8000ea4 <validateRequest>
 8000694:	4603      	mov	r3, r0
 8000696:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8000698:	7afb      	ldrb	r3, [r7, #11]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00c      	beq.n	80006b8 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800069e:	7afb      	ldrb	r3, [r7, #11]
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fda0 	bl	80011e8 <buildException>
			sendTxBuffer(modH);
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f000 fdbb 	bl	8001224 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 80006ae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	749a      	strb	r2, [r3, #18]
		{
		    netconn_close(modH->newconn);
		  	netconn_delete(modH->newconn);
		}
        #endif
		continue;
 80006b6:	e074      	b.n	80007a2 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2200      	movs	r2, #0
 80006bc:	749a      	strb	r2, [r3, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80006c4:	f04f 31ff 	mov.w	r1, #4294967295
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 ff0d 	bl	80064e8 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	7d1b      	ldrb	r3, [r3, #20]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d859      	bhi.n	800078c <StartTaskModbusSlave+0x184>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <StartTaskModbusSlave+0xd8>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	08000721 	.word	0x08000721
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000733 	.word	0x08000733
 80006ec:	08000733 	.word	0x08000733
 80006f0:	08000745 	.word	0x08000745
 80006f4:	08000757 	.word	0x08000757
 80006f8:	0800078d 	.word	0x0800078d
 80006fc:	0800078d 	.word	0x0800078d
 8000700:	0800078d 	.word	0x0800078d
 8000704:	0800078d 	.word	0x0800078d
 8000708:	0800078d 	.word	0x0800078d
 800070c:	0800078d 	.word	0x0800078d
 8000710:	0800078d 	.word	0x0800078d
 8000714:	0800078d 	.word	0x0800078d
 8000718:	08000769 	.word	0x08000769
 800071c:	0800077b 	.word	0x0800077b
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f000 fe0f 	bl	8001344 <process_FC1>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000730:	e02d      	b.n	800078e <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8000732:	68f8      	ldr	r0, [r7, #12]
 8000734:	f000 febb 	bl	80014ae <process_FC3>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000742:	e024      	b.n	800078e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f000 ff1d 	bl	8001584 <process_FC5>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000754:	e01b      	b.n	800078e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f000 ff6d 	bl	8001636 <process_FC6>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000766:	e012      	b.n	800078e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f000 ff96 	bl	800169a <process_FC15>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000778:	e009      	b.n	800078e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f001 f81b 	bl	80017b6 <process_FC16>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800078a:	e000      	b.n	800078e <StartTaskModbusSlave+0x186>
			default:
				break;
 800078c:	bf00      	nop
	    netconn_close(modH->newconn);
	  	netconn_delete(modH->newconn);
	 }
   #endif

	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000794:	2300      	movs	r3, #0
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	f005 fc2f 	bl	8005ffc <xQueueGenericSend>

	 continue;
 800079e:	e000      	b.n	80007a2 <StartTaskModbusSlave+0x19a>
		continue;
 80007a0:	bf00      	nop
  {
 80007a2:	e737      	b.n	8000614 <StartTaskModbusSlave+0xc>

080007a4 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80007a4:	b084      	sub	sp, #16
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b084      	sub	sp, #16
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	f107 001c 	add.w	r0, r7, #28
 80007b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 fe8f 	bl	80064e8 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7a1b      	ldrb	r3, [r3, #8]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SendQuery+0x32>
 80007d2:	23ff      	movs	r3, #255	; 0xff
 80007d4:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SendQuery+0x40>
 80007e0:	23fe      	movs	r3, #254	; 0xfe
 80007e2:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80007e4:	7f3b      	ldrb	r3, [r7, #28]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <SendQuery+0x4c>
 80007ea:	7f3b      	ldrb	r3, [r7, #28]
 80007ec:	2bf7      	cmp	r3, #247	; 0xf7
 80007ee:	d901      	bls.n	80007f4 <SendQuery+0x50>
 80007f0:	23f7      	movs	r3, #247	; 0xf7
 80007f2:	73bb      	strb	r3, [r7, #14]

	if(error)
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 80007fa:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000808:	2300      	movs	r3, #0
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	f005 fbf5 	bl	8005ffc <xQueueGenericSend>
		 return error;
 8000812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000816:	e129      	b.n	8000a6c <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8000818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8000820:	7f3a      	ldrb	r2, [r7, #28]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8000826:	7f7a      	ldrb	r2, [r7, #29]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800082c:	8bfb      	ldrh	r3, [r7, #30]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	b29b      	uxth	r3, r3
 8000832:	b2da      	uxtb	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8000838:	8bfb      	ldrh	r3, [r7, #30]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8000840:	7f7b      	ldrb	r3, [r7, #29]
 8000842:	3b01      	subs	r3, #1
 8000844:	2b0f      	cmp	r3, #15
 8000846:	f200 80fe 	bhi.w	8000a46 <SendQuery+0x2a2>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <SendQuery+0xac>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000891 	.word	0x08000891
 8000854:	08000891 	.word	0x08000891
 8000858:	08000891 	.word	0x08000891
 800085c:	08000891 	.word	0x08000891
 8000860:	080008af 	.word	0x080008af
 8000864:	080008d1 	.word	0x080008d1
 8000868:	08000a47 	.word	0x08000a47
 800086c:	08000a47 	.word	0x08000a47
 8000870:	08000a47 	.word	0x08000a47
 8000874:	08000a47 	.word	0x08000a47
 8000878:	08000a47 	.word	0x08000a47
 800087c:	08000a47 	.word	0x08000a47
 8000880:	08000a47 	.word	0x08000a47
 8000884:	08000a47 	.word	0x08000a47
 8000888:	080008f3 	.word	0x080008f3
 800088c:	080009b1 	.word	0x080009b1
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000890:	8c3b      	ldrh	r3, [r7, #32]
 8000892:	0a1b      	lsrs	r3, r3, #8
 8000894:	b29b      	uxth	r3, r3
 8000896:	b2da      	uxtb	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800089c:	8c3b      	ldrh	r3, [r7, #32]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2206      	movs	r2, #6
 80008a8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80008ac:	e0cb      	b.n	8000a46 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SendQuery+0x116>
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	e000      	b.n	80008bc <SendQuery+0x118>
 80008ba:	2200      	movs	r2, #0
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2206      	movs	r2, #6
 80008ca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80008ce:	e0ba      	b.n	8000a46 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2206      	movs	r2, #6
 80008ec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80008f0:	e0a9      	b.n	8000a46 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80008f2:	8c3b      	ldrh	r3, [r7, #32]
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 80008fa:	7a7b      	ldrb	r3, [r7, #9]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8000900:	8c3b      	ldrh	r3, [r7, #32]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	b29b      	uxth	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <SendQuery+0x174>
	    {
	        u8bytesno++;
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	3301      	adds	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8000912:	7a7b      	ldrb	r3, [r7, #9]
 8000914:	3301      	adds	r3, #1
 8000916:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000918:	8c3b      	ldrh	r3, [r7, #32]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	b29b      	uxth	r3, r3
 800091e:	b2da      	uxtb	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000924:	8c3b      	ldrh	r3, [r7, #32]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2207      	movs	r2, #7
 8000936:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800093a:	2300      	movs	r3, #0
 800093c:	81bb      	strh	r3, [r7, #12]
 800093e:	e031      	b.n	80009a4 <SendQuery+0x200>
	    {
	        if(i%2)
 8000940:	89bb      	ldrh	r3, [r7, #12]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	b29b      	uxth	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00f      	beq.n	800096c <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800094c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094e:	89bb      	ldrh	r3, [r7, #12]
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	b29b      	uxth	r3, r3
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4413      	add	r3, r2
 8000958:	881a      	ldrh	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000960:	4619      	mov	r1, r3
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	440b      	add	r3, r1
 8000968:	74da      	strb	r2, [r3, #19]
 800096a:	e010      	b.n	800098e <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096e:	89bb      	ldrh	r3, [r7, #12]
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	b29b      	uxth	r3, r3
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29a      	uxth	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000984:	4619      	mov	r1, r3
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	440b      	add	r3, r1
 800098c:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000994:	3301      	adds	r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800099e:	89bb      	ldrh	r3, [r7, #12]
 80009a0:	3301      	adds	r3, #1
 80009a2:	81bb      	strh	r3, [r7, #12]
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	89ba      	ldrh	r2, [r7, #12]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d3c8      	bcc.n	8000940 <SendQuery+0x19c>
	    }
	    break;
 80009ae:	e04a      	b.n	8000a46 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80009b0:	8c3b      	ldrh	r3, [r7, #32]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80009bc:	8c3b      	ldrh	r3, [r7, #32]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80009c4:	8c3b      	ldrh	r3, [r7, #32]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2207      	movs	r2, #7
 80009d4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80009d8:	2300      	movs	r3, #0
 80009da:	817b      	strh	r3, [r7, #10]
 80009dc:	e02e      	b.n	8000a3c <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80009de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e0:	897b      	ldrh	r3, [r7, #10]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80009f2:	4619      	mov	r1, r3
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	440b      	add	r3, r1
 80009fa:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8000a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a0e:	897b      	ldrh	r3, [r7, #10]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	440b      	add	r3, r1
 8000a24:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000a36:	897b      	ldrh	r3, [r7, #10]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	817b      	strh	r3, [r7, #10]
 8000a3c:	8c3b      	ldrh	r3, [r7, #32]
 8000a3e:	897a      	ldrh	r2, [r7, #10]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d3cc      	bcc.n	80009de <SendQuery+0x23a>
	    }
	    break;
 8000a44:	bf00      	nop
	}

	sendTxBuffer(modH);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 fbec 	bl	8001224 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000a52:	2300      	movs	r3, #0
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	f005 fad0 	bl	8005ffc <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	749a      	strb	r2, [r3, #18]
	return 0;
 8000a6a:	2300      	movs	r3, #0


}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a76:	b004      	add	sp, #16
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000a8e:	f107 010c 	add.w	r1, r7, #12
 8000a92:	f04f 32ff 	mov.w	r2, #4294967295
 8000a96:	4618      	mov	r0, r3
 8000a98:	f005 fc46 	bl	8006328 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000aa8:	f7ff fe7c 	bl	80007a4 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f007 f833 	bl	8007b1c <ulTaskNotifyTake>
 8000ab6:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	2200      	movs	r2, #0
 8000abc:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d018      	beq.n	8000af6 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	22f8      	movs	r2, #248	; 0xf8
 8000ad0:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000ae2:	69b8      	ldr	r0, [r7, #24]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2300      	movs	r3, #0
 8000aee:	2203      	movs	r2, #3
 8000af0:	f007 f85c 	bl	8007bac <xTaskGenericNotify>
    	  continue;
 8000af4:	e097      	b.n	8000c26 <StartTaskModbusMaster+0x1aa>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8000af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000af8:	f000 f98a 	bl	8000e10 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000b02:	2b05      	cmp	r3, #5
 8000b04:	d818      	bhi.n	8000b38 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	22fa      	movs	r2, #250	; 0xfa
 8000b12:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000b24:	69b8      	ldr	r0, [r7, #24]
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2203      	movs	r2, #3
 8000b32:	f007 f83b 	bl	8007bac <xTaskGenericNotify>
		  continue;
 8000b36:	e076      	b.n	8000c26 <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8000b3e:	2300      	movs	r3, #0
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2300      	movs	r3, #0
 8000b44:	2200      	movs	r2, #0
 8000b46:	2103      	movs	r1, #3
 8000b48:	f007 fa8e 	bl	8008068 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8000b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b4e:	f000 f8f1 	bl	8000d34 <validateAnswer>
 8000b52:	4603      	mov	r3, r0
 8000b54:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8000b56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d010      	beq.n	8000b80 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	7ffa      	ldrb	r2, [r7, #31]
 8000b6a:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000b6c:	69b8      	ldr	r0, [r7, #24]
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2300      	movs	r3, #0
 8000b78:	2203      	movs	r2, #3
 8000b7a:	f007 f817 	bl	8007bac <xTaskGenericNotify>
	     continue;
 8000b7e:	e052      	b.n	8000c26 <StartTaskModbusMaster+0x1aa>
	  }

	  modH->i8lastError = u8exception;
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	7ffa      	ldrb	r2, [r7, #31]
 8000b84:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	4618      	mov	r0, r3
 8000b92:	f005 fca9 	bl	80064e8 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	7d1b      	ldrb	r3, [r3, #20]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d82b      	bhi.n	8000bf8 <StartTaskModbusMaster+0x17c>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <StartTaskModbusMaster+0x12c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000be9 	.word	0x08000be9
 8000bac:	08000be9 	.word	0x08000be9
 8000bb0:	08000bf1 	.word	0x08000bf1
 8000bb4:	08000bf1 	.word	0x08000bf1
 8000bb8:	08000bf9 	.word	0x08000bf9
 8000bbc:	08000bf9 	.word	0x08000bf9
 8000bc0:	08000bf9 	.word	0x08000bf9
 8000bc4:	08000bf9 	.word	0x08000bf9
 8000bc8:	08000bf9 	.word	0x08000bf9
 8000bcc:	08000bf9 	.word	0x08000bf9
 8000bd0:	08000bf9 	.word	0x08000bf9
 8000bd4:	08000bf9 	.word	0x08000bf9
 8000bd8:	08000bf9 	.word	0x08000bf9
 8000bdc:	08000bf9 	.word	0x08000bf9
 8000be0:	08000bf9 	.word	0x08000bf9
 8000be4:	08000bf9 	.word	0x08000bf9
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8000be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bea:	f000 f81d 	bl	8000c28 <get_FC1>
	      break;
 8000bee:	e004      	b.n	8000bfa <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8000bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bf2:	f000 f870 	bl	8000cd6 <get_FC3>
	      break;
 8000bf6:	e000      	b.n	8000bfa <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8000bf8:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	f005 f9f5 	bl	8005ffc <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000c12:	69b8      	ldr	r0, [r7, #24]
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	2203      	movs	r2, #3
 8000c20:	f006 ffc4 	bl	8007bac <xTaskGenericNotify>
	  continue;
 8000c24:	bf00      	nop
  {
 8000c26:	e72f      	b.n	8000a88 <StartTaskModbusMaster+0xc>

08000c28 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000c30:	2303      	movs	r3, #3
 8000c32:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e043      	b.n	8000cc2 <get_FC1+0x9a>

        if(i%2)
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01c      	beq.n	8000c80 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	7cd8      	ldrb	r0, [r3, #19]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	085b      	lsrs	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	b2d9      	uxtb	r1, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	18d4      	adds	r4, r2, r3
 8000c76:	f000 fa5f 	bl	8001138 <word>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	8023      	strh	r3, [r4, #0]
 8000c7e:	e01d      	b.n	8000cbc <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	085b      	lsrs	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	b2d8      	uxtb	r0, r3
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	7cd9      	ldrb	r1, [r3, #19]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	085b      	lsrs	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	18d4      	adds	r4, r2, r3
 8000cb4:	f000 fa40 	bl	8001138 <word>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7d5b      	ldrb	r3, [r3, #21]
 8000cc6:	7bfa      	ldrb	r2, [r7, #15]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3b6      	bcc.n	8000c3a <get_FC1+0x12>
        }

     }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}

08000cd6 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8000cd6:	b590      	push	{r4, r7, lr}
 8000cd8:	b085      	sub	sp, #20
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73bb      	strb	r3, [r7, #14]
 8000ce6:	e018      	b.n	8000d1a <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	7cd8      	ldrb	r0, [r3, #19]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	7cd9      	ldrb	r1, [r3, #19]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	18d4      	adds	r4, r2, r3
 8000d06:	f000 fa17 	bl	8001138 <word>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	3302      	adds	r3, #2
 8000d12:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8000d14:	7bbb      	ldrb	r3, [r7, #14]
 8000d16:	3301      	adds	r3, #1
 8000d18:	73bb      	strb	r3, [r7, #14]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7d5b      	ldrb	r3, [r3, #21]
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d3df      	bcc.n	8000ce8 <get_FC3+0x12>
    }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd90      	pop	{r4, r7, pc}
	...

08000d34 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000d42:	3b02      	subs	r3, #2
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	7cdb      	ldrb	r3, [r3, #19]
 8000d4a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000d54:	3b01      	subs	r3, #1
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	440b      	add	r3, r1
 8000d5a:	7cdb      	ldrb	r3, [r3, #19]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8000d62:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 0213 	add.w	r2, r3, #19
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000d70:	3b02      	subs	r3, #2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4619      	mov	r1, r3
 8000d76:	4610      	mov	r0, r2
 8000d78:	f000 f9f0 	bl	800115c <calcCRC>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	89bb      	ldrh	r3, [r7, #12]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d009      	beq.n	8000d9a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8000d96:	23fc      	movs	r3, #252	; 0xfc
 8000d98:	e034      	b.n	8000e04 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7d1b      	ldrb	r3, [r3, #20]
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	da09      	bge.n	8000db8 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000daa:	3301      	adds	r3, #1
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 8000db4:	23fb      	movs	r3, #251	; 0xfb
 8000db6:	e025      	b.n	8000e04 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73bb      	strb	r3, [r7, #14]
 8000dc0:	e00c      	b.n	8000ddc <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8000dc2:	7bbb      	ldrb	r3, [r7, #14]
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <validateAnswer+0xd8>)
 8000dc6:	5cd2      	ldrb	r2, [r2, r3]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7d1b      	ldrb	r3, [r3, #20]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d102      	bne.n	8000dd6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
            break;
 8000dd4:	e005      	b.n	8000de2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	73bb      	strb	r3, [r7, #14]
 8000ddc:	7bbb      	ldrb	r3, [r7, #14]
 8000dde:	2b07      	cmp	r3, #7
 8000de0:	d9ef      	bls.n	8000dc2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d009      	beq.n	8000e02 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000df4:	3301      	adds	r3, #1
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	080094b4 	.word	0x080094b4

08000e10 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d104      	bne.n	8000e2c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fe00 	bl	8004a2c <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d008      	beq.n	8000e48 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	33bc      	adds	r3, #188	; 0xbc
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fa34 	bl	80002a8 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8000e40:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000e44:	81fb      	strh	r3, [r7, #14]
 8000e46:	e019      	b.n	8000e7c <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3313      	adds	r3, #19
 8000e52:	4619      	mov	r1, r3
 8000e54:	4610      	mov	r0, r2
 8000e56:	f7ff f9c1 	bl	80001dc <RingGetAllBytes>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000e7a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d107      	bne.n	8000e96 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6858      	ldr	r0, [r3, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	33a6      	adds	r3, #166	; 0xa6
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4619      	mov	r1, r3
 8000e92:	f003 fd9b 	bl	80049cc <HAL_UART_Receive_IT>
	}

    return i16result;
 8000e96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	7cdb      	ldrb	r3, [r3, #19]
 8000eba:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	440b      	add	r3, r1
 8000eca:	7cdb      	ldrb	r3, [r3, #19]
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8000ed2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f103 0213 	add.w	r2, r3, #19
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000ee0:	3b02      	subs	r3, #2
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f000 f938 	bl	800115c <calcCRC>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	893b      	ldrh	r3, [r7, #8]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d009      	beq.n	8000f0a <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000efc:	3301      	adds	r3, #1
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8000f06:	23fc      	movs	r3, #252	; 0xfc
 8000f08:	e10f      	b.n	800112a <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73bb      	strb	r3, [r7, #14]
 8000f12:	e00c      	b.n	8000f2e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	4a87      	ldr	r2, [pc, #540]	; (8001134 <validateRequest+0x290>)
 8000f18:	5cd2      	ldrb	r2, [r2, r3]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7d1b      	ldrb	r3, [r3, #20]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d102      	bne.n	8000f28 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
	            break;
 8000f26:	e005      	b.n	8000f34 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73bb      	strb	r3, [r7, #14]
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d9ef      	bls.n	8000f14 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f083 0301 	eor.w	r3, r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000f46:	3301      	adds	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0ea      	b.n	800112a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7d1b      	ldrb	r3, [r3, #20]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	f200 80e0 	bhi.w	8001128 <validateRequest+0x284>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <validateRequest+0xcc>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000fb1 	.word	0x08000fb1
 8000f74:	08000fb1 	.word	0x08000fb1
 8000f78:	080010c9 	.word	0x080010c9
 8000f7c:	080010c9 	.word	0x080010c9
 8000f80:	0800105d 	.word	0x0800105d
 8000f84:	080010a5 	.word	0x080010a5
 8000f88:	08001129 	.word	0x08001129
 8000f8c:	08001129 	.word	0x08001129
 8000f90:	08001129 	.word	0x08001129
 8000f94:	08001129 	.word	0x08001129
 8000f98:	08001129 	.word	0x08001129
 8000f9c:	08001129 	.word	0x08001129
 8000fa0:	08001129 	.word	0x08001129
 8000fa4:	08001129 	.word	0x08001129
 8000fa8:	08000fb1 	.word	0x08000fb1
 8000fac:	080010c9 	.word	0x080010c9
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7d5a      	ldrb	r2, [r3, #21]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7d9b      	ldrb	r3, [r3, #22]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f000 f8bc 	bl	8001138 <word>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7dda      	ldrb	r2, [r3, #23]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7e1b      	ldrb	r3, [r3, #24]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	f000 f8b1 	bl	8001138 <word>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7dda      	ldrb	r2, [r3, #23]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e1b      	ldrb	r3, [r3, #24]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	f000 f8a6 	bl	8001138 <word>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <validateRequest+0x15a>
 8000ff8:	897b      	ldrh	r3, [r7, #10]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8000ffe:	89ba      	ldrh	r2, [r7, #12]
 8001000:	897b      	ldrh	r3, [r7, #10]
 8001002:	4413      	add	r3, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800100a:	4293      	cmp	r3, r2
 800100c:	dd01      	ble.n	8001012 <validateRequest+0x16e>
 800100e:	2302      	movs	r3, #2
 8001010:	e08b      	b.n	800112a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7dda      	ldrb	r2, [r3, #23]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7e1b      	ldrb	r3, [r3, #24]
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f000 f88b 	bl	8001138 <word>
 8001022:	4603      	mov	r3, r0
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7dda      	ldrb	r2, [r3, #23]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7e1b      	ldrb	r3, [r3, #24]
 8001030:	4619      	mov	r1, r3
 8001032:	4610      	mov	r0, r2
 8001034:	f000 f880 	bl	8001138 <word>
 8001038:	4603      	mov	r3, r0
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	b29b      	uxth	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <validateRequest+0x1a6>
 8001044:	897b      	ldrh	r3, [r7, #10]
 8001046:	3301      	adds	r3, #1
 8001048:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800104a:	897b      	ldrh	r3, [r7, #10]
 800104c:	3305      	adds	r3, #5
 800104e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8001050:	897b      	ldrh	r3, [r7, #10]
 8001052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001056:	d960      	bls.n	800111a <validateRequest+0x276>
 8001058:	2303      	movs	r3, #3
 800105a:	e066      	b.n	800112a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7d5a      	ldrb	r2, [r3, #21]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7d9b      	ldrb	r3, [r3, #22]
 8001064:	4619      	mov	r1, r3
 8001066:	4610      	mov	r0, r2
 8001068:	f000 f866 	bl	8001138 <word>
 800106c:	4603      	mov	r3, r0
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7d5a      	ldrb	r2, [r3, #21]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7d9b      	ldrb	r3, [r3, #22]
 800107a:	4619      	mov	r1, r3
 800107c:	4610      	mov	r0, r2
 800107e:	f000 f85b 	bl	8001138 <word>
 8001082:	4603      	mov	r3, r0
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	b29b      	uxth	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <validateRequest+0x1f0>
 800108e:	89bb      	ldrh	r3, [r7, #12]
 8001090:	3301      	adds	r3, #1
 8001092:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800109a:	89ba      	ldrh	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d93e      	bls.n	800111e <validateRequest+0x27a>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e042      	b.n	800112a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7d5a      	ldrb	r2, [r3, #21]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7d9b      	ldrb	r3, [r3, #22]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4610      	mov	r0, r2
 80010b0:	f000 f842 	bl	8001138 <word>
 80010b4:	4603      	mov	r3, r0
 80010b6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80010be:	89ba      	ldrh	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d92e      	bls.n	8001122 <validateRequest+0x27e>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e030      	b.n	800112a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7d5a      	ldrb	r2, [r3, #21]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7d9b      	ldrb	r3, [r3, #22]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4610      	mov	r0, r2
 80010d4:	f000 f830 	bl	8001138 <word>
 80010d8:	4603      	mov	r3, r0
 80010da:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7dda      	ldrb	r2, [r3, #23]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e1b      	ldrb	r3, [r3, #24]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f000 f826 	bl	8001138 <word>
 80010ec:	4603      	mov	r3, r0
 80010ee:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 80010f0:	89ba      	ldrh	r2, [r7, #12]
 80010f2:	897b      	ldrh	r3, [r7, #10]
 80010f4:	4413      	add	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 80010fc:	4293      	cmp	r3, r2
 80010fe:	dd01      	ble.n	8001104 <validateRequest+0x260>
 8001100:	2302      	movs	r3, #2
 8001102:	e012      	b.n	800112a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8001104:	897b      	ldrh	r3, [r7, #10]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	b29b      	uxth	r3, r3
 800110a:	3305      	adds	r3, #5
 800110c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800110e:	897b      	ldrh	r3, [r7, #10]
 8001110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001114:	d907      	bls.n	8001126 <validateRequest+0x282>
 8001116:	2303      	movs	r3, #3
 8001118:	e007      	b.n	800112a <validateRequest+0x286>
	        break;
 800111a:	bf00      	nop
 800111c:	e004      	b.n	8001128 <validateRequest+0x284>
	        break;
 800111e:	bf00      	nop
 8001120:	e002      	b.n	8001128 <validateRequest+0x284>
	        break;
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <validateRequest+0x284>
	        break;
 8001126:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8001128:	2300      	movs	r3, #0

}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	080094b4 	.word	0x080094b4

08001138 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8001150:	89bb      	ldrh	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8001168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116c:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	74fb      	strb	r3, [r7, #19]
 8001172:	e023      	b.n	80011bc <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	4053      	eors	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001184:	2301      	movs	r3, #1
 8001186:	74bb      	strb	r3, [r7, #18]
 8001188:	e012      	b.n	80011b0 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	085b      	lsrs	r3, r3, #1
 8001196:	617b      	str	r3, [r7, #20]
            if (flag)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <calcCRC+0x4e>
                temp ^= 0xA001;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 80011a4:	f083 0301 	eor.w	r3, r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80011aa:	7cbb      	ldrb	r3, [r7, #18]
 80011ac:	3301      	adds	r3, #1
 80011ae:	74bb      	strb	r3, [r7, #18]
 80011b0:	7cbb      	ldrb	r3, [r7, #18]
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d9e9      	bls.n	800118a <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 80011b6:	7cfb      	ldrb	r3, [r7, #19]
 80011b8:	3301      	adds	r3, #1
 80011ba:	74fb      	strb	r3, [r7, #19]
 80011bc:	7cfa      	ldrb	r2, [r7, #19]
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3d7      	bcc.n	8001174 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	b29b      	uxth	r3, r3

}
 80011de:	4618      	mov	r0, r3
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	7d1b      	ldrb	r3, [r3, #20]
 80011f8:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	7a1a      	ldrb	r2, [r3, #8]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	3b80      	subs	r3, #128	; 0x80
 8001206:	b2da      	uxtb	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2203      	movs	r2, #3
 8001216:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b087      	sub	sp, #28
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f103 0213 	add.w	r2, r3, #19
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001238:	4619      	mov	r1, r3
 800123a:	4610      	mov	r0, r2
 800123c:	f7ff ff8e 	bl	800115c <calcCRC>
 8001240:	4603      	mov	r3, r0
 8001242:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001250:	4619      	mov	r1, r3
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	440b      	add	r3, r1
 8001258:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001270:	4619      	mov	r1, r3
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	440b      	add	r3, r1
 800127a:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001282:	3301      	adds	r3, #1
 8001284:	b2da      	uxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00c      	beq.n	80012ae <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fdf8 	bl	8004e8e <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68d8      	ldr	r0, [r3, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	8a1b      	ldrh	r3, [r3, #16]
 80012a6:	2201      	movs	r2, #1
 80012a8:	4619      	mov	r1, r3
 80012aa:	f002 f857 	bl	800335c <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6858      	ldr	r0, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f103 0113 	add.w	r1, r3, #19
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	f003 fb3f 	bl	8004944 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 80012c6:	21fa      	movs	r1, #250	; 0xfa
 80012c8:	2001      	movs	r0, #1
 80012ca:	f006 fc27 	bl	8007b1c <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 80012ce:	bf00      	nop
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f7      	beq.n	80012d0 <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00c      	beq.n	8001302 <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68d8      	ldr	r0, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	8a1b      	ldrh	r3, [r3, #16]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	f002 f832 	bl	800335c <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 fdf9 	bl	8004ef4 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b04      	cmp	r3, #4
 8001308:	d10c      	bne.n	8001324 <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001310:	f005 ff24 	bl	800715c <xTaskGetTickCount>
 8001314:	4602      	mov	r2, r0
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	2102      	movs	r1, #2
 800131e:	4620      	mov	r0, r4
 8001320:	f006 fea2 	bl	8008068 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}

08001344 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7d5a      	ldrb	r2, [r3, #21]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7d9b      	ldrb	r3, [r3, #22]
 8001354:	4619      	mov	r1, r3
 8001356:	4610      	mov	r0, r2
 8001358:	f7ff feee 	bl	8001138 <word>
 800135c:	4603      	mov	r3, r0
 800135e:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7dda      	ldrb	r2, [r3, #23]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7e1b      	ldrb	r3, [r3, #24]
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f7ff fee4 	bl	8001138 <word>
 8001370:	4603      	mov	r3, r0
 8001372:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8001374:	8a3b      	ldrh	r3, [r7, #16]
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	b29b      	uxth	r3, r3
 800137a:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800137c:	8a3b      	ldrh	r3, [r7, #16]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <process_FC1+0x4a>
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	3301      	adds	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7dfa      	ldrb	r2, [r7, #23]
 8001392:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80013a2:	461a      	mov	r2, r3
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	4413      	add	r3, r2
 80013a8:	3b01      	subs	r3, #1
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	82bb      	strh	r3, [r7, #20]
 80013ba:	e058      	b.n	800146e <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 80013bc:	8a7a      	ldrh	r2, [r7, #18]
 80013be:	8abb      	ldrh	r3, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 80013c4:	89bb      	ldrh	r3, [r7, #12]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80013ca:	89bb      	ldrh	r3, [r7, #12]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	727b      	strb	r3, [r7, #9]

        bitWrite(
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80013da:	897b      	ldrh	r3, [r7, #10]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	7a7b      	ldrb	r3, [r7, #9]
 80013e6:	fa42 f303 	asr.w	r3, r2, r3
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d014      	beq.n	800141c <process_FC1+0xd8>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	7cda      	ldrb	r2, [r3, #19]
 8001400:	7dbb      	ldrb	r3, [r7, #22]
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8001410:	4313      	orrs	r3, r2
 8001412:	b2da      	uxtb	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	440b      	add	r3, r1
 8001418:	74da      	strb	r2, [r3, #19]
 800141a:	e015      	b.n	8001448 <process_FC1+0x104>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001422:	461a      	mov	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	7cda      	ldrb	r2, [r3, #19]
 800142a:	7dbb      	ldrb	r3, [r7, #22]
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800143e:	4013      	ands	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	440b      	add	r3, r1
 8001446:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8001448:	7dbb      	ldrb	r3, [r7, #22]
 800144a:	3301      	adds	r3, #1
 800144c:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	2b07      	cmp	r3, #7
 8001452:	d909      	bls.n	8001468 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800145e:	3301      	adds	r3, #1
 8001460:	b2da      	uxtb	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001468:	8abb      	ldrh	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	82bb      	strh	r3, [r7, #20]
 800146e:	8aba      	ldrh	r2, [r7, #20]
 8001470:	8a3b      	ldrh	r3, [r7, #16]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3a2      	bcc.n	80013bc <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8001476:	8a3b      	ldrh	r3, [r7, #16]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	b29b      	uxth	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <process_FC1+0x14e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001488:	3301      	adds	r3, #1
 800148a:	b2da      	uxtb	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001498:	3302      	adds	r3, #2
 800149a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fec1 	bl	8001224 <sendTxBuffer>
    return u8CopyBufferSize;
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7d5a      	ldrb	r2, [r3, #21]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7d9b      	ldrb	r3, [r3, #22]
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f7ff fe39 	bl	8001138 <word>
 80014c6:	4603      	mov	r3, r0
 80014c8:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7dda      	ldrb	r2, [r3, #23]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7e1b      	ldrb	r3, [r3, #24]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4610      	mov	r0, r2
 80014d6:	f7ff fe2f 	bl	8001138 <word>
 80014da:	4603      	mov	r3, r0
 80014dc:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 80014de:	7afb      	ldrb	r3, [r7, #11]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80014f0:	89bb      	ldrh	r3, [r7, #12]
 80014f2:	81fb      	strh	r3, [r7, #14]
 80014f4:	e032      	b.n	800155c <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800150e:	4619      	mov	r1, r3
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	440b      	add	r3, r1
 8001516:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800151e:	3301      	adds	r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800153c:	4619      	mov	r1, r3
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	440b      	add	r3, r1
 8001544:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	3301      	adds	r3, #1
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	89fa      	ldrh	r2, [r7, #14]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	7afb      	ldrb	r3, [r7, #11]
 8001562:	440b      	add	r3, r1
 8001564:	429a      	cmp	r2, r3
 8001566:	dbc6      	blt.n	80014f6 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800156e:	3302      	adds	r3, #2
 8001570:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fe56 	bl	8001224 <sendTxBuffer>

    return u8CopyBufferSize;
 8001578:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7d5a      	ldrb	r2, [r3, #21]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7d9b      	ldrb	r3, [r3, #22]
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f7ff fdce 	bl	8001138 <word>
 800159c:	4603      	mov	r3, r0
 800159e:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 80015a0:	89fb      	ldrh	r3, [r7, #14]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7ddb      	ldrb	r3, [r3, #23]
 80015b4:	2bff      	cmp	r3, #255	; 0xff
 80015b6:	d115      	bne.n	80015e4 <process_FC5+0x60>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80015be:	89bb      	ldrh	r3, [r7, #12]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	8819      	ldrh	r1, [r3, #0]
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	2201      	movs	r2, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80015d6:	89bb      	ldrh	r3, [r7, #12]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4403      	add	r3, r0
 80015dc:	430a      	orrs	r2, r1
 80015de:	b292      	uxth	r2, r2
 80015e0:	801a      	strh	r2, [r3, #0]
 80015e2:	e016      	b.n	8001612 <process_FC5+0x8e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80015ea:	89bb      	ldrh	r3, [r7, #12]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	8819      	ldrh	r1, [r3, #0]
 80015f2:	7afb      	ldrb	r3, [r7, #11]
 80015f4:	2201      	movs	r2, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001606:	89bb      	ldrh	r3, [r7, #12]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4403      	add	r3, r0
 800160c:	400a      	ands	r2, r1
 800160e:	b292      	uxth	r2, r2
 8001610:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2206      	movs	r2, #6
 8001616:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001620:	3302      	adds	r3, #2
 8001622:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fdfd 	bl	8001224 <sendTxBuffer>

    return u8CopyBufferSize;
 800162a:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7d5a      	ldrb	r2, [r3, #21]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7d9b      	ldrb	r3, [r3, #22]
 8001646:	4619      	mov	r1, r3
 8001648:	4610      	mov	r0, r2
 800164a:	f7ff fd75 	bl	8001138 <word>
 800164e:	4603      	mov	r3, r0
 8001650:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7dda      	ldrb	r2, [r3, #23]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7e1b      	ldrb	r3, [r3, #24]
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f7ff fd6b 	bl	8001138 <word>
 8001662:	4603      	mov	r3, r0
 8001664:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	89ba      	ldrh	r2, [r7, #12]
 8001674:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2206      	movs	r2, #6
 800167a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001684:	3302      	adds	r3, #2
 8001686:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fdcb 	bl	8001224 <sendTxBuffer>

    return u8CopyBufferSize;
 800168e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7d5a      	ldrb	r2, [r3, #21]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7d9b      	ldrb	r3, [r3, #22]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f7ff fd43 	bl	8001138 <word>
 80016b2:	4603      	mov	r3, r0
 80016b4:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7dda      	ldrb	r2, [r3, #23]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7e1b      	ldrb	r3, [r3, #24]
 80016be:	4619      	mov	r1, r3
 80016c0:	4610      	mov	r0, r2
 80016c2:	f7ff fd39 	bl	8001138 <word>
 80016c6:	4603      	mov	r3, r0
 80016c8:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80016ce:	2307      	movs	r3, #7
 80016d0:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	82bb      	strh	r3, [r7, #20]
 80016d6:	e058      	b.n	800178a <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80016d8:	8a7a      	ldrh	r2, [r7, #18]
 80016da:	8abb      	ldrh	r3, [r7, #20]
 80016dc:	4413      	add	r3, r2
 80016de:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80016e0:	89bb      	ldrh	r3, [r7, #12]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80016e6:	89bb      	ldrh	r3, [r7, #12]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	7cdb      	ldrb	r3, [r3, #19]
 80016f8:	461a      	mov	r2, r3
 80016fa:	7dbb      	ldrb	r3, [r7, #22]
 80016fc:	fa42 f303 	asr.w	r3, r2, r3
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800170e:	7a3b      	ldrb	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <process_FC15+0xa6>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800171a:	897b      	ldrh	r3, [r7, #10]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	8819      	ldrh	r1, [r3, #0]
 8001722:	7a7b      	ldrb	r3, [r7, #9]
 8001724:	2201      	movs	r2, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4403      	add	r3, r0
 8001738:	430a      	orrs	r2, r1
 800173a:	b292      	uxth	r2, r2
 800173c:	801a      	strh	r2, [r3, #0]
 800173e:	e016      	b.n	800176e <process_FC15+0xd4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001746:	897b      	ldrh	r3, [r7, #10]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	8819      	ldrh	r1, [r3, #0]
 800174e:	7a7b      	ldrb	r3, [r7, #9]
 8001750:	2201      	movs	r2, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	b29b      	uxth	r3, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001762:	897b      	ldrh	r3, [r7, #10]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4403      	add	r3, r0
 8001768:	400a      	ands	r2, r1
 800176a:	b292      	uxth	r2, r2
 800176c:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800176e:	7dbb      	ldrb	r3, [r7, #22]
 8001770:	3301      	adds	r3, #1
 8001772:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001774:	7dbb      	ldrb	r3, [r7, #22]
 8001776:	2b07      	cmp	r3, #7
 8001778:	d904      	bls.n	8001784 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	3301      	adds	r3, #1
 8001782:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001784:	8abb      	ldrh	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	82bb      	strh	r3, [r7, #20]
 800178a:	8aba      	ldrh	r2, [r7, #20]
 800178c:	8a3b      	ldrh	r3, [r7, #16]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3a2      	bcc.n	80016d8 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2206      	movs	r2, #6
 8001796:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017a0:	3302      	adds	r3, #2
 80017a2:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fd3d 	bl	8001224 <sendTxBuffer>
    return u8CopyBufferSize;
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7d5b      	ldrb	r3, [r3, #21]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7d9b      	ldrb	r3, [r3, #22]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7ddb      	ldrb	r3, [r3, #23]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80017ec:	8a7b      	ldrh	r3, [r7, #18]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2206      	movs	r2, #6
 80017f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	82fb      	strh	r3, [r7, #22]
 8001800:	e01d      	b.n	800183e <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8001802:	8afb      	ldrh	r3, [r7, #22]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	3307      	adds	r3, #7
        temp = word(
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800180e:	8afb      	ldrh	r3, [r7, #22]
 8001810:	3304      	adds	r3, #4
 8001812:	005b      	lsls	r3, r3, #1
        temp = word(
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	7cdb      	ldrb	r3, [r3, #19]
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff fc8c 	bl	8001138 <word>
 8001820:	4603      	mov	r3, r0
 8001822:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800182a:	8ab9      	ldrh	r1, [r7, #20]
 800182c:	8afb      	ldrh	r3, [r7, #22]
 800182e:	440b      	add	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	89fa      	ldrh	r2, [r7, #14]
 8001836:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8001838:	8afb      	ldrh	r3, [r7, #22]
 800183a:	3301      	adds	r3, #1
 800183c:	82fb      	strh	r3, [r7, #22]
 800183e:	8afa      	ldrh	r2, [r7, #22]
 8001840:	8a7b      	ldrh	r3, [r7, #18]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3dd      	bcc.n	8001802 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800184c:	3302      	adds	r3, #2
 800184e:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fce7 	bl	8001224 <sendTxBuffer>

    return u8CopyBufferSize;
 8001856:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af02      	add	r7, sp, #8
 800186a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e019      	b.n	80018aa <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_UART_TxCpltCallback+0x70>)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	d10e      	bne.n	80018a4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_UART_TxCpltCallback+0x70>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	f006 fa29 	bl	8007cf4 <xTaskGenericNotifyFromISR>
	   		break;
 80018a2:	e008      	b.n	80018b6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_UART_TxCpltCallback+0x74>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4293      	cmp	r3, r2
 80018b4:	dbdf      	blt.n	8001876 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_UART_TxCpltCallback+0x68>
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_UART_TxCpltCallback+0x78>)
 80018be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000da0 	.word	0x20000da0
 80018d8:	200000a0 	.word	0x200000a0
 80018dc:	e000ed04 	.word	0xe000ed04

080018e0 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e042      	b.n	8001978 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80018f2:	4a2d      	ldr	r2, [pc, #180]	; (80019a8 <HAL_UART_RxCpltCallback+0xc8>)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d137      	bne.n	8001972 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <HAL_UART_RxCpltCallback+0xc8>)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800190e:	2b01      	cmp	r3, #1
 8001910:	d139      	bne.n	8001986 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_UART_RxCpltCallback+0xc8>)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800191e:	4922      	ldr	r1, [pc, #136]	; (80019a8 <HAL_UART_RxCpltCallback+0xc8>)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001926:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7fe fc0f 	bl	8000150 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_UART_RxCpltCallback+0xc8>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	6858      	ldr	r0, [r3, #4]
 800193c:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_UART_RxCpltCallback+0xc8>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	33a6      	adds	r3, #166	; 0xa6
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	f003 f83f 	bl	80049cc <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800194e:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_UART_RxCpltCallback+0xc8>)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800195a:	f005 fc0d 	bl	8007178 <xTaskGetTickCountFromISR>
 800195e:	4602      	mov	r2, r0
 8001960:	f107 0308 	add.w	r3, r7, #8
 8001964:	2100      	movs	r1, #0
 8001966:	9100      	str	r1, [sp, #0]
 8001968:	2107      	movs	r1, #7
 800196a:	4620      	mov	r0, r4
 800196c:	f006 fb7c 	bl	8008068 <xTimerGenericCommand>
    		}
    		break;
 8001970:	e009      	b.n	8001986 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_UART_RxCpltCallback+0xcc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4293      	cmp	r3, r2
 8001982:	dbb6      	blt.n	80018f2 <HAL_UART_RxCpltCallback+0x12>
 8001984:	e000      	b.n	8001988 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8001986:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_UART_RxCpltCallback+0xbe>
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_UART_RxCpltCallback+0xd0>)
 8001990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f3bf 8f4f 	dsb	sy
 800199a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000da0 	.word	0x20000da0
 80019ac:	200000a0 	.word	0x200000a0
 80019b0:	e000ed04 	.word	0xe000ed04

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f000 fd39 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f86d 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c2:	f000 fa19 	bl	8001df8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80019c6:	f000 f9cf 	bl	8001d68 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80019ca:	f000 f925 	bl	8001c18 <MX_TIM1_Init>
  MX_DMA_Init();
 80019ce:	f000 f9f5 	bl	8001dbc <MX_DMA_Init>
  MX_ADC1_Init();
 80019d2:	f000 f8bd 	bl	8001b50 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Definiciones para la biblioteca de modbus
   ModbusH.uModbusType = MB_SLAVE;
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <main+0xb4>)
 80019d8:	2203      	movs	r2, #3
 80019da:	701a      	strb	r2, [r3, #0]
   ModbusH.port =  &huart3;
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <main+0xb4>)
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <main+0xb8>)
 80019e0:	605a      	str	r2, [r3, #4]
   ModbusH.u8id = 1; //Modbus slave ID
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <main+0xb4>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	721a      	strb	r2, [r3, #8]
   ModbusH.u16timeOut = 1000;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <main+0xb4>)
 80019ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ee:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
   ModbusH.EN_Port = NULL;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <main+0xb4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
   ModbusH.u16regs = ModbusDATA;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <main+0xb4>)
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <main+0xbc>)
 80019fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <main+0xb4>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ModbusH.xTypeHW = USART_HW;
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <main+0xb4>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

   //Initialize Modbus library
   ModbusInit(&ModbusH);
 8001a10:	4815      	ldr	r0, [pc, #84]	; (8001a68 <main+0xb4>)
 8001a12:	f7fe fc63 	bl	80002dc <ModbusInit>
   //Start capturing traffic on serial Port
   ModbusStart(&ModbusH);
 8001a16:	4814      	ldr	r0, [pc, #80]	; (8001a68 <main+0xb4>)
 8001a18:	f7fe fd02 	bl	8000420 <ModbusStart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a1c:	f003 fcea 	bl	80053f4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueDataADC */
  QueueDataADCHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueDataADC_attributes);
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <main+0xc0>)
 8001a22:	2102      	movs	r1, #2
 8001a24:	2010      	movs	r0, #16
 8001a26:	f003 fef1 	bl	800580c <osMessageQueueNew>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <main+0xc4>)
 8001a2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  if ( QueueDataADCHandle == 0)  // Queue not created
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <main+0xc4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <main+0x8a>
  {
	  char *str = "Unable to create Integer Queue\n\n";
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <main+0xc8>)
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	e001      	b.n	8001a42 <main+0x8e>
//	  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
  }
  else
  {
	  char *str = "Integer Queue Created successfully\n\n";
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <main+0xcc>)
 8001a40:	607b      	str	r3, [r7, #4]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Modbus */
  ModbusHandle = osThreadNew(StartModbus, NULL, &Modbus_attributes);
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <main+0xd0>)
 8001a44:	2100      	movs	r1, #0
 8001a46:	4810      	ldr	r0, [pc, #64]	; (8001a88 <main+0xd4>)
 8001a48:	f003 fd3a 	bl	80054c0 <osThreadNew>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <main+0xd8>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(StartADC, NULL, &ADC_attributes);
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <main+0xdc>)
 8001a54:	2100      	movs	r1, #0
 8001a56:	480f      	ldr	r0, [pc, #60]	; (8001a94 <main+0xe0>)
 8001a58:	f003 fd32 	bl	80054c0 <osThreadNew>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <main+0xe4>)
 8001a60:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a62:	f003 fcf9 	bl	8005458 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <main+0xb2>
 8001a68:	20000da8 	.word	0x20000da8
 8001a6c:	20000eec 	.word	0x20000eec
 8001a70:	20000000 	.word	0x20000000
 8001a74:	08009504 	.word	0x08009504
 8001a78:	20000ff0 	.word	0x20000ff0
 8001a7c:	080093b0 	.word	0x080093b0
 8001a80:	080093d4 	.word	0x080093d4
 8001a84:	080094bc 	.word	0x080094bc
 8001a88:	08001edd 	.word	0x08001edd
 8001a8c:	20000ff4 	.word	0x20000ff4
 8001a90:	080094e0 	.word	0x080094e0
 8001a94:	08001f49 	.word	0x08001f49
 8001a98:	20000fec 	.word	0x20000fec

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	; 0x50
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa6:	2228      	movs	r2, #40	; 0x28
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f007 f802 	bl	8008ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ada:	2301      	movs	r3, #1
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 fc4b 	bl	800338c <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001afc:	f000 fa4c 	bl	8001f98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b00:	230f      	movs	r3, #15
 8001b02:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b10:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 feb5 	bl	800388c <HAL_RCC_ClockConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b28:	f000 fa36 	bl	8001f98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 f872 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b42:	f000 fa29 	bl	8001f98 <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b62:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <MX_ADC1_Init+0xc4>)
 8001b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b6e:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b74:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8e:	4820      	ldr	r0, [pc, #128]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001b90:	f000 fc80 	bl	8002494 <HAL_ADC_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001b9a:	f000 f9fd 	bl	8001f98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4818      	ldr	r0, [pc, #96]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001bb0:	f000 fe1e 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001bba:	f000 f9ed 	bl	8001f98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4812      	ldr	r0, [pc, #72]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001bc8:	f000 fe12 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001bd2:	f000 f9e1 	bl	8001f98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480c      	ldr	r0, [pc, #48]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001be0:	f000 fe06 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001bea:	f000 f9d5 	bl	8001f98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_ADC1_Init+0xc0>)
 8001bf8:	f000 fdfa 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001c02:	f000 f9c9 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000f30 	.word	0x20000f30
 8001c14:	40012400 	.word	0x40012400

08001c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b092      	sub	sp, #72	; 0x48
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2220      	movs	r2, #32
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f006 ff36 	bl	8008ab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c48:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c4a:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <MX_TIM1_Init+0x14c>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c4e:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c68:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c74:	483a      	ldr	r0, [pc, #232]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c76:	f002 f933 	bl	8003ee0 <HAL_TIM_PWM_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c80:	f000 f98a 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c90:	4619      	mov	r1, r3
 8001c92:	4833      	ldr	r0, [pc, #204]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001c94:	f002 fd48 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c9e:	f000 f97b 	bl	8001f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca2:	2360      	movs	r3, #96	; 0x60
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4826      	ldr	r0, [pc, #152]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001cc8:	f002 fa62 	bl	8004190 <HAL_TIM_PWM_ConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001cd2:	f000 f961 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4820      	ldr	r0, [pc, #128]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001ce0:	f002 fa56 	bl	8004190 <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001cea:	f000 f955 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	481a      	ldr	r0, [pc, #104]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001cf8:	f002 fa4a 	bl	8004190 <HAL_TIM_PWM_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001d02:	f000 f949 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001d10:	f002 fa3e 	bl	8004190 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001d1a:	f000 f93d 	bl	8001f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4807      	ldr	r0, [pc, #28]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001d42:	f002 fd4f 	bl	80047e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001d4c:	f000 f924 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <MX_TIM1_Init+0x148>)
 8001d52:	f000 f9ed 	bl	8002130 <HAL_TIM_MspPostInit>

}
 8001d56:	bf00      	nop
 8001d58:	3748      	adds	r7, #72	; 0x48
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000fa4 	.word	0x20000fa4
 8001d64:	40012c00 	.word	0x40012c00

08001d68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_USART3_UART_Init+0x50>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001da0:	f002 fd83 	bl	80048aa <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001daa:	f000 f8f5 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000eec 	.word	0x20000eec
 8001db8:	40004800 	.word	0x40004800

08001dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_DMA_Init+0x38>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <MX_DMA_Init+0x38>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6153      	str	r3, [r2, #20]
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_DMA_Init+0x38>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2105      	movs	r1, #5
 8001dde:	200b      	movs	r0, #11
 8001de0:	f000 fefd 	bl	8002bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001de4:	200b      	movs	r0, #11
 8001de6:	f000 ff16 	bl	8002c16 <HAL_NVIC_EnableIRQ>

}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000

08001df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 0310 	add.w	r3, r7, #16
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e12:	f043 0320 	orr.w	r3, r3, #32
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <MX_GPIO_Init+0xd4>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 8001e54:	2200      	movs	r2, #0
 8001e56:	f24f 0118 	movw	r1, #61464	; 0xf018
 8001e5a:	481d      	ldr	r0, [pc, #116]	; (8001ed0 <MX_GPIO_Init+0xd8>)
 8001e5c:	f001 fa7e 	bl	800335c <HAL_GPIO_WritePin>
                          |OUT3_2_Pin|OUT3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT4_1_Pin|OUT4_2_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e66:	481b      	ldr	r0, [pc, #108]	; (8001ed4 <MX_GPIO_Init+0xdc>)
 8001e68:	f001 fa78 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT2_1_Pin OUT2_2_Pin OUT1_2_Pin OUT1_1_Pin
                           OUT3_2_Pin OUT3_1_Pin */
  GPIO_InitStruct.Pin = OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 8001e6c:	f24f 0318 	movw	r3, #61464	; 0xf018
 8001e70:	613b      	str	r3, [r7, #16]
                          |OUT3_2_Pin|OUT3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <MX_GPIO_Init+0xd8>)
 8001e86:	f001 f8e5 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT4_1_Pin OUT4_2_Pin */
  GPIO_InitStruct.Pin = OUT4_1_Pin|OUT4_2_Pin;
 8001e8a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <MX_GPIO_Init+0xdc>)
 8001ea4:	f001 f8d6 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : D01_Encoder_Pin D02_Encoder_Pin D03_Encoder_Pin D04_Encoder_Pin */
  GPIO_InitStruct.Pin = D01_Encoder_Pin|D02_Encoder_Pin|D03_Encoder_Pin|D04_Encoder_Pin;
 8001ea8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <MX_GPIO_Init+0xe0>)
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <MX_GPIO_Init+0xd8>)
 8001ebe:	f001 f8c9 	bl	8003054 <HAL_GPIO_Init>

}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	10110000 	.word	0x10110000

08001edc <StartModbus>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartModbus */
void StartModbus(void *argument)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b096      	sub	sp, #88	; 0x58
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i =0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	657b      	str	r3, [r7, #84]	; 0x54
	char buff[64];
uint16_t valor =1234;
 8001ee8:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8001eec:	817b      	strh	r3, [r7, #10]
osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
//	  osMessageGet( QueueDataADCHandle, &valor, 0 );
	prt=pvPortMalloc(100*sizeof (char));
 8001eee:	2064      	movs	r0, #100	; 0x64
 8001ef0:	f006 fd74 	bl	80089dc <pvPortMalloc>
 8001ef4:	6538      	str	r0, [r7, #80]	; 0x50
	sprintf(prt,"Dato leido de la Queue: %u \n",valor);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4910      	ldr	r1, [pc, #64]	; (8001f3c <StartModbus+0x60>)
 8001efc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001efe:	f006 fe97 	bl	8008c30 <siprintf>

	 status = osMessageQueueGet(QueueDataADCHandle, &valor, NULL, 5000);   // wait for message
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <StartModbus+0x64>)
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	f107 010a 	add.w	r1, r7, #10
 8001f0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f003 fd76 	bl	8005a00 <osMessageQueueGet>
 8001f14:	64f8      	str	r0, [r7, #76]	; 0x4c
	    if (status == osOK) {
 8001f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <StartModbus+0x46>
//	HAL_UART_Transmit(&huart3, (uint8_t*)prt, strlen(prt), 100);
	vPortFree(prt);
 8001f1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f1e:	f006 fd6f 	bl	8008a00 <vPortFree>
	      ; // process data
	    }

    osDelay(900);
 8001f22:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001f26:	f003 fba7 	bl	8005678 <osDelay>
    ModbusDATA[5]= ++i;
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <StartModbus+0x68>)
 8001f36:	815a      	strh	r2, [r3, #10]
	prt=pvPortMalloc(100*sizeof (char));
 8001f38:	e7d9      	b.n	8001eee <StartModbus+0x12>
 8001f3a:	bf00      	nop
 8001f3c:	080093fc 	.word	0x080093fc
 8001f40:	20000ff0 	.word	0x20000ff0
 8001f44:	20000000 	.word	0x20000000

08001f48 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  {
//	HAL_ADC_Stop_DMA(&hadc1);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1,sizeof (adc1));
//	adc1 = HAL_ADC_PollForConversion(&hadc1, 5000);
//	osMessageQueuePut(QueueDataADCHandle, &adc1, 5000);
	osMessageQueuePut(QueueDataADCHandle, &adc1[0], NULL, 5000);
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <StartADC+0x28>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	f107 0108 	add.w	r1, r7, #8
 8001f58:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f003 fcdb 	bl	8005918 <osMessageQueuePut>
	osThreadYield();
 8001f62:	f003 fb57 	bl	8005614 <osThreadYield>

    osDelay(1000);
 8001f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6a:	f003 fb85 	bl	8005678 <osDelay>
	osMessageQueuePut(QueueDataADCHandle, &adc1[0], NULL, 5000);
 8001f6e:	e7ef      	b.n	8001f50 <StartADC+0x8>
 8001f70:	20000ff0 	.word	0x20000ff0

08001f74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  // ESTO ES DE FREERTOS
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f86:	f000 fa69 	bl	800245c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40000800 	.word	0x40000800

08001f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9c:	b672      	cpsid	i
}
 8001f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <Error_Handler+0x8>
	...

08001fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_MspInit+0x68>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	4a17      	ldr	r2, [pc, #92]	; (800200c <HAL_MspInit+0x68>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6193      	str	r3, [r2, #24]
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_MspInit+0x68>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_MspInit+0x68>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_MspInit+0x68>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x68>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	210f      	movs	r1, #15
 8001fde:	f06f 0001 	mvn.w	r0, #1
 8001fe2:	f000 fdfc 	bl	8002bde <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_MspInit+0x6c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_MspInit+0x6c>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000

08002014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <HAL_ADC_MspInit+0xcc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d151      	bne.n	80020d8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002064:	230f      	movs	r3, #15
 8002066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002068:	2303      	movs	r3, #3
 800206a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	481d      	ldr	r0, [pc, #116]	; (80020e8 <HAL_ADC_MspInit+0xd4>)
 8002074:	f000 ffee 	bl	8003054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 800207a:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_ADC_MspInit+0xdc>)
 800207c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 8002080:	2200      	movs	r2, #0
 8002082:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 8002092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002096:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 800209a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020ac:	480f      	ldr	r0, [pc, #60]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020ae:	f000 fdc1 	bl	8002c34 <HAL_DMA_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80020b8:	f7ff ff6e 	bl	8001f98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020c0:	621a      	str	r2, [r3, #32]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2105      	movs	r1, #5
 80020cc:	2012      	movs	r0, #18
 80020ce:	f000 fd86 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020d2:	2012      	movs	r0, #18
 80020d4:	f000 fd9f 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40012400 	.word	0x40012400
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010800 	.word	0x40010800
 80020ec:	20000f60 	.word	0x20000f60
 80020f0:	40020008 	.word	0x40020008

080020f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_TIM_PWM_MspInit+0x34>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10b      	bne.n	800211e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_TIM_PWM_MspInit+0x38>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_TIM_PWM_MspInit+0x38>)
 800210c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002110:	6193      	str	r3, [r2, #24]
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_TIM_PWM_MspInit+0x38>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_TIM_MspPostInit+0x5c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d118      	bne.n	8002182 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_TIM_MspPostInit+0x60>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_TIM_MspPostInit+0x60>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6193      	str	r3, [r2, #24]
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_TIM_MspPostInit+0x60>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_01_Pin|PWM_02_Pin|PWM_03_Pin|PWM_04_Pin;
 8002168:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800216c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2302      	movs	r3, #2
 8002174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <HAL_TIM_MspPostInit+0x64>)
 800217e:	f000 ff69 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40012c00 	.word	0x40012c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40010800 	.word	0x40010800

08002198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a20      	ldr	r2, [pc, #128]	; (8002234 <HAL_UART_MspInit+0x9c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d139      	bne.n	800222c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <HAL_UART_MspInit+0xa0>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_UART_MspInit+0xa0>)
 80021be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c2:	61d3      	str	r3, [r2, #28]
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_UART_MspInit+0xa0>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_UART_MspInit+0xa0>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_UART_MspInit+0xa0>)
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_UART_MspInit+0xa0>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4619      	mov	r1, r3
 80021fc:	480f      	ldr	r0, [pc, #60]	; (800223c <HAL_UART_MspInit+0xa4>)
 80021fe:	f000 ff29 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	4619      	mov	r1, r3
 8002216:	4809      	ldr	r0, [pc, #36]	; (800223c <HAL_UART_MspInit+0xa4>)
 8002218:	f000 ff1c 	bl	8003054 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2105      	movs	r1, #5
 8002220:	2027      	movs	r0, #39	; 0x27
 8002222:	f000 fcdc 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002226:	2027      	movs	r0, #39	; 0x27
 8002228:	f000 fcf5 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40004800 	.word	0x40004800
 8002238:	40021000 	.word	0x40021000
 800223c:	40010c00 	.word	0x40010c00

08002240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	; 0x30
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	201e      	movs	r0, #30
 8002256:	f000 fcc2 	bl	8002bde <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800225a:	201e      	movs	r0, #30
 800225c:	f000 fcdb 	bl	8002c16 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_InitTick+0xa0>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_InitTick+0xa0>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	61d3      	str	r3, [r2, #28]
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_InitTick+0xa0>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002278:	f107 0210 	add.w	r2, r7, #16
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f001 fc7e 	bl	8003b84 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002288:	f001 fc54 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 800228c:	4603      	mov	r3, r0
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <HAL_InitTick+0xa4>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0c9b      	lsrs	r3, r3, #18
 800229c:	3b01      	subs	r3, #1
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_InitTick+0xa8>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_InitTick+0xac>)
 80022a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_InitTick+0xa8>)
 80022a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_InitTick+0xa8>)
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_InitTick+0xa8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_InitTick+0xa8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80022c0:	4809      	ldr	r0, [pc, #36]	; (80022e8 <HAL_InitTick+0xa8>)
 80022c2:	f001 fd63 	bl	8003d8c <HAL_TIM_Base_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <HAL_InitTick+0xa8>)
 80022ce:	f001 fdb5 	bl	8003e3c <HAL_TIM_Base_Start_IT>
 80022d2:	4603      	mov	r3, r0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3730      	adds	r7, #48	; 0x30
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	431bde83 	.word	0x431bde83
 80022e8:	20000ff8 	.word	0x20000ff8
 80022ec:	40000800 	.word	0x40000800

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <NMI_Handler+0x4>

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
	...

0800231c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <DMA1_Channel1_IRQHandler+0x10>)
 8002322:	f000 fd91 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000f60 	.word	0x20000f60

08002330 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <ADC1_2_IRQHandler+0x10>)
 8002336:	f000 f985 	bl	8002644 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000f30 	.word	0x20000f30

08002344 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <TIM4_IRQHandler+0x10>)
 800234a:	f001 fe18 	bl	8003f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000ff8 	.word	0x20000ff8

08002358 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <USART3_IRQHandler+0x10>)
 800235e:	f002 fbcf 	bl	8004b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000eec 	.word	0x20000eec

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f006 fb42 	bl	8008a24 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20005000 	.word	0x20005000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	200000a4 	.word	0x200000a4
 80023d4:	20001098 	.word	0x20001098

080023d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e6:	490d      	ldr	r1, [pc, #52]	; (800241c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023fc:	4c0a      	ldr	r4, [pc, #40]	; (8002428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800240a:	f7ff ffe5 	bl	80023d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240e:	f006 fb0f 	bl	8008a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002412:	f7ff facf 	bl	80019b4 <main>
  bx lr
 8002416:	4770      	bx	lr
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002420:	08009570 	.word	0x08009570
  ldr r2, =_sbss
 8002424:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002428:	20001094 	.word	0x20001094

0800242c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800242c:	e7fe      	b.n	800242c <CAN1_RX1_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_Init+0x28>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_Init+0x28>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002440:	2003      	movs	r0, #3
 8002442:	f000 fbc1 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002446:	200f      	movs	r0, #15
 8002448:	f7ff fefa 	bl	8002240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800244c:	f7ff fdaa 	bl	8001fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_IncTick+0x1c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_IncTick+0x20>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a03      	ldr	r2, [pc, #12]	; (800247c <HAL_IncTick+0x20>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	20000018 	.word	0x20000018
 800247c:	20001040 	.word	0x20001040

08002480 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b02      	ldr	r3, [pc, #8]	; (8002490 <HAL_GetTick+0x10>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	20001040 	.word	0x20001040

08002494 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0be      	b.n	8002634 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fd9e 	bl	8002014 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fa81 	bl	80029e0 <ADC_ConversionStop_Disable>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 8099 	bne.w	8002622 <HAL_ADC_Init+0x18e>
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8095 	bne.w	8002622 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002500:	f023 0302 	bic.w	r3, r3, #2
 8002504:	f043 0202 	orr.w	r2, r3, #2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002514:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7b1b      	ldrb	r3, [r3, #12]
 800251a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800251c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4313      	orrs	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252c:	d003      	beq.n	8002536 <HAL_ADC_Init+0xa2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_ADC_Init+0xa8>
 8002536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800253a:	e000      	b.n	800253e <HAL_ADC_Init+0xaa>
 800253c:	2300      	movs	r3, #0
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7d1b      	ldrb	r3, [r3, #20]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d119      	bne.n	8002580 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7b1b      	ldrb	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	3b01      	subs	r3, #1
 800255a:	035a      	lsls	r2, r3, #13
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e00b      	b.n	8002580 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_ADC_Init+0x1a8>)
 800259c:	4013      	ands	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b0:	d003      	beq.n	80025ba <HAL_ADC_Init+0x126>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d104      	bne.n	80025c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	3b01      	subs	r3, #1
 80025c0:	051b      	lsls	r3, r3, #20
 80025c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_ADC_Init+0x1ac>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d10b      	bne.n	8002600 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025fe:	e018      	b.n	8002632 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	f023 0312 	bic.w	r3, r3, #18
 8002608:	f043 0210 	orr.w	r2, r3, #16
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002620:	e007      	b.n	8002632 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	ffe1f7fd 	.word	0xffe1f7fd
 8002640:	ff1f0efe 	.word	0xff1f0efe

08002644 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b20      	cmp	r3, #32
 8002658:	d140      	bne.n	80026dc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b02      	cmp	r3, #2
 8002666:	d139      	bne.n	80026dc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800268a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800268e:	d11d      	bne.n	80026cc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002694:	2b00      	cmp	r3, #0
 8002696:	d119      	bne.n	80026cc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0220 	bic.w	r2, r2, #32
 80026a6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f043 0201 	orr.w	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f87c 	bl	80027ca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0212 	mvn.w	r2, #18
 80026da:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d14f      	bne.n	800278a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d148      	bne.n	800278a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800271a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800271e:	d012      	beq.n	8002746 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800272a:	2b00      	cmp	r3, #0
 800272c:	d125      	bne.n	800277a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002738:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800273c:	d11d      	bne.n	800277a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002742:	2b00      	cmp	r3, #0
 8002744:	d119      	bne.n	800277a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002754:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d105      	bne.n	800277a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f971 	bl	8002a62 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 020c 	mvn.w	r2, #12
 8002788:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d114      	bne.n	80027c2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10d      	bne.n	80027c2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f812 	bl	80027dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0201 	mvn.w	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x20>
 800280c:	2302      	movs	r3, #2
 800280e:	e0dc      	b.n	80029ca <HAL_ADC_ConfigChannel+0x1da>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d81c      	bhi.n	800285a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b05      	subs	r3, #5
 8002832:	221f      	movs	r2, #31
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	4019      	ands	r1, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	3b05      	subs	r3, #5
 800284c:	fa00 f203 	lsl.w	r2, r0, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	635a      	str	r2, [r3, #52]	; 0x34
 8002858:	e03c      	b.n	80028d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d81c      	bhi.n	800289c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3b23      	subs	r3, #35	; 0x23
 8002874:	221f      	movs	r2, #31
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	4019      	ands	r1, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b23      	subs	r3, #35	; 0x23
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
 800289a:	e01b      	b.n	80028d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b41      	subs	r3, #65	; 0x41
 80028ae:	221f      	movs	r2, #31
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4019      	ands	r1, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b41      	subs	r3, #65	; 0x41
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b09      	cmp	r3, #9
 80028da:	d91c      	bls.n	8002916 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68d9      	ldr	r1, [r3, #12]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	3b1e      	subs	r3, #30
 80028ee:	2207      	movs	r2, #7
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4019      	ands	r1, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6898      	ldr	r0, [r3, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	3b1e      	subs	r3, #30
 8002908:	fa00 f203 	lsl.w	r2, r0, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	e019      	b.n	800294a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6919      	ldr	r1, [r3, #16]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	2207      	movs	r2, #7
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	4019      	ands	r1, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6898      	ldr	r0, [r3, #8]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	fa00 f203 	lsl.w	r2, r0, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b10      	cmp	r3, #16
 8002950:	d003      	beq.n	800295a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002956:	2b11      	cmp	r3, #17
 8002958:	d132      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d125      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d126      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002980:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d11a      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a13      	ldr	r2, [pc, #76]	; (80029dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0c9a      	lsrs	r2, r3, #18
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x1b2>
 80029ae:	e007      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012400 	.word	0x40012400
 80029d8:	20000010 	.word	0x20000010
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d12e      	bne.n	8002a58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a0a:	f7ff fd39 	bl	8002480 <HAL_GetTick>
 8002a0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a10:	e01b      	b.n	8002a4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a12:	f7ff fd35 	bl	8002480 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d914      	bls.n	8002a4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10d      	bne.n	8002a4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f043 0210 	orr.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e007      	b.n	8002a5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d0dc      	beq.n	8002a12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4906      	ldr	r1, [pc, #24]	; (8002b0c <__NVIC_EnableIRQ+0x34>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff4f 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf0:	f7ff ff64 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ffb2 	bl	8002b64 <NVIC_EncodePriority>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff81 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff57 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e043      	b.n	8002cd2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_DMA_Init+0xa8>)
 8002c52:	4413      	add	r3, r2
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_DMA_Init+0xac>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_DMA_Init+0xb0>)
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	bffdfff8 	.word	0xbffdfff8
 8002ce0:	cccccccd 	.word	0xcccccccd
 8002ce4:	40020000 	.word	0x40020000

08002ce8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d008      	beq.n	8002d10 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2204      	movs	r2, #4
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e020      	b.n	8002d52 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 020e 	bic.w	r2, r2, #14
 8002d1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d005      	beq.n	8002d7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2204      	movs	r2, #4
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e051      	b.n	8002e22 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 020e 	bic.w	r2, r2, #14
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_DMA_Abort_IT+0xd0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d029      	beq.n	8002dfc <HAL_DMA_Abort_IT+0xa0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_DMA_Abort_IT+0xd4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d022      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x9c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_DMA_Abort_IT+0xd8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01a      	beq.n	8002df2 <HAL_DMA_Abort_IT+0x96>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_DMA_Abort_IT+0xdc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d012      	beq.n	8002dec <HAL_DMA_Abort_IT+0x90>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_DMA_Abort_IT+0xe0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00a      	beq.n	8002de6 <HAL_DMA_Abort_IT+0x8a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_DMA_Abort_IT+0xe4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d102      	bne.n	8002de0 <HAL_DMA_Abort_IT+0x84>
 8002dda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dde:	e00e      	b.n	8002dfe <HAL_DMA_Abort_IT+0xa2>
 8002de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002de4:	e00b      	b.n	8002dfe <HAL_DMA_Abort_IT+0xa2>
 8002de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dea:	e008      	b.n	8002dfe <HAL_DMA_Abort_IT+0xa2>
 8002dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df0:	e005      	b.n	8002dfe <HAL_DMA_Abort_IT+0xa2>
 8002df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df6:	e002      	b.n	8002dfe <HAL_DMA_Abort_IT+0xa2>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	e000      	b.n	8002dfe <HAL_DMA_Abort_IT+0xa2>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <HAL_DMA_Abort_IT+0xe8>)
 8002e00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
    } 
  }
  return status;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40020008 	.word	0x40020008
 8002e30:	4002001c 	.word	0x4002001c
 8002e34:	40020030 	.word	0x40020030
 8002e38:	40020044 	.word	0x40020044
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	4002006c 	.word	0x4002006c
 8002e44:	40020000 	.word	0x40020000

08002e48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d04f      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xc8>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d04a      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0204 	bic.w	r2, r2, #4
 8002e96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a66      	ldr	r2, [pc, #408]	; (8003038 <HAL_DMA_IRQHandler+0x1f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d029      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0xae>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_DMA_IRQHandler+0x1f4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xaa>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a63      	ldr	r2, [pc, #396]	; (8003040 <HAL_DMA_IRQHandler+0x1f8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01a      	beq.n	8002eec <HAL_DMA_IRQHandler+0xa4>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a62      	ldr	r2, [pc, #392]	; (8003044 <HAL_DMA_IRQHandler+0x1fc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d012      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x9e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a60      	ldr	r2, [pc, #384]	; (8003048 <HAL_DMA_IRQHandler+0x200>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x98>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5f      	ldr	r2, [pc, #380]	; (800304c <HAL_DMA_IRQHandler+0x204>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d102      	bne.n	8002eda <HAL_DMA_IRQHandler+0x92>
 8002ed4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ed8:	e00e      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002eda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ede:	e00b      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002ee0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ee4:	e008      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002ee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eea:	e005      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef0:	e002      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002ef2:	2340      	movs	r3, #64	; 0x40
 8002ef4:	e000      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_DMA_IRQHandler+0x208>)
 8002efa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8094 	beq.w	800302e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f0e:	e08e      	b.n	800302e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	2202      	movs	r2, #2
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d056      	beq.n	8002fce <HAL_DMA_IRQHandler+0x186>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d051      	beq.n	8002fce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 020a 	bic.w	r2, r2, #10
 8002f46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a38      	ldr	r2, [pc, #224]	; (8003038 <HAL_DMA_IRQHandler+0x1f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d029      	beq.n	8002fae <HAL_DMA_IRQHandler+0x166>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a37      	ldr	r2, [pc, #220]	; (800303c <HAL_DMA_IRQHandler+0x1f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <HAL_DMA_IRQHandler+0x162>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a35      	ldr	r2, [pc, #212]	; (8003040 <HAL_DMA_IRQHandler+0x1f8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01a      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x15c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a34      	ldr	r2, [pc, #208]	; (8003044 <HAL_DMA_IRQHandler+0x1fc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d012      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x156>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a32      	ldr	r2, [pc, #200]	; (8003048 <HAL_DMA_IRQHandler+0x200>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00a      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x150>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a31      	ldr	r2, [pc, #196]	; (800304c <HAL_DMA_IRQHandler+0x204>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d102      	bne.n	8002f92 <HAL_DMA_IRQHandler+0x14a>
 8002f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f90:	e00e      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	e00b      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9c:	e008      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa2:	e005      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa8:	e002      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002faa:	2320      	movs	r3, #32
 8002fac:	e000      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <HAL_DMA_IRQHandler+0x208>)
 8002fb2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d034      	beq.n	800302e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fcc:	e02f      	b.n	800302e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d028      	beq.n	8003030 <HAL_DMA_IRQHandler+0x1e8>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d023      	beq.n	8003030 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 020e 	bic.w	r2, r2, #14
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    }
  }
  return;
 800302e:	bf00      	nop
 8003030:	bf00      	nop
}
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40020008 	.word	0x40020008
 800303c:	4002001c 	.word	0x4002001c
 8003040:	40020030 	.word	0x40020030
 8003044:	40020044 	.word	0x40020044
 8003048:	40020058 	.word	0x40020058
 800304c:	4002006c 	.word	0x4002006c
 8003050:	40020000 	.word	0x40020000

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b08b      	sub	sp, #44	; 0x2c
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003066:	e169      	b.n	800333c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003068:	2201      	movs	r2, #1
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8158 	bne.w	8003336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a9a      	ldr	r2, [pc, #616]	; (80032f4 <HAL_GPIO_Init+0x2a0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d05e      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 8003090:	4a98      	ldr	r2, [pc, #608]	; (80032f4 <HAL_GPIO_Init+0x2a0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d875      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 8003096:	4a98      	ldr	r2, [pc, #608]	; (80032f8 <HAL_GPIO_Init+0x2a4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d058      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 800309c:	4a96      	ldr	r2, [pc, #600]	; (80032f8 <HAL_GPIO_Init+0x2a4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d86f      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030a2:	4a96      	ldr	r2, [pc, #600]	; (80032fc <HAL_GPIO_Init+0x2a8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d052      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030a8:	4a94      	ldr	r2, [pc, #592]	; (80032fc <HAL_GPIO_Init+0x2a8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d869      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ae:	4a94      	ldr	r2, [pc, #592]	; (8003300 <HAL_GPIO_Init+0x2ac>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04c      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030b4:	4a92      	ldr	r2, [pc, #584]	; (8003300 <HAL_GPIO_Init+0x2ac>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d863      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ba:	4a92      	ldr	r2, [pc, #584]	; (8003304 <HAL_GPIO_Init+0x2b0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d046      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030c0:	4a90      	ldr	r2, [pc, #576]	; (8003304 <HAL_GPIO_Init+0x2b0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d85d      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030c6:	2b12      	cmp	r3, #18
 80030c8:	d82a      	bhi.n	8003120 <HAL_GPIO_Init+0xcc>
 80030ca:	2b12      	cmp	r3, #18
 80030cc:	d859      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <HAL_GPIO_Init+0x80>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	0800314f 	.word	0x0800314f
 80030d8:	08003129 	.word	0x08003129
 80030dc:	0800313b 	.word	0x0800313b
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	08003183 	.word	0x08003183
 80030e8:	08003183 	.word	0x08003183
 80030ec:	08003183 	.word	0x08003183
 80030f0:	08003183 	.word	0x08003183
 80030f4:	08003183 	.word	0x08003183
 80030f8:	08003183 	.word	0x08003183
 80030fc:	08003183 	.word	0x08003183
 8003100:	08003183 	.word	0x08003183
 8003104:	08003183 	.word	0x08003183
 8003108:	08003183 	.word	0x08003183
 800310c:	08003183 	.word	0x08003183
 8003110:	08003183 	.word	0x08003183
 8003114:	08003183 	.word	0x08003183
 8003118:	08003131 	.word	0x08003131
 800311c:	08003145 	.word	0x08003145
 8003120:	4a79      	ldr	r2, [pc, #484]	; (8003308 <HAL_GPIO_Init+0x2b4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003126:	e02c      	b.n	8003182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	623b      	str	r3, [r7, #32]
          break;
 800312e:	e029      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	3304      	adds	r3, #4
 8003136:	623b      	str	r3, [r7, #32]
          break;
 8003138:	e024      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	3308      	adds	r3, #8
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e01f      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	330c      	adds	r3, #12
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e01a      	b.n	8003184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003156:	2304      	movs	r3, #4
 8003158:	623b      	str	r3, [r7, #32]
          break;
 800315a:	e013      	b.n	8003184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003164:	2308      	movs	r3, #8
 8003166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	611a      	str	r2, [r3, #16]
          break;
 800316e:	e009      	b.n	8003184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003170:	2308      	movs	r3, #8
 8003172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	615a      	str	r2, [r3, #20]
          break;
 800317a:	e003      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
          break;
 8003180:	e000      	b.n	8003184 <HAL_GPIO_Init+0x130>
          break;
 8003182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2bff      	cmp	r3, #255	; 0xff
 8003188:	d801      	bhi.n	800318e <HAL_GPIO_Init+0x13a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	e001      	b.n	8003192 <HAL_GPIO_Init+0x13e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2bff      	cmp	r3, #255	; 0xff
 8003198:	d802      	bhi.n	80031a0 <HAL_GPIO_Init+0x14c>
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	e002      	b.n	80031a6 <HAL_GPIO_Init+0x152>
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	3b08      	subs	r3, #8
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	210f      	movs	r1, #15
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	431a      	orrs	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80b1 	beq.w	8003336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_GPIO_Init+0x2b8>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	4a4c      	ldr	r2, [pc, #304]	; (800330c <HAL_GPIO_Init+0x2b8>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6193      	str	r3, [r2, #24]
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_GPIO_Init+0x2b8>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031ec:	4a48      	ldr	r2, [pc, #288]	; (8003310 <HAL_GPIO_Init+0x2bc>)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a40      	ldr	r2, [pc, #256]	; (8003314 <HAL_GPIO_Init+0x2c0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d013      	beq.n	8003240 <HAL_GPIO_Init+0x1ec>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3f      	ldr	r2, [pc, #252]	; (8003318 <HAL_GPIO_Init+0x2c4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00d      	beq.n	800323c <HAL_GPIO_Init+0x1e8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3e      	ldr	r2, [pc, #248]	; (800331c <HAL_GPIO_Init+0x2c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <HAL_GPIO_Init+0x1e4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3d      	ldr	r2, [pc, #244]	; (8003320 <HAL_GPIO_Init+0x2cc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d101      	bne.n	8003234 <HAL_GPIO_Init+0x1e0>
 8003230:	2303      	movs	r3, #3
 8003232:	e006      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003234:	2304      	movs	r3, #4
 8003236:	e004      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003238:	2302      	movs	r3, #2
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003240:	2300      	movs	r3, #0
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	f002 0203 	and.w	r2, r2, #3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4093      	lsls	r3, r2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003252:	492f      	ldr	r1, [pc, #188]	; (8003310 <HAL_GPIO_Init+0x2bc>)
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	492c      	ldr	r1, [pc, #176]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e006      	b.n	8003288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800327a:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	43db      	mvns	r3, r3
 8003282:	4928      	ldr	r1, [pc, #160]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 8003284:	4013      	ands	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4922      	ldr	r1, [pc, #136]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	491e      	ldr	r1, [pc, #120]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d006      	beq.n	80032ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4918      	ldr	r1, [pc, #96]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ca:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	4914      	ldr	r1, [pc, #80]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d021      	beq.n	8003328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	490e      	ldr	r1, [pc, #56]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60cb      	str	r3, [r1, #12]
 80032f0:	e021      	b.n	8003336 <HAL_GPIO_Init+0x2e2>
 80032f2:	bf00      	nop
 80032f4:	10320000 	.word	0x10320000
 80032f8:	10310000 	.word	0x10310000
 80032fc:	10220000 	.word	0x10220000
 8003300:	10210000 	.word	0x10210000
 8003304:	10120000 	.word	0x10120000
 8003308:	10110000 	.word	0x10110000
 800330c:	40021000 	.word	0x40021000
 8003310:	40010000 	.word	0x40010000
 8003314:	40010800 	.word	0x40010800
 8003318:	40010c00 	.word	0x40010c00
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_GPIO_Init+0x304>)
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	43db      	mvns	r3, r3
 8003330:	4909      	ldr	r1, [pc, #36]	; (8003358 <HAL_GPIO_Init+0x304>)
 8003332:	4013      	ands	r3, r2
 8003334:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	3301      	adds	r3, #1
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	f47f ae8e 	bne.w	8003068 <HAL_GPIO_Init+0x14>
  }
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	372c      	adds	r7, #44	; 0x2c
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40010400 	.word	0x40010400

0800335c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
 8003368:	4613      	mov	r3, r2
 800336a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003378:	e003      	b.n	8003382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	041a      	lsls	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e26c      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8087 	beq.w	80034ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ac:	4b92      	ldr	r3, [pc, #584]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d00c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033b8:	4b8f      	ldr	r3, [pc, #572]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d112      	bne.n	80033ea <HAL_RCC_OscConfig+0x5e>
 80033c4:	4b8c      	ldr	r3, [pc, #560]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d10b      	bne.n	80033ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d2:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d06c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x12c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d168      	bne.n	80034b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e246      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x76>
 80033f4:	4b80      	ldr	r3, [pc, #512]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a7f      	ldr	r2, [pc, #508]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e02e      	b.n	8003460 <HAL_RCC_OscConfig+0xd4>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x98>
 800340a:	4b7b      	ldr	r3, [pc, #492]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7a      	ldr	r2, [pc, #488]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b78      	ldr	r3, [pc, #480]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a77      	ldr	r2, [pc, #476]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800341c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e01d      	b.n	8003460 <HAL_RCC_OscConfig+0xd4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0xbc>
 800342e:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a71      	ldr	r2, [pc, #452]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6e      	ldr	r2, [pc, #440]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0xd4>
 8003448:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6a      	ldr	r2, [pc, #424]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800344e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a67      	ldr	r2, [pc, #412]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800345a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7ff f80a 	bl	8002480 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7ff f806 	bl	8002480 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1fa      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	4b5d      	ldr	r3, [pc, #372]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0xe4>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe fff6 	bl	8002480 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe fff2 	bl	8002480 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1e6      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x10c>
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d063      	beq.n	800358e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c6:	4b4c      	ldr	r3, [pc, #304]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034d2:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d11c      	bne.n	8003518 <HAL_RCC_OscConfig+0x18c>
 80034de:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x176>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e1ba      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b3d      	ldr	r3, [pc, #244]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4939      	ldr	r1, [pc, #228]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	e03a      	b.n	800358e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003520:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7fe ffab 	bl	8002480 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352e:	f7fe ffa7 	bl	8002480 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e19b      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4927      	ldr	r1, [pc, #156]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]
 8003560:	e015      	b.n	800358e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe ff8a 	bl	8002480 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003570:	f7fe ff86 	bl	8002480 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e17a      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d03a      	beq.n	8003610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d019      	beq.n	80035d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a8:	f7fe ff6a 	bl	8002480 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b0:	f7fe ff66 	bl	8002480 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e15a      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ce:	2001      	movs	r0, #1
 80035d0:	f000 fb08 	bl	8003be4 <RCC_Delay>
 80035d4:	e01c      	b.n	8003610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035dc:	f7fe ff50 	bl	8002480 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e2:	e00f      	b.n	8003604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe ff4c 	bl	8002480 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d908      	bls.n	8003604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e140      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	42420000 	.word	0x42420000
 8003600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	4b9e      	ldr	r3, [pc, #632]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e9      	bne.n	80035e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a6 	beq.w	800376a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b97      	ldr	r3, [pc, #604]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	4b94      	ldr	r3, [pc, #592]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4a93      	ldr	r2, [pc, #588]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	61d3      	str	r3, [r2, #28]
 800363a:	4b91      	ldr	r3, [pc, #580]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4b8e      	ldr	r3, [pc, #568]	; (8003884 <HAL_RCC_OscConfig+0x4f8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003656:	4b8b      	ldr	r3, [pc, #556]	; (8003884 <HAL_RCC_OscConfig+0x4f8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a8a      	ldr	r2, [pc, #552]	; (8003884 <HAL_RCC_OscConfig+0x4f8>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fe ff0d 	bl	8002480 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fe ff09 	bl	8002480 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b64      	cmp	r3, #100	; 0x64
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0fd      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b81      	ldr	r3, [pc, #516]	; (8003884 <HAL_RCC_OscConfig+0x4f8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x312>
 8003690:	4b7b      	ldr	r3, [pc, #492]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a7a      	ldr	r2, [pc, #488]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	e02d      	b.n	80036fa <HAL_RCC_OscConfig+0x36e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x334>
 80036a6:	4b76      	ldr	r3, [pc, #472]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a75      	ldr	r2, [pc, #468]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6213      	str	r3, [r2, #32]
 80036b2:	4b73      	ldr	r3, [pc, #460]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a72      	ldr	r2, [pc, #456]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	e01c      	b.n	80036fa <HAL_RCC_OscConfig+0x36e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b05      	cmp	r3, #5
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_OscConfig+0x356>
 80036c8:	4b6d      	ldr	r3, [pc, #436]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	4a6c      	ldr	r2, [pc, #432]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036ce:	f043 0304 	orr.w	r3, r3, #4
 80036d2:	6213      	str	r3, [r2, #32]
 80036d4:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4a69      	ldr	r2, [pc, #420]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6213      	str	r3, [r2, #32]
 80036e0:	e00b      	b.n	80036fa <HAL_RCC_OscConfig+0x36e>
 80036e2:	4b67      	ldr	r3, [pc, #412]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4a66      	ldr	r2, [pc, #408]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6213      	str	r3, [r2, #32]
 80036ee:	4b64      	ldr	r3, [pc, #400]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a63      	ldr	r2, [pc, #396]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d015      	beq.n	800372e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7fe febd 	bl	8002480 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe feb9 	bl	8002480 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0ab      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	4b57      	ldr	r3, [pc, #348]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ee      	beq.n	800370a <HAL_RCC_OscConfig+0x37e>
 800372c:	e014      	b.n	8003758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fe fea7 	bl	8002480 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe fea3 	bl	8002480 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e095      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	4b4c      	ldr	r3, [pc, #304]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ee      	bne.n	8003736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d105      	bne.n	800376a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4b48      	ldr	r3, [pc, #288]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4a47      	ldr	r2, [pc, #284]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8081 	beq.w	8003876 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003774:	4b42      	ldr	r3, [pc, #264]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d061      	beq.n	8003844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d146      	bne.n	8003816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <HAL_RCC_OscConfig+0x4fc>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7fe fe77 	bl	8002480 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003796:	f7fe fe73 	bl	8002480 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e067      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a8:	4b35      	ldr	r3, [pc, #212]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037bc:	d108      	bne.n	80037d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037be:	4b30      	ldr	r3, [pc, #192]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	492d      	ldr	r1, [pc, #180]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d0:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a19      	ldr	r1, [r3, #32]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	430b      	orrs	r3, r1
 80037e2:	4927      	ldr	r1, [pc, #156]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <HAL_RCC_OscConfig+0x4fc>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fe fe47 	bl	8002480 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fe fe43 	bl	8002480 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e037      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x46a>
 8003814:	e02f      	b.n	8003876 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b1c      	ldr	r3, [pc, #112]	; (8003888 <HAL_RCC_OscConfig+0x4fc>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fe30 	bl	8002480 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fe2c 	bl	8002480 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e020      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x498>
 8003842:	e018      	b.n	8003876 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e013      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_OscConfig+0x4f4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	429a      	cmp	r2, r3
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000
 8003884:	40007000 	.word	0x40007000
 8003888:	42420060 	.word	0x42420060

0800388c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0d0      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d910      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b67      	ldr	r3, [pc, #412]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 0207 	bic.w	r2, r3, #7
 80038b6:	4965      	ldr	r1, [pc, #404]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b63      	ldr	r3, [pc, #396]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b8      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e8:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a58      	ldr	r2, [pc, #352]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800390a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390c:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	494d      	ldr	r1, [pc, #308]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d040      	beq.n	80039ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d115      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e07f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394a:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e073      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06b      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800396a:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f023 0203 	bic.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4936      	ldr	r1, [pc, #216]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800397c:	f7fe fd80 	bl	8002480 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	e00a      	b.n	800399a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003984:	f7fe fd7c 	bl	8002480 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e053      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 020c 	and.w	r2, r3, #12
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d1eb      	bne.n	8003984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ac:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d210      	bcs.n	80039dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 0207 	bic.w	r2, r3, #7
 80039c2:	4922      	ldr	r1, [pc, #136]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e032      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4916      	ldr	r1, [pc, #88]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	490e      	ldr	r1, [pc, #56]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a1a:	f000 f821 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	490a      	ldr	r1, [pc, #40]	; (8003a54 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	5ccb      	ldrb	r3, [r1, r3]
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <HAL_RCC_ClockConfig+0x1cc>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1d0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fc00 	bl	8002240 <HAL_InitTick>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40021000 	.word	0x40021000
 8003a54:	0800951c 	.word	0x0800951c
 8003a58:	20000010 	.word	0x20000010
 8003a5c:	20000014 	.word	0x20000014

08003a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a60:	b490      	push	{r4, r7}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a66:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a68:	1d3c      	adds	r4, r7, #4
 8003a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a70:	f240 2301 	movw	r3, #513	; 0x201
 8003a74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d002      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x46>
 8003a9e:	e02d      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa2:	623b      	str	r3, [r7, #32]
      break;
 8003aa4:	e02d      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	0c9b      	lsrs	r3, r3, #18
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ab8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0c5b      	lsrs	r3, r3, #17
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ad8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ade:	fb02 f203 	mul.w	r2, r2, r3
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	e004      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	623b      	str	r3, [r7, #32]
      break;
 8003afa:	e002      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003afe:	623b      	str	r3, [r7, #32]
      break;
 8003b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b02:	6a3b      	ldr	r3, [r7, #32]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3728      	adds	r7, #40	; 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc90      	pop	{r4, r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	0800941c 	.word	0x0800941c
 8003b14:	40021000 	.word	0x40021000
 8003b18:	007a1200 	.word	0x007a1200
 8003b1c:	003d0900 	.word	0x003d0900

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b02      	ldr	r3, [pc, #8]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	20000010 	.word	0x20000010

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b38:	f7ff fff2 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	0800952c 	.word	0x0800952c

08003b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b60:	f7ff ffde 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0adb      	lsrs	r3, r3, #11
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4903      	ldr	r1, [pc, #12]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	0800952c 	.word	0x0800952c

08003b84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	220f      	movs	r2, #15
 8003b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_RCC_GetClockConfig+0x58>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0203 	and.w	r2, r3, #3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <HAL_RCC_GetClockConfig+0x58>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_GetClockConfig+0x58>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCC_GetClockConfig+0x58>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	08db      	lsrs	r3, r3, #3
 8003bbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0207 	and.w	r2, r3, #7
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40022000 	.word	0x40022000

08003be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <RCC_Delay+0x34>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <RCC_Delay+0x38>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	0a5b      	lsrs	r3, r3, #9
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c00:	bf00      	nop
  }
  while (Delay --);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1e5a      	subs	r2, r3, #1
 8003c06:	60fa      	str	r2, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f9      	bne.n	8003c00 <RCC_Delay+0x1c>
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	20000010 	.word	0x20000010
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d07d      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c40:	4b4f      	ldr	r3, [pc, #316]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4a4b      	ldr	r2, [pc, #300]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c56:	61d3      	str	r3, [r2, #28]
 8003c58:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c64:	2301      	movs	r3, #1
 8003c66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d118      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c74:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a42      	ldr	r2, [pc, #264]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c80:	f7fe fbfe 	bl	8002480 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c86:	e008      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fe fbfa 	bl	8002480 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e06d      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca6:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d02e      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d027      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ccc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cce:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cda:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d014      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7fe fbc9 	bl	8002480 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fe fbc5 	bl	8002480 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e036      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ee      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4917      	ldr	r1, [pc, #92]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	490b      	ldr	r1, [pc, #44]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d62:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	4904      	ldr	r1, [pc, #16]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42420440 	.word	0x42420440

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e041      	b.n	8003e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f839 	bl	8003e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 fac2 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d001      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e03a      	b.n	8003eca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_TIM_Base_Start_IT+0x98>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00e      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x58>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d009      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x58>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x58>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a13      	ldr	r2, [pc, #76]	; (8003edc <HAL_TIM_Base_Start_IT+0xa0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d111      	bne.n	8003eb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d010      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb6:	e007      	b.n	8003ec8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800

08003ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fe f8f4 	bl	80020f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fa18 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d122      	bne.n	8003fda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d11b      	bne.n	8003fda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0202 	mvn.w	r2, #2
 8003faa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f9ac 	bl	800431e <HAL_TIM_IC_CaptureCallback>
 8003fc6:	e005      	b.n	8003fd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f99f 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f9ae 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d122      	bne.n	800402e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d11b      	bne.n	800402e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f06f 0204 	mvn.w	r2, #4
 8003ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f982 	bl	800431e <HAL_TIM_IC_CaptureCallback>
 800401a:	e005      	b.n	8004028 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f975 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f984 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b08      	cmp	r3, #8
 800403a:	d122      	bne.n	8004082 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b08      	cmp	r3, #8
 8004048:	d11b      	bne.n	8004082 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f06f 0208 	mvn.w	r2, #8
 8004052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2204      	movs	r2, #4
 8004058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f958 	bl	800431e <HAL_TIM_IC_CaptureCallback>
 800406e:	e005      	b.n	800407c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f94b 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f95a 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b10      	cmp	r3, #16
 800408e:	d122      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b10      	cmp	r3, #16
 800409c:	d11b      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f06f 0210 	mvn.w	r2, #16
 80040a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2208      	movs	r2, #8
 80040ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f92e 	bl	800431e <HAL_TIM_IC_CaptureCallback>
 80040c2:	e005      	b.n	80040d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f921 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f930 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10e      	bne.n	8004102 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d107      	bne.n	8004102 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f06f 0201 	mvn.w	r2, #1
 80040fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fd ff39 	bl	8001f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b80      	cmp	r3, #128	; 0x80
 800410e:	d10e      	bne.n	800412e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b80      	cmp	r3, #128	; 0x80
 800411c:	d107      	bne.n	800412e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fbb5 	bl	8004898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	d10e      	bne.n	800415a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d107      	bne.n	800415a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f8f4 	bl	8004342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b20      	cmp	r3, #32
 8004166:	d10e      	bne.n	8004186 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b20      	cmp	r3, #32
 8004174:	d107      	bne.n	8004186 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0220 	mvn.w	r2, #32
 800417e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fb80 	bl	8004886 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e0ac      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x174>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	f200 809f 	bhi.w	80042f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041f5 	.word	0x080041f5
 80041c4:	080042f9 	.word	0x080042f9
 80041c8:	080042f9 	.word	0x080042f9
 80041cc:	080042f9 	.word	0x080042f9
 80041d0:	08004235 	.word	0x08004235
 80041d4:	080042f9 	.word	0x080042f9
 80041d8:	080042f9 	.word	0x080042f9
 80041dc:	080042f9 	.word	0x080042f9
 80041e0:	08004277 	.word	0x08004277
 80041e4:	080042f9 	.word	0x080042f9
 80041e8:	080042f9 	.word	0x080042f9
 80041ec:	080042f9 	.word	0x080042f9
 80041f0:	080042b7 	.word	0x080042b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f90c 	bl	8004418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0204 	bic.w	r2, r2, #4
 800421e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6999      	ldr	r1, [r3, #24]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	619a      	str	r2, [r3, #24]
      break;
 8004232:	e062      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f952 	bl	80044e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6999      	ldr	r1, [r3, #24]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	021a      	lsls	r2, r3, #8
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	619a      	str	r2, [r3, #24]
      break;
 8004274:	e041      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f99b 	bl	80045b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0208 	orr.w	r2, r2, #8
 8004290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0204 	bic.w	r2, r2, #4
 80042a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69d9      	ldr	r1, [r3, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	61da      	str	r2, [r3, #28]
      break;
 80042b4:	e021      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 f9e5 	bl	800468c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69d9      	ldr	r1, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	61da      	str	r2, [r3, #28]
      break;
 80042f6:	e000      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80042f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a29      	ldr	r2, [pc, #164]	; (800440c <TIM_Base_SetConfig+0xb8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00b      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d007      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a26      	ldr	r2, [pc, #152]	; (8004410 <TIM_Base_SetConfig+0xbc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a25      	ldr	r2, [pc, #148]	; (8004414 <TIM_Base_SetConfig+0xc0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1c      	ldr	r2, [pc, #112]	; (800440c <TIM_Base_SetConfig+0xb8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <TIM_Base_SetConfig+0xbc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <TIM_Base_SetConfig+0xc0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a07      	ldr	r2, [pc, #28]	; (800440c <TIM_Base_SetConfig+0xb8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d103      	bne.n	80043fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	615a      	str	r2, [r3, #20]
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800

08004418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 0302 	bic.w	r3, r3, #2
 8004460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <TIM_OC1_SetConfig+0xc8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10c      	bne.n	800448e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0308 	bic.w	r3, r3, #8
 800447a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f023 0304 	bic.w	r3, r3, #4
 800448c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <TIM_OC1_SetConfig+0xc8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d111      	bne.n	80044ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800449c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00

080044e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0210 	bic.w	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0320 	bic.w	r3, r3, #32
 800452e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <TIM_OC2_SetConfig+0xd0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10d      	bne.n	8004560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <TIM_OC2_SetConfig+0xd0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d113      	bne.n	8004590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	40012c00 	.word	0x40012c00

080045b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <TIM_OC3_SetConfig+0xd0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d10d      	bne.n	8004632 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <TIM_OC3_SetConfig+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d113      	bne.n	8004662 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	621a      	str	r2, [r3, #32]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40012c00 	.word	0x40012c00

0800468c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	031b      	lsls	r3, r3, #12
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0f      	ldr	r2, [pc, #60]	; (8004724 <TIM_OC4_SetConfig+0x98>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d109      	bne.n	8004700 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	40012c00 	.word	0x40012c00

08004728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800473c:	2302      	movs	r3, #2
 800473e:	e046      	b.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d009      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a10      	ldr	r2, [pc, #64]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10c      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800

080047e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e03d      	b.n	800487c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e03f      	b.n	800493c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7fd fc61 	bl	8002198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2224      	movs	r2, #36	; 0x24
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fcf2 	bl	80052d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004902:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004912:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004922:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b20      	cmp	r3, #32
 800495c:	d130      	bne.n	80049c0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_UART_Transmit_IT+0x26>
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e029      	b.n	80049c2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_UART_Transmit_IT+0x38>
 8004978:	2302      	movs	r3, #2
 800497a:	e022      	b.n	80049c2 <HAL_UART_Transmit_IT+0x7e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2221      	movs	r2, #33	; 0x21
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049ba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
  }
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d11d      	bne.n	8004a22 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_UART_Receive_IT+0x26>
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e016      	b.n	8004a24 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_UART_Receive_IT+0x38>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e00f      	b.n	8004a24 <HAL_UART_Receive_IT+0x58>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	461a      	mov	r2, r3
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fabb 	bl	8004f94 <UART_Start_Receive_IT>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	e000      	b.n	8004a24 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
  }
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0210 	bic.w	r2, r2, #16
 8004a6a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02d      	beq.n	8004ad6 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695a      	ldr	r2, [r3, #20]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a88:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d013      	beq.n	8004aba <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	4a19      	ldr	r2, [pc, #100]	; (8004afc <HAL_UART_AbortReceive_IT+0xd0>)
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe f95c 	bl	8002d5c <HAL_DMA_Abort_IT>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d022      	beq.n	8004af0 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4798      	blx	r3
 8004ab8:	e01a      	b.n	8004af0 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9c9 	bl	8004e66 <HAL_UART_AbortReceiveCpltCallback>
 8004ad4:	e00c      	b.n	8004af0 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f9bb 	bl	8004e66 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	08005087 	.word	0x08005087

08004b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08a      	sub	sp, #40	; 0x28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_UART_IRQHandler+0x52>
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fb1a 	bl	8005184 <UART_Receive_IT>
      return;
 8004b50:	e17b      	b.n	8004e4a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80b1 	beq.w	8004cbc <HAL_UART_IRQHandler+0x1bc>
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <HAL_UART_IRQHandler+0x70>
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80a6 	beq.w	8004cbc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_UART_IRQHandler+0x90>
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_UART_IRQHandler+0xb0>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f043 0202 	orr.w	r2, r3, #2
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_UART_IRQHandler+0xd0>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00f      	beq.n	8004bfa <HAL_UART_IRQHandler+0xfa>
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_UART_IRQHandler+0xee>
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0208 	orr.w	r2, r3, #8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 811e 	beq.w	8004e40 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_UART_IRQHandler+0x11e>
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fab3 	bl	8005184 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <HAL_UART_IRQHandler+0x146>
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d031      	beq.n	8004caa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9dd 	bl	8005006 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d023      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d013      	beq.n	8004c9a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	4a76      	ldr	r2, [pc, #472]	; (8004e50 <HAL_UART_IRQHandler+0x350>)
 8004c78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe f86c 	bl	8002d5c <HAL_DMA_Abort_IT>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c94:	4610      	mov	r0, r2
 8004c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c98:	e00e      	b.n	8004cb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8da 	bl	8004e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	e00a      	b.n	8004cb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8d6 	bl	8004e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e006      	b.n	8004cb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8d2 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cb6:	e0c3      	b.n	8004e40 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	bf00      	nop
    return;
 8004cba:	e0c1      	b.n	8004e40 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	f040 80a1 	bne.w	8004e08 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 809b 	beq.w	8004e08 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8095 	beq.w	8004e08 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04e      	beq.n	8004da0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d0c:	8a3b      	ldrh	r3, [r7, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8098 	beq.w	8004e44 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d18:	8a3a      	ldrh	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f080 8092 	bcs.w	8004e44 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8a3a      	ldrh	r2, [r7, #16]
 8004d24:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d02b      	beq.n	8004d88 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d3e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0210 	bic.w	r2, r2, #16
 8004d7c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd ffb0 	bl	8002ce8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f86d 	bl	8004e78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d9e:	e051      	b.n	8004e44 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d047      	beq.n	8004e48 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004db8:	8a7b      	ldrh	r3, [r7, #18]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d044      	beq.n	8004e48 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dcc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0210 	bic.w	r2, r2, #16
 8004dfa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dfc:	8a7b      	ldrh	r3, [r7, #18]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f839 	bl	8004e78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e06:	e01f      	b.n	8004e48 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_UART_IRQHandler+0x324>
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f94a 	bl	80050b6 <UART_Transmit_IT>
    return;
 8004e22:	e012      	b.n	8004e4a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <HAL_UART_IRQHandler+0x34a>
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f98b 	bl	8005154 <UART_EndTransmit_IT>
    return;
 8004e3e:	e004      	b.n	8004e4a <HAL_UART_IRQHandler+0x34a>
    return;
 8004e40:	bf00      	nop
 8004e42:	e002      	b.n	8004e4a <HAL_UART_IRQHandler+0x34a>
      return;
 8004e44:	bf00      	nop
 8004e46:	e000      	b.n	8004e4a <HAL_UART_IRQHandler+0x34a>
      return;
 8004e48:	bf00      	nop
  }
}
 8004e4a:	3728      	adds	r7, #40	; 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	0800505f 	.word	0x0800505f

08004e54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr

08004e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e020      	b.n	8004eea <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2224      	movs	r2, #36	; 0x24
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 030c 	bic.w	r3, r3, #12
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f043 0308 	orr.w	r3, r3, #8
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e020      	b.n	8004f50 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2224      	movs	r2, #36	; 0x24
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f023 030c 	bic.w	r3, r3, #12
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	4313      	orrs	r3, r2
 8004f88:	b2db      	uxtb	r3, r3
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2222      	movs	r2, #34	; 0x22
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0220 	orr.w	r2, r2, #32
 8004ff8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr

08005006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800501c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0201 	bic.w	r2, r2, #1
 800502c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	2b01      	cmp	r3, #1
 8005034:	d107      	bne.n	8005046 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0210 	bic.w	r2, r2, #16
 8005044:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr

0800505e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff feeb 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff fedc 	bl	8004e66 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b21      	cmp	r3, #33	; 0x21
 80050c8:	d13e      	bne.n	8005148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d114      	bne.n	80050fe <UART_Transmit_IT+0x48>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d110      	bne.n	80050fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	1c9a      	adds	r2, r3, #2
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	621a      	str	r2, [r3, #32]
 80050fc:	e008      	b.n	8005110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	1c59      	adds	r1, r3, #1
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6211      	str	r1, [r2, #32]
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29b      	uxth	r3, r3
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4619      	mov	r1, r3
 800511e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10f      	bne.n	8005144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e000      	b.n	800514a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr

08005154 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fc fb75 	bl	8001864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b22      	cmp	r3, #34	; 0x22
 8005196:	f040 8099 	bne.w	80052cc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a2:	d117      	bne.n	80051d4 <UART_Receive_IT+0x50>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d113      	bne.n	80051d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	1c9a      	adds	r2, r3, #2
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	629a      	str	r2, [r3, #40]	; 0x28
 80051d2:	e026      	b.n	8005222 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	d007      	beq.n	80051f8 <UART_Receive_IT+0x74>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <UART_Receive_IT+0x82>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	e008      	b.n	8005218 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005212:	b2da      	uxtb	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29b      	uxth	r3, r3
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4619      	mov	r1, r3
 8005230:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005232:	2b00      	cmp	r3, #0
 8005234:	d148      	bne.n	80052c8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0220 	bic.w	r2, r2, #32
 8005244:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695a      	ldr	r2, [r3, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	2b01      	cmp	r3, #1
 8005274:	d123      	bne.n	80052be <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0210 	bic.w	r2, r2, #16
 800528a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b10      	cmp	r3, #16
 8005298:	d10a      	bne.n	80052b0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fdde 	bl	8004e78 <HAL_UARTEx_RxEventCallback>
 80052bc:	e002      	b.n	80052c4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fc fb0e 	bl	80018e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e002      	b.n	80052ce <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
  }
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005312:	f023 030c 	bic.w	r3, r3, #12
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	430b      	orrs	r3, r1
 800531e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <UART_SetConfig+0x114>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fe fc0c 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	e002      	b.n	800534e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fe fbf4 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 800534c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009a      	lsls	r2, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	4a22      	ldr	r2, [pc, #136]	; (80053f0 <UART_SetConfig+0x118>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	0119      	lsls	r1, r3, #4
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009a      	lsls	r2, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	fbb2 f2f3 	udiv	r2, r2, r3
 8005384:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <UART_SetConfig+0x118>)
 8005386:	fba3 0302 	umull	r0, r3, r3, r2
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2064      	movs	r0, #100	; 0x64
 800538e:	fb00 f303 	mul.w	r3, r0, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	3332      	adds	r3, #50	; 0x32
 8005398:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <UART_SetConfig+0x118>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a4:	4419      	add	r1, r3
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009a      	lsls	r2, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <UART_SetConfig+0x118>)
 80053be:	fba3 0302 	umull	r0, r3, r3, r2
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	2064      	movs	r0, #100	; 0x64
 80053c6:	fb00 f303 	mul.w	r3, r0, r3
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	3332      	adds	r3, #50	; 0x32
 80053d0:	4a07      	ldr	r2, [pc, #28]	; (80053f0 <UART_SetConfig+0x118>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	f003 020f 	and.w	r2, r3, #15
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	440a      	add	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40013800 	.word	0x40013800
 80053f0:	51eb851f 	.word	0x51eb851f

080053f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053fa:	f3ef 8305 	mrs	r3, IPSR
 80053fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005400:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	607b      	str	r3, [r7, #4]
  return(result);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <osKernelInitialize+0x32>
 8005412:	4b10      	ldr	r3, [pc, #64]	; (8005454 <osKernelInitialize+0x60>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d109      	bne.n	800542e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800541a:	f3ef 8311 	mrs	r3, BASEPRI
 800541e:	603b      	str	r3, [r7, #0]
  return(result);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005426:	f06f 0305 	mvn.w	r3, #5
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e00c      	b.n	8005448 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <osKernelInitialize+0x60>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d105      	bne.n	8005442 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <osKernelInitialize+0x60>)
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e002      	b.n	8005448 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	200000a8 	.word	0x200000a8

08005458 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800545e:	f3ef 8305 	mrs	r3, IPSR
 8005462:	60bb      	str	r3, [r7, #8]
  return(result);
 8005464:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546a:	f3ef 8310 	mrs	r3, PRIMASK
 800546e:	607b      	str	r3, [r7, #4]
  return(result);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <osKernelStart+0x32>
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <osKernelStart+0x64>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d109      	bne.n	8005492 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800547e:	f3ef 8311 	mrs	r3, BASEPRI
 8005482:	603b      	str	r3, [r7, #0]
  return(result);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <osKernelStart+0x3a>
    stat = osErrorISR;
 800548a:	f06f 0305 	mvn.w	r3, #5
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e00e      	b.n	80054b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <osKernelStart+0x64>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d107      	bne.n	80054aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800549a:	4b08      	ldr	r3, [pc, #32]	; (80054bc <osKernelStart+0x64>)
 800549c:	2202      	movs	r2, #2
 800549e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80054a0:	f001 fd4a 	bl	8006f38 <vTaskStartScheduler>
      stat = osOK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e002      	b.n	80054b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054b0:	68fb      	ldr	r3, [r7, #12]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	200000a8 	.word	0x200000a8

080054c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b092      	sub	sp, #72	; 0x48
 80054c4:	af04      	add	r7, sp, #16
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d0:	f3ef 8305 	mrs	r3, IPSR
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f040 8094 	bne.w	8005606 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054de:	f3ef 8310 	mrs	r3, PRIMASK
 80054e2:	623b      	str	r3, [r7, #32]
  return(result);
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 808d 	bne.w	8005606 <osThreadNew+0x146>
 80054ec:	4b48      	ldr	r3, [pc, #288]	; (8005610 <osThreadNew+0x150>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d106      	bne.n	8005502 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054f4:	f3ef 8311 	mrs	r3, BASEPRI
 80054f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 8082 	bne.w	8005606 <osThreadNew+0x146>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d07e      	beq.n	8005606 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800550c:	2318      	movs	r3, #24
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005510:	2300      	movs	r3, #0
 8005512:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005514:	f107 031b 	add.w	r3, r7, #27
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d045      	beq.n	80055b2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <osThreadNew+0x74>
        name = attr->name;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <osThreadNew+0x9a>
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	2b38      	cmp	r3, #56	; 0x38
 800554c:	d805      	bhi.n	800555a <osThreadNew+0x9a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <osThreadNew+0x9e>
        return (NULL);
 800555a:	2300      	movs	r3, #0
 800555c:	e054      	b.n	8005608 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	089b      	lsrs	r3, r3, #2
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <osThreadNew+0xd4>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b5b      	cmp	r3, #91	; 0x5b
 800557c:	d90a      	bls.n	8005594 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005582:	2b00      	cmp	r3, #0
 8005584:	d006      	beq.n	8005594 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <osThreadNew+0xd4>
        mem = 1;
 800558e:	2301      	movs	r3, #1
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
 8005592:	e010      	b.n	80055b6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10c      	bne.n	80055b6 <osThreadNew+0xf6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d108      	bne.n	80055b6 <osThreadNew+0xf6>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <osThreadNew+0xf6>
          mem = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b0:	e001      	b.n	80055b6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d110      	bne.n	80055de <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055c4:	9202      	str	r2, [sp, #8]
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f001 fae4 	bl	8006ba0 <xTaskCreateStatic>
 80055d8:	4603      	mov	r3, r0
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e013      	b.n	8005606 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d110      	bne.n	8005606 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	f107 0314 	add.w	r3, r7, #20
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f001 fb2e 	bl	8006c58 <xTaskCreate>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d001      	beq.n	8005606 <osThreadNew+0x146>
          hTask = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005606:	697b      	ldr	r3, [r7, #20]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3738      	adds	r7, #56	; 0x38
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	200000a8 	.word	0x200000a8

08005614 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800561a:	f3ef 8305 	mrs	r3, IPSR
 800561e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005620:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10f      	bne.n	8005646 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005626:	f3ef 8310 	mrs	r3, PRIMASK
 800562a:	607b      	str	r3, [r7, #4]
  return(result);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <osThreadYield+0x32>
 8005632:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <osThreadYield+0x5c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d109      	bne.n	800564e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800563a:	f3ef 8311 	mrs	r3, BASEPRI
 800563e:	603b      	str	r3, [r7, #0]
  return(result);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <osThreadYield+0x3a>
    stat = osErrorISR;
 8005646:	f06f 0305 	mvn.w	r3, #5
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e009      	b.n	8005662 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8005652:	4b08      	ldr	r3, [pc, #32]	; (8005674 <osThreadYield+0x60>)
 8005654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8005662:	68fb      	ldr	r3, [r7, #12]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	200000a8 	.word	0x200000a8
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005680:	f3ef 8305 	mrs	r3, IPSR
 8005684:	613b      	str	r3, [r7, #16]
  return(result);
 8005686:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10f      	bne.n	80056ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568c:	f3ef 8310 	mrs	r3, PRIMASK
 8005690:	60fb      	str	r3, [r7, #12]
  return(result);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <osDelay+0x34>
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <osDelay+0x58>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d109      	bne.n	80056b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056a0:	f3ef 8311 	mrs	r3, BASEPRI
 80056a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <osDelay+0x3c>
    stat = osErrorISR;
 80056ac:	f06f 0305 	mvn.w	r3, #5
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e007      	b.n	80056c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fc06 	bl	8006ed0 <vTaskDelay>
    }
  }

  return (stat);
 80056c4:	697b      	ldr	r3, [r7, #20]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200000a8 	.word	0x200000a8

080056d4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	; 0x30
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e4:	f3ef 8305 	mrs	r3, IPSR
 80056e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80056ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f040 8086 	bne.w	80057fe <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f2:	f3ef 8310 	mrs	r3, PRIMASK
 80056f6:	617b      	str	r3, [r7, #20]
  return(result);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d17f      	bne.n	80057fe <osSemaphoreNew+0x12a>
 80056fe:	4b42      	ldr	r3, [pc, #264]	; (8005808 <osSemaphoreNew+0x134>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d105      	bne.n	8005712 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005706:	f3ef 8311 	mrs	r3, BASEPRI
 800570a:	613b      	str	r3, [r7, #16]
  return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d175      	bne.n	80057fe <osSemaphoreNew+0x12a>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d072      	beq.n	80057fe <osSemaphoreNew+0x12a>
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	429a      	cmp	r2, r3
 800571e:	d86e      	bhi.n	80057fe <osSemaphoreNew+0x12a>
    mem = -1;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
 8005724:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d015      	beq.n	8005758 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d006      	beq.n	8005742 <osSemaphoreNew+0x6e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b4f      	cmp	r3, #79	; 0x4f
 800573a:	d902      	bls.n	8005742 <osSemaphoreNew+0x6e>
        mem = 1;
 800573c:	2301      	movs	r3, #1
 800573e:	623b      	str	r3, [r7, #32]
 8005740:	e00c      	b.n	800575c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d108      	bne.n	800575c <osSemaphoreNew+0x88>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <osSemaphoreNew+0x88>
          mem = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	e001      	b.n	800575c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	d04c      	beq.n	80057fe <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d128      	bne.n	80057bc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10a      	bne.n	8005786 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2203      	movs	r2, #3
 8005776:	9200      	str	r2, [sp, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	2100      	movs	r1, #0
 800577c:	2001      	movs	r0, #1
 800577e:	f000 fafb 	bl	8005d78 <xQueueGenericCreateStatic>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24
 8005784:	e005      	b.n	8005792 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005786:	2203      	movs	r2, #3
 8005788:	2100      	movs	r1, #0
 800578a:	2001      	movs	r0, #1
 800578c:	f000 fb6b 	bl	8005e66 <xQueueGenericCreate>
 8005790:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d022      	beq.n	80057de <osSemaphoreNew+0x10a>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01f      	beq.n	80057de <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800579e:	2300      	movs	r3, #0
 80057a0:	2200      	movs	r2, #0
 80057a2:	2100      	movs	r1, #0
 80057a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057a6:	f000 fc29 	bl	8005ffc <xQueueGenericSend>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d016      	beq.n	80057de <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80057b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057b2:	f001 f825 	bl	8006800 <vQueueDelete>
            hSemaphore = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	e010      	b.n	80057de <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d108      	bne.n	80057d4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	461a      	mov	r2, r3
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fbac 	bl	8005f28 <xQueueCreateCountingSemaphoreStatic>
 80057d0:	6278      	str	r0, [r7, #36]	; 0x24
 80057d2:	e004      	b.n	80057de <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fbdd 	bl	8005f96 <xQueueCreateCountingSemaphore>
 80057dc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00c      	beq.n	80057fe <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	e001      	b.n	80057f6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80057f6:	69f9      	ldr	r1, [r7, #28]
 80057f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057fa:	f001 f94b 	bl	8006a94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005800:	4618      	mov	r0, r3
 8005802:	3728      	adds	r7, #40	; 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200000a8 	.word	0x200000a8

0800580c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b08c      	sub	sp, #48	; 0x30
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800581c:	f3ef 8305 	mrs	r3, IPSR
 8005820:	61bb      	str	r3, [r7, #24]
  return(result);
 8005822:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005824:	2b00      	cmp	r3, #0
 8005826:	d16f      	bne.n	8005908 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005828:	f3ef 8310 	mrs	r3, PRIMASK
 800582c:	617b      	str	r3, [r7, #20]
  return(result);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d169      	bne.n	8005908 <osMessageQueueNew+0xfc>
 8005834:	4b37      	ldr	r3, [pc, #220]	; (8005914 <osMessageQueueNew+0x108>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d105      	bne.n	8005848 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800583c:	f3ef 8311 	mrs	r3, BASEPRI
 8005840:	613b      	str	r3, [r7, #16]
  return(result);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d15f      	bne.n	8005908 <osMessageQueueNew+0xfc>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d05c      	beq.n	8005908 <osMessageQueueNew+0xfc>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d059      	beq.n	8005908 <osMessageQueueNew+0xfc>
    mem = -1;
 8005854:	f04f 33ff 	mov.w	r3, #4294967295
 8005858:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d029      	beq.n	80058b4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d012      	beq.n	800588e <osMessageQueueNew+0x82>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b4f      	cmp	r3, #79	; 0x4f
 800586e:	d90e      	bls.n	800588e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <osMessageQueueNew+0x82>
        mem = 1;
 8005888:	2301      	movs	r3, #1
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	e014      	b.n	80058b8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d110      	bne.n	80058b8 <osMessageQueueNew+0xac>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10c      	bne.n	80058b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <osMessageQueueNew+0xac>
          mem = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	e001      	b.n	80058b8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10b      	bne.n	80058d6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2100      	movs	r1, #0
 80058c8:	9100      	str	r1, [sp, #0]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fa53 	bl	8005d78 <xQueueGenericCreateStatic>
 80058d2:	6278      	str	r0, [r7, #36]	; 0x24
 80058d4:	e008      	b.n	80058e8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80058dc:	2200      	movs	r2, #0
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fac0 	bl	8005e66 <xQueueGenericCreate>
 80058e6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00c      	beq.n	8005908 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <osMessageQueueNew+0xf0>
        name = attr->name;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	e001      	b.n	8005900 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005904:	f001 f8c6 	bl	8006a94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800590a:	4618      	mov	r0, r3
 800590c:	3728      	adds	r7, #40	; 0x28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200000a8 	.word	0x200000a8

08005918 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005930:	f3ef 8305 	mrs	r3, IPSR
 8005934:	61fb      	str	r3, [r7, #28]
  return(result);
 8005936:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10f      	bne.n	800595c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593c:	f3ef 8310 	mrs	r3, PRIMASK
 8005940:	61bb      	str	r3, [r7, #24]
  return(result);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <osMessageQueuePut+0x44>
 8005948:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <osMessageQueuePut+0xe0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d12e      	bne.n	80059ae <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005950:	f3ef 8311 	mrs	r3, BASEPRI
 8005954:	617b      	str	r3, [r7, #20]
  return(result);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d028      	beq.n	80059ae <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <osMessageQueuePut+0x56>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <osMessageQueuePut+0x56>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800596e:	f06f 0303 	mvn.w	r3, #3
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005974:	e039      	b.n	80059ea <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800597a:	f107 0210 	add.w	r2, r7, #16
 800597e:	2300      	movs	r3, #0
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	6a38      	ldr	r0, [r7, #32]
 8005984:	f000 fc38 	bl	80061f8 <xQueueGenericSendFromISR>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d003      	beq.n	8005996 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800598e:	f06f 0302 	mvn.w	r3, #2
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005994:	e029      	b.n	80059ea <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d026      	beq.n	80059ea <osMessageQueuePut+0xd2>
 800599c:	4b17      	ldr	r3, [pc, #92]	; (80059fc <osMessageQueuePut+0xe4>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80059ac:	e01d      	b.n	80059ea <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <osMessageQueuePut+0xa2>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80059ba:	f06f 0303 	mvn.w	r3, #3
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
 80059c0:	e014      	b.n	80059ec <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80059c2:	2300      	movs	r3, #0
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	6a38      	ldr	r0, [r7, #32]
 80059ca:	f000 fb17 	bl	8005ffc <xQueueGenericSend>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d00b      	beq.n	80059ec <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80059da:	f06f 0301 	mvn.w	r3, #1
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	e004      	b.n	80059ec <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80059e2:	f06f 0302 	mvn.w	r3, #2
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
 80059e8:	e000      	b.n	80059ec <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80059ea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3728      	adds	r7, #40	; 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	200000a8 	.word	0x200000a8
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a16:	f3ef 8305 	mrs	r3, IPSR
 8005a1a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a1c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10f      	bne.n	8005a42 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a22:	f3ef 8310 	mrs	r3, PRIMASK
 8005a26:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <osMessageQueueGet+0x42>
 8005a2e:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <osMessageQueueGet+0xdc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d12e      	bne.n	8005a94 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a36:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3a:	617b      	str	r3, [r7, #20]
  return(result);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d028      	beq.n	8005a94 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <osMessageQueueGet+0x54>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <osMessageQueueGet+0x54>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005a54:	f06f 0303 	mvn.w	r3, #3
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a5a:	e038      	b.n	8005ace <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005a60:	f107 0310 	add.w	r3, r7, #16
 8005a64:	461a      	mov	r2, r3
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	6a38      	ldr	r0, [r7, #32]
 8005a6a:	f000 fe49 	bl	8006700 <xQueueReceiveFromISR>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d003      	beq.n	8005a7c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005a74:	f06f 0302 	mvn.w	r3, #2
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a7a:	e028      	b.n	8005ace <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d025      	beq.n	8005ace <osMessageQueueGet+0xce>
 8005a82:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <osMessageQueueGet+0xe0>)
 8005a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a92:	e01c      	b.n	8005ace <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <osMessageQueueGet+0xa0>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005aa0:	f06f 0303 	mvn.w	r3, #3
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	e013      	b.n	8005ad0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6a38      	ldr	r0, [r7, #32]
 8005aae:	f000 fc3b 	bl	8006328 <xQueueReceive>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d00b      	beq.n	8005ad0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005abe:	f06f 0301 	mvn.w	r3, #1
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac4:	e004      	b.n	8005ad0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005ac6:	f06f 0302 	mvn.w	r3, #2
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
 8005acc:	e000      	b.n	8005ad0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ace:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3728      	adds	r7, #40	; 0x28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	200000a8 	.word	0x200000a8
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a06      	ldr	r2, [pc, #24]	; (8005b0c <vApplicationGetIdleTaskMemory+0x28>)
 8005af4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <vApplicationGetIdleTaskMemory+0x2c>)
 8005afa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	601a      	str	r2, [r3, #0]
}
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr
 8005b0c:	200000ac 	.word	0x200000ac
 8005b10:	20000108 	.word	0x20000108

08005b14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <vApplicationGetTimerTaskMemory+0x30>)
 8005b2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000308 	.word	0x20000308
 8005b44:	20000364 	.word	0x20000364

08005b48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f103 0208 	add.w	r2, r3, #8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f103 0208 	add.w	r2, r3, #8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f103 0208 	add.w	r2, r3, #8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr

08005b86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr

08005b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d103      	bne.n	8005c04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e00c      	b.n	8005c1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3308      	adds	r3, #8
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e002      	b.n	8005c12 <vListInsert+0x2e>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d2f6      	bcs.n	8005c0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	601a      	str	r2, [r3, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6892      	ldr	r2, [r2, #8]
 8005c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6852      	ldr	r2, [r2, #4]
 8005c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d103      	bne.n	8005c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	1e5a      	subs	r2, r3, #1
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr
	...

08005ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cd2:	f002 fd83 	bl	80087dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	3b01      	subs	r3, #1
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d08:	fb01 f303 	mul.w	r3, r1, r3
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	22ff      	movs	r2, #255	; 0xff
 8005d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	22ff      	movs	r2, #255	; 0xff
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d114      	bne.n	8005d52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01a      	beq.n	8005d66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3310      	adds	r3, #16
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fb9b 	bl	8007470 <xTaskRemoveFromEventList>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d012      	beq.n	8005d66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d40:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <xQueueGenericReset+0xcc>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	e009      	b.n	8005d66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3310      	adds	r3, #16
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fef6 	bl	8005b48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3324      	adds	r3, #36	; 0x24
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fef1 	bl	8005b48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d66:	f002 fd69 	bl	800883c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d6a:	2301      	movs	r3, #1
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08e      	sub	sp, #56	; 0x38
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <xQueueGenericCreateStatic+0x52>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <xQueueGenericCreateStatic+0x56>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <xQueueGenericCreateStatic+0x58>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	623b      	str	r3, [r7, #32]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <xQueueGenericCreateStatic+0x7e>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <xQueueGenericCreateStatic+0x82>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <xQueueGenericCreateStatic+0x84>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61fb      	str	r3, [r7, #28]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e16:	2350      	movs	r3, #80	; 0x50
 8005e18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b50      	cmp	r3, #80	; 0x50
 8005e1e:	d00a      	beq.n	8005e36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	61bb      	str	r3, [r7, #24]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00d      	beq.n	8005e5c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f843 	bl	8005ee2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3730      	adds	r7, #48	; 0x30
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b08a      	sub	sp, #40	; 0x28
 8005e6a:	af02      	add	r7, sp, #8
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	4613      	mov	r3, r2
 8005e72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	613b      	str	r3, [r7, #16]
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e004      	b.n	8005ea6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3350      	adds	r3, #80	; 0x50
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f002 fd96 	bl	80089dc <pvPortMalloc>
 8005eb0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00f      	beq.n	8005ed8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	3350      	adds	r3, #80	; 0x50
 8005ebc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ec6:	79fa      	ldrb	r2, [r7, #7]
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f805 	bl	8005ee2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d103      	bne.n	8005efe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e002      	b.n	8005f04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f10:	2101      	movs	r1, #1
 8005f12:	69b8      	ldr	r0, [r7, #24]
 8005f14:	f7ff fec8 	bl	8005ca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	61bb      	str	r3, [r7, #24]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d90a      	bls.n	8005f6e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	617b      	str	r3, [r7, #20]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f6e:	2302      	movs	r3, #2
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	2100      	movs	r1, #0
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff fefd 	bl	8005d78 <xQueueGenericCreateStatic>
 8005f7e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
	}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	613b      	str	r3, [r7, #16]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d90a      	bls.n	8005fda <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60fb      	str	r3, [r7, #12]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005fda:	2202      	movs	r2, #2
 8005fdc:	2100      	movs	r1, #0
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff ff41 	bl	8005e66 <xQueueGenericCreate>
 8005fe4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ff2:	697b      	ldr	r3, [r7, #20]
	}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08e      	sub	sp, #56	; 0x38
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800600a:	2300      	movs	r3, #0
 800600c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <xQueueGenericSend+0x32>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <xQueueGenericSend+0x40>
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <xQueueGenericSend+0x44>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <xQueueGenericSend+0x46>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <xQueueGenericSend+0x60>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006058:	bf00      	nop
 800605a:	e7fe      	b.n	800605a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d103      	bne.n	800606a <xQueueGenericSend+0x6e>
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <xQueueGenericSend+0x72>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <xQueueGenericSend+0x74>
 800606e:	2300      	movs	r3, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <xQueueGenericSend+0x8e>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	623b      	str	r3, [r7, #32]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800608a:	f001 fbb3 	bl	80077f4 <xTaskGetSchedulerState>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <xQueueGenericSend+0x9e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <xQueueGenericSend+0xa2>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <xQueueGenericSend+0xa4>
 800609e:	2300      	movs	r3, #0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xQueueGenericSend+0xbe>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	61fb      	str	r3, [r7, #28]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060ba:	f002 fb8f 	bl	80087dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d302      	bcc.n	80060d0 <xQueueGenericSend+0xd4>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d129      	bne.n	8006124 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d6:	f000 fbcd 	bl	8006874 <prvCopyDataToQueue>
 80060da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	3324      	adds	r3, #36	; 0x24
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 f9c1 	bl	8007470 <xTaskRemoveFromEventList>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d013      	beq.n	800611c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060f4:	4b3f      	ldr	r3, [pc, #252]	; (80061f4 <xQueueGenericSend+0x1f8>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	e00a      	b.n	800611c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800610c:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <xQueueGenericSend+0x1f8>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800611c:	f002 fb8e 	bl	800883c <vPortExitCritical>
				return pdPASS;
 8006120:	2301      	movs	r3, #1
 8006122:	e063      	b.n	80061ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800612a:	f002 fb87 	bl	800883c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800612e:	2300      	movs	r3, #0
 8006130:	e05c      	b.n	80061ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006138:	f107 0314 	add.w	r3, r7, #20
 800613c:	4618      	mov	r0, r3
 800613e:	f001 f9fb 	bl	8007538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006146:	f002 fb79 	bl	800883c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800614a:	f000 ff5b 	bl	8007004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800614e:	f002 fb45 	bl	80087dc <vPortEnterCritical>
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006158:	b25b      	sxtb	r3, r3
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615e:	d103      	bne.n	8006168 <xQueueGenericSend+0x16c>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800616e:	b25b      	sxtb	r3, r3
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d103      	bne.n	800617e <xQueueGenericSend+0x182>
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800617e:	f002 fb5d 	bl	800883c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006182:	1d3a      	adds	r2, r7, #4
 8006184:	f107 0314 	add.w	r3, r7, #20
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f001 f9ea 	bl	8007564 <xTaskCheckForTimeOut>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d124      	bne.n	80061e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006198:	f000 fc64 	bl	8006a64 <prvIsQueueFull>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d018      	beq.n	80061d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	3310      	adds	r3, #16
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 f910 	bl	80073d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061b2:	f000 fbef 	bl	8006994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061b6:	f000 ff33 	bl	8007020 <xTaskResumeAll>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f47f af7c 	bne.w	80060ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80061c2:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <xQueueGenericSend+0x1f8>)
 80061c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	e772      	b.n	80060ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061d6:	f000 fbdd 	bl	8006994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061da:	f000 ff21 	bl	8007020 <xTaskResumeAll>
 80061de:	e76c      	b.n	80060ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e2:	f000 fbd7 	bl	8006994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e6:	f000 ff1b 	bl	8007020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061ea:	2300      	movs	r3, #0
		}
	}
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3738      	adds	r7, #56	; 0x38
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	e000ed04 	.word	0xe000ed04

080061f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08e      	sub	sp, #56	; 0x38
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <xQueueGenericSendFromISR+0x3c>
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <xQueueGenericSendFromISR+0x40>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <xQueueGenericSendFromISR+0x42>
 8006238:	2300      	movs	r3, #0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	623b      	str	r3, [r7, #32]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b02      	cmp	r3, #2
 8006258:	d103      	bne.n	8006262 <xQueueGenericSendFromISR+0x6a>
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <xQueueGenericSendFromISR+0x6e>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <xQueueGenericSendFromISR+0x70>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fb      	str	r3, [r7, #28]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006282:	f002 fb6d 	bl	8008960 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006286:	f3ef 8211 	mrs	r2, BASEPRI
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	61ba      	str	r2, [r7, #24]
 800629c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800629e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d302      	bcc.n	80062b4 <xQueueGenericSendFromISR+0xbc>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d12c      	bne.n	800630e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062c4:	f000 fad6 	bl	8006874 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d112      	bne.n	80062f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	3324      	adds	r3, #36	; 0x24
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f8c6 	bl	8007470 <xTaskRemoveFromEventList>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00e      	beq.n	8006308 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e007      	b.n	8006308 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062fc:	3301      	adds	r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	b25a      	sxtb	r2, r3
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006308:	2301      	movs	r3, #1
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800630c:	e001      	b.n	8006312 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800630e:	2300      	movs	r3, #0
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800631c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800631e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006320:	4618      	mov	r0, r3
 8006322:	3738      	adds	r7, #56	; 0x38
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08c      	sub	sp, #48	; 0x30
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006334:	2300      	movs	r3, #0
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <xQueueReceive+0x30>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	623b      	str	r3, [r7, #32]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <xQueueReceive+0x3e>
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <xQueueReceive+0x42>
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <xQueueReceive+0x44>
 800636a:	2300      	movs	r3, #0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <xQueueReceive+0x5e>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	61fb      	str	r3, [r7, #28]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006386:	f001 fa35 	bl	80077f4 <xTaskGetSchedulerState>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <xQueueReceive+0x6e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <xQueueReceive+0x72>
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <xQueueReceive+0x74>
 800639a:	2300      	movs	r3, #0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <xQueueReceive+0x8e>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	61bb      	str	r3, [r7, #24]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80063b6:	f002 fa11 	bl	80087dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01f      	beq.n	8006406 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ca:	f000 fabd 	bl	8006948 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	1e5a      	subs	r2, r3, #1
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00f      	beq.n	80063fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	3310      	adds	r3, #16
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 f844 	bl	8007470 <xTaskRemoveFromEventList>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063ee:	4b3d      	ldr	r3, [pc, #244]	; (80064e4 <xQueueReceive+0x1bc>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063fe:	f002 fa1d 	bl	800883c <vPortExitCritical>
				return pdPASS;
 8006402:	2301      	movs	r3, #1
 8006404:	e069      	b.n	80064da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800640c:	f002 fa16 	bl	800883c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006410:	2300      	movs	r3, #0
 8006412:	e062      	b.n	80064da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800641a:	f107 0310 	add.w	r3, r7, #16
 800641e:	4618      	mov	r0, r3
 8006420:	f001 f88a 	bl	8007538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006428:	f002 fa08 	bl	800883c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800642c:	f000 fdea 	bl	8007004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006430:	f002 f9d4 	bl	80087dc <vPortEnterCritical>
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800643a:	b25b      	sxtb	r3, r3
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d103      	bne.n	800644a <xQueueReceive+0x122>
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <xQueueReceive+0x138>
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006460:	f002 f9ec 	bl	800883c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006464:	1d3a      	adds	r2, r7, #4
 8006466:	f107 0310 	add.w	r3, r7, #16
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f001 f879 	bl	8007564 <xTaskCheckForTimeOut>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d123      	bne.n	80064c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647a:	f000 fadd 	bl	8006a38 <prvIsQueueEmpty>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	3324      	adds	r3, #36	; 0x24
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4611      	mov	r1, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f000 ff9f 	bl	80073d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006494:	f000 fa7e 	bl	8006994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006498:	f000 fdc2 	bl	8007020 <xTaskResumeAll>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d189      	bne.n	80063b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80064a2:	4b10      	ldr	r3, [pc, #64]	; (80064e4 <xQueueReceive+0x1bc>)
 80064a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	e780      	b.n	80063b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b6:	f000 fa6d 	bl	8006994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ba:	f000 fdb1 	bl	8007020 <xTaskResumeAll>
 80064be:	e77a      	b.n	80063b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c2:	f000 fa67 	bl	8006994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064c6:	f000 fdab 	bl	8007020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064cc:	f000 fab4 	bl	8006a38 <prvIsQueueEmpty>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f43f af6f 	beq.w	80063b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3730      	adds	r7, #48	; 0x30
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08e      	sub	sp, #56	; 0x38
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	623b      	str	r3, [r7, #32]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	61fb      	str	r3, [r7, #28]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006538:	f001 f95c 	bl	80077f4 <xTaskGetSchedulerState>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d102      	bne.n	8006548 <xQueueSemaphoreTake+0x60>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <xQueueSemaphoreTake+0x64>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <xQueueSemaphoreTake+0x66>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	61bb      	str	r3, [r7, #24]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006568:	f002 f938 	bl	80087dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	d024      	beq.n	80065c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	1e5a      	subs	r2, r3, #1
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006588:	f001 fab4 	bl	8007af4 <pvTaskIncrementMutexHeldCount>
 800658c:	4602      	mov	r2, r0
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00f      	beq.n	80065ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	3310      	adds	r3, #16
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ff66 	bl	8007470 <xTaskRemoveFromEventList>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d007      	beq.n	80065ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065aa:	4b54      	ldr	r3, [pc, #336]	; (80066fc <xQueueSemaphoreTake+0x214>)
 80065ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065ba:	f002 f93f 	bl	800883c <vPortExitCritical>
				return pdPASS;
 80065be:	2301      	movs	r3, #1
 80065c0:	e097      	b.n	80066f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d111      	bne.n	80065ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	617b      	str	r3, [r7, #20]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80065e4:	f002 f92a 	bl	800883c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e082      	b.n	80066f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065f2:	f107 030c 	add.w	r3, r7, #12
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 ff9e 	bl	8007538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006600:	f002 f91c 	bl	800883c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006604:	f000 fcfe 	bl	8007004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006608:	f002 f8e8 	bl	80087dc <vPortEnterCritical>
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006612:	b25b      	sxtb	r3, r3
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d103      	bne.n	8006622 <xQueueSemaphoreTake+0x13a>
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006628:	b25b      	sxtb	r3, r3
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d103      	bne.n	8006638 <xQueueSemaphoreTake+0x150>
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006638:	f002 f900 	bl	800883c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800663c:	463a      	mov	r2, r7
 800663e:	f107 030c 	add.w	r3, r7, #12
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f000 ff8d 	bl	8007564 <xTaskCheckForTimeOut>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d132      	bne.n	80066b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006652:	f000 f9f1 	bl	8006a38 <prvIsQueueEmpty>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d026      	beq.n	80066aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006664:	f002 f8ba 	bl	80087dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	4618      	mov	r0, r3
 800666e:	f001 f8df 	bl	8007830 <xTaskPriorityInherit>
 8006672:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006674:	f002 f8e2 	bl	800883c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	3324      	adds	r3, #36	; 0x24
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fea5 	bl	80073d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006688:	f000 f984 	bl	8006994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800668c:	f000 fcc8 	bl	8007020 <xTaskResumeAll>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	f47f af68 	bne.w	8006568 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006698:	4b18      	ldr	r3, [pc, #96]	; (80066fc <xQueueSemaphoreTake+0x214>)
 800669a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	e75e      	b.n	8006568 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80066aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066ac:	f000 f972 	bl	8006994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066b0:	f000 fcb6 	bl	8007020 <xTaskResumeAll>
 80066b4:	e758      	b.n	8006568 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80066b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066b8:	f000 f96c 	bl	8006994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066bc:	f000 fcb0 	bl	8007020 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066c2:	f000 f9b9 	bl	8006a38 <prvIsQueueEmpty>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f43f af4d 	beq.w	8006568 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00d      	beq.n	80066f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80066d4:	f002 f882 	bl	80087dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80066d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066da:	f000 f8b4 	bl	8006846 <prvGetDisinheritPriorityAfterTimeout>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 f97e 	bl	80079e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80066ec:	f002 f8a6 	bl	800883c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3738      	adds	r7, #56	; 0x38
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	e000ed04 	.word	0xe000ed04

08006700 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08e      	sub	sp, #56	; 0x38
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	623b      	str	r3, [r7, #32]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <xQueueReceiveFromISR+0x3a>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <xQueueReceiveFromISR+0x3e>
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <xQueueReceiveFromISR+0x40>
 800673e:	2300      	movs	r3, #0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	61fb      	str	r3, [r7, #28]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800675a:	f002 f901 	bl	8008960 <vPortValidateInterruptPriority>
	__asm volatile
 800675e:	f3ef 8211 	mrs	r2, BASEPRI
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	61ba      	str	r2, [r7, #24]
 8006774:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006776:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02f      	beq.n	80067e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800678c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006794:	f000 f8d8 	bl	8006948 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	1e5a      	subs	r2, r3, #1
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d112      	bne.n	80067d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d016      	beq.n	80067e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	3310      	adds	r3, #16
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fe5a 	bl	8007470 <xTaskRemoveFromEventList>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e007      	b.n	80067e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80067d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067d4:	3301      	adds	r3, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	b25a      	sxtb	r2, r3
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80067e0:	2301      	movs	r3, #1
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
 80067e4:	e001      	b.n	80067ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f383 8811 	msr	BASEPRI, r3
}
 80067f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3738      	adds	r7, #56	; 0x38
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <vQueueDelete+0x28>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60bb      	str	r3, [r7, #8]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 f95b 	bl	8006ae4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f002 f8e1 	bl	8008a00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d006      	beq.n	8006864 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e001      	b.n	8006868 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006868:	68fb      	ldr	r3, [r7, #12]
	}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10d      	bne.n	80068ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d14d      	bne.n	8006936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 f834 	bl	800790c <xTaskPriorityDisinherit>
 80068a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	605a      	str	r2, [r3, #4]
 80068ac:	e043      	b.n	8006936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d119      	bne.n	80068e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6898      	ldr	r0, [r3, #8]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	461a      	mov	r2, r3
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	f002 f8ea 	bl	8008a98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	441a      	add	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d32b      	bcc.n	8006936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	e026      	b.n	8006936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68d8      	ldr	r0, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	461a      	mov	r2, r3
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	f002 f8d0 	bl	8008a98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	425b      	negs	r3, r3
 8006902:	441a      	add	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d207      	bcs.n	8006924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	425b      	negs	r3, r3
 800691e:	441a      	add	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d105      	bne.n	8006936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	3b01      	subs	r3, #1
 8006934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800693e:	697b      	ldr	r3, [r7, #20]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d018      	beq.n	800698c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	441a      	add	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d303      	bcc.n	800697c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68d9      	ldr	r1, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	461a      	mov	r2, r3
 8006986:	6838      	ldr	r0, [r7, #0]
 8006988:	f002 f886 	bl	8008a98 <memcpy>
	}
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800699c:	f001 ff1e 	bl	80087dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069a8:	e011      	b.n	80069ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d012      	beq.n	80069d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3324      	adds	r3, #36	; 0x24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fd5a 	bl	8007470 <xTaskRemoveFromEventList>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069c2:	f000 fe31 	bl	8007628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dce9      	bgt.n	80069aa <prvUnlockQueue+0x16>
 80069d6:	e000      	b.n	80069da <prvUnlockQueue+0x46>
					break;
 80069d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	22ff      	movs	r2, #255	; 0xff
 80069de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069e2:	f001 ff2b 	bl	800883c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069e6:	f001 fef9 	bl	80087dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069f2:	e011      	b.n	8006a18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d012      	beq.n	8006a22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3310      	adds	r3, #16
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fd35 	bl	8007470 <xTaskRemoveFromEventList>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a0c:	f000 fe0c 	bl	8007628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dce9      	bgt.n	80069f4 <prvUnlockQueue+0x60>
 8006a20:	e000      	b.n	8006a24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	22ff      	movs	r2, #255	; 0xff
 8006a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a2c:	f001 ff06 	bl	800883c <vPortExitCritical>
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a40:	f001 fecc 	bl	80087dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e001      	b.n	8006a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a56:	f001 fef1 	bl	800883c <vPortExitCritical>

	return xReturn;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a6c:	f001 feb6 	bl	80087dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d102      	bne.n	8006a82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	e001      	b.n	8006a86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a86:	f001 fed9 	bl	800883c <vPortExitCritical>

	return xReturn;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e014      	b.n	8006ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006aa4:	4a0e      	ldr	r2, [pc, #56]	; (8006ae0 <vQueueAddToRegistry+0x4c>)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10b      	bne.n	8006ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ab0:	490b      	ldr	r1, [pc, #44]	; (8006ae0 <vQueueAddToRegistry+0x4c>)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aba:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <vQueueAddToRegistry+0x4c>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ac6:	e006      	b.n	8006ad6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b07      	cmp	r3, #7
 8006ad2:	d9e7      	bls.n	8006aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	20001044 	.word	0x20001044

08006ae4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e016      	b.n	8006b20 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006af2:	4a10      	ldr	r2, [pc, #64]	; (8006b34 <vQueueUnregisterQueue+0x50>)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	4413      	add	r3, r2
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d10b      	bne.n	8006b1a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006b02:	4a0c      	ldr	r2, [pc, #48]	; (8006b34 <vQueueUnregisterQueue+0x50>)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2100      	movs	r1, #0
 8006b08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006b0c:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <vQueueUnregisterQueue+0x50>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4413      	add	r3, r2
 8006b14:	2200      	movs	r2, #0
 8006b16:	605a      	str	r2, [r3, #4]
				break;
 8006b18:	e006      	b.n	8006b28 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b07      	cmp	r3, #7
 8006b24:	d9e5      	bls.n	8006af2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20001044 	.word	0x20001044

08006b38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b48:	f001 fe48 	bl	80087dc <vPortEnterCritical>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b52:	b25b      	sxtb	r3, r3
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d103      	bne.n	8006b62 <vQueueWaitForMessageRestricted+0x2a>
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d103      	bne.n	8006b78 <vQueueWaitForMessageRestricted+0x40>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b78:	f001 fe60 	bl	800883c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3324      	adds	r3, #36	; 0x24
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fc43 	bl	8007418 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b92:	6978      	ldr	r0, [r7, #20]
 8006b94:	f7ff fefe 	bl	8006994 <prvUnlockQueue>
	}
 8006b98:	bf00      	nop
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08e      	sub	sp, #56	; 0x38
 8006ba4:	af04      	add	r7, sp, #16
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTaskCreateStatic+0x2a>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	623b      	str	r3, [r7, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	61fb      	str	r3, [r7, #28]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006be6:	235c      	movs	r3, #92	; 0x5c
 8006be8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b5c      	cmp	r3, #92	; 0x5c
 8006bee:	d00a      	beq.n	8006c06 <xTaskCreateStatic+0x66>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	61bb      	str	r3, [r7, #24]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01e      	beq.n	8006c4a <xTaskCreateStatic+0xaa>
 8006c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c24:	2300      	movs	r3, #0
 8006c26:	9303      	str	r3, [sp, #12]
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	f107 0314 	add.w	r3, r7, #20
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f850 	bl	8006ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c44:	f000 f8d4 	bl	8006df0 <prvAddNewTaskToReadyList>
 8006c48:	e001      	b.n	8006c4e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c4e:	697b      	ldr	r3, [r7, #20]
	}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3728      	adds	r7, #40	; 0x28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	; 0x30
 8006c5c:	af04      	add	r7, sp, #16
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 feb5 	bl	80089dc <pvPortMalloc>
 8006c72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c7a:	205c      	movs	r0, #92	; 0x5c
 8006c7c:	f001 feae 	bl	80089dc <pvPortMalloc>
 8006c80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c8e:	e005      	b.n	8006c9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c90:	6978      	ldr	r0, [r7, #20]
 8006c92:	f001 feb5 	bl	8008a00 <vPortFree>
 8006c96:	e001      	b.n	8006c9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d017      	beq.n	8006cd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	2300      	movs	r3, #0
 8006cae:	9303      	str	r3, [sp, #12]
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f80e 	bl	8006ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cc6:	69f8      	ldr	r0, [r7, #28]
 8006cc8:	f000 f892 	bl	8006df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	e002      	b.n	8006cd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
	}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3720      	adds	r7, #32
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b088      	sub	sp, #32
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	21a5      	movs	r1, #165	; 0xa5
 8006cfc:	f001 feda 	bl	8008ab4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	f023 0307 	bic.w	r3, r3, #7
 8006d18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	617b      	str	r3, [r7, #20]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e012      	b.n	8006d66 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	7819      	ldrb	r1, [r3, #0]
 8006d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3334      	adds	r3, #52	; 0x34
 8006d50:	460a      	mov	r2, r1
 8006d52:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d006      	beq.n	8006d6e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	3301      	adds	r3, #1
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b0f      	cmp	r3, #15
 8006d6a:	d9e9      	bls.n	8006d40 <prvInitialiseNewTask+0x5e>
 8006d6c:	e000      	b.n	8006d70 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006d6e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	2b37      	cmp	r3, #55	; 0x37
 8006d7c:	d901      	bls.n	8006d82 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d7e:	2337      	movs	r3, #55	; 0x37
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	2200      	movs	r2, #0
 8006d92:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	3304      	adds	r3, #4
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fef4 	bl	8005b86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	3318      	adds	r3, #24
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe feef 	bl	8005b86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	69b8      	ldr	r0, [r7, #24]
 8006dd2:	f001 fc13 	bl	80085fc <pxPortInitialiseStack>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de8:	bf00      	nop
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006df8:	f001 fcf0 	bl	80087dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dfc:	4b2d      	ldr	r3, [pc, #180]	; (8006eb4 <prvAddNewTaskToReadyList+0xc4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	4a2c      	ldr	r2, [pc, #176]	; (8006eb4 <prvAddNewTaskToReadyList+0xc4>)
 8006e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e06:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <prvAddNewTaskToReadyList+0xc8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e0e:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <prvAddNewTaskToReadyList+0xc8>)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <prvAddNewTaskToReadyList+0xc4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d110      	bne.n	8006e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e1c:	f000 fc28 	bl	8007670 <prvInitialiseTaskLists>
 8006e20:	e00d      	b.n	8006e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e22:	4b26      	ldr	r3, [pc, #152]	; (8006ebc <prvAddNewTaskToReadyList+0xcc>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e2a:	4b23      	ldr	r3, [pc, #140]	; (8006eb8 <prvAddNewTaskToReadyList+0xc8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d802      	bhi.n	8006e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e38:	4a1f      	ldr	r2, [pc, #124]	; (8006eb8 <prvAddNewTaskToReadyList+0xc8>)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e3e:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <prvAddNewTaskToReadyList+0xd0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	4a1e      	ldr	r2, [pc, #120]	; (8006ec0 <prvAddNewTaskToReadyList+0xd0>)
 8006e46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e48:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <prvAddNewTaskToReadyList+0xd0>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <prvAddNewTaskToReadyList+0xd4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <prvAddNewTaskToReadyList+0x74>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <prvAddNewTaskToReadyList+0xd4>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <prvAddNewTaskToReadyList+0xd8>)
 8006e72:	441a      	add	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fe fe8f 	bl	8005b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e80:	f001 fcdc 	bl	800883c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e84:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <prvAddNewTaskToReadyList+0xcc>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <prvAddNewTaskToReadyList+0xc8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d207      	bcs.n	8006eaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <prvAddNewTaskToReadyList+0xdc>)
 8006e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000c38 	.word	0x20000c38
 8006eb8:	20000764 	.word	0x20000764
 8006ebc:	20000c44 	.word	0x20000c44
 8006ec0:	20000c54 	.word	0x20000c54
 8006ec4:	20000c40 	.word	0x20000c40
 8006ec8:	20000768 	.word	0x20000768
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d017      	beq.n	8006f12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ee2:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <vTaskDelay+0x60>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <vTaskDelay+0x30>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	60bb      	str	r3, [r7, #8]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f00:	f000 f880 	bl	8007004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f04:	2100      	movs	r1, #0
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 ffbe 	bl	8007e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f0c:	f000 f888 	bl	8007020 <xTaskResumeAll>
 8006f10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d107      	bne.n	8006f28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <vTaskDelay+0x64>)
 8006f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000c60 	.word	0x20000c60
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	; 0x28
 8006f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f46:	463a      	mov	r2, r7
 8006f48:	1d39      	adds	r1, r7, #4
 8006f4a:	f107 0308 	add.w	r3, r7, #8
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fdc8 	bl	8005ae4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	9202      	str	r2, [sp, #8]
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	460a      	mov	r2, r1
 8006f66:	4921      	ldr	r1, [pc, #132]	; (8006fec <vTaskStartScheduler+0xb4>)
 8006f68:	4821      	ldr	r0, [pc, #132]	; (8006ff0 <vTaskStartScheduler+0xb8>)
 8006f6a:	f7ff fe19 	bl	8006ba0 <xTaskCreateStatic>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4a20      	ldr	r2, [pc, #128]	; (8006ff4 <vTaskStartScheduler+0xbc>)
 8006f72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f74:	4b1f      	ldr	r3, [pc, #124]	; (8006ff4 <vTaskStartScheduler+0xbc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e001      	b.n	8006f86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d102      	bne.n	8006f92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f8c:	f000 ffd0 	bl	8007f30 <xTimerCreateTimerTask>
 8006f90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d116      	bne.n	8006fc6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	613b      	str	r3, [r7, #16]
}
 8006faa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fac:	4b12      	ldr	r3, [pc, #72]	; (8006ff8 <vTaskStartScheduler+0xc0>)
 8006fae:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <vTaskStartScheduler+0xc4>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006fba:	4b11      	ldr	r3, [pc, #68]	; (8007000 <vTaskStartScheduler+0xc8>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fc0:	f001 fb9a 	bl	80086f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fc4:	e00e      	b.n	8006fe4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d10a      	bne.n	8006fe4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <vTaskStartScheduler+0xaa>
}
 8006fe4:	bf00      	nop
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	0800942c 	.word	0x0800942c
 8006ff0:	08007641 	.word	0x08007641
 8006ff4:	20000c5c 	.word	0x20000c5c
 8006ff8:	20000c58 	.word	0x20000c58
 8006ffc:	20000c44 	.word	0x20000c44
 8007000:	20000c3c 	.word	0x20000c3c

08007004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007008:	4b04      	ldr	r3, [pc, #16]	; (800701c <vTaskSuspendAll+0x18>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	4a03      	ldr	r2, [pc, #12]	; (800701c <vTaskSuspendAll+0x18>)
 8007010:	6013      	str	r3, [r2, #0]
}
 8007012:	bf00      	nop
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000c60 	.word	0x20000c60

08007020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800702a:	2300      	movs	r3, #0
 800702c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800702e:	4b42      	ldr	r3, [pc, #264]	; (8007138 <xTaskResumeAll+0x118>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <xTaskResumeAll+0x2c>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	603b      	str	r3, [r7, #0]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800704c:	f001 fbc6 	bl	80087dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007050:	4b39      	ldr	r3, [pc, #228]	; (8007138 <xTaskResumeAll+0x118>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3b01      	subs	r3, #1
 8007056:	4a38      	ldr	r2, [pc, #224]	; (8007138 <xTaskResumeAll+0x118>)
 8007058:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800705a:	4b37      	ldr	r3, [pc, #220]	; (8007138 <xTaskResumeAll+0x118>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d162      	bne.n	8007128 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007062:	4b36      	ldr	r3, [pc, #216]	; (800713c <xTaskResumeAll+0x11c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d05e      	beq.n	8007128 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800706a:	e02f      	b.n	80070cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800706c:	4b34      	ldr	r3, [pc, #208]	; (8007140 <xTaskResumeAll+0x120>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3318      	adds	r3, #24
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe fdeb 	bl	8005c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3304      	adds	r3, #4
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fde6 	bl	8005c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	4b2d      	ldr	r3, [pc, #180]	; (8007144 <xTaskResumeAll+0x124>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d903      	bls.n	800709c <xTaskResumeAll+0x7c>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	4a2a      	ldr	r2, [pc, #168]	; (8007144 <xTaskResumeAll+0x124>)
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4a27      	ldr	r2, [pc, #156]	; (8007148 <xTaskResumeAll+0x128>)
 80070aa:	441a      	add	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f7fe fd73 	bl	8005b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	4b23      	ldr	r3, [pc, #140]	; (800714c <xTaskResumeAll+0x12c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d302      	bcc.n	80070cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80070c6:	4b22      	ldr	r3, [pc, #136]	; (8007150 <xTaskResumeAll+0x130>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070cc:	4b1c      	ldr	r3, [pc, #112]	; (8007140 <xTaskResumeAll+0x120>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1cb      	bne.n	800706c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070da:	f000 fb67 	bl	80077ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80070de:	4b1d      	ldr	r3, [pc, #116]	; (8007154 <xTaskResumeAll+0x134>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d010      	beq.n	800710c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070ea:	f000 f857 	bl	800719c <xTaskIncrementTick>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070f4:	4b16      	ldr	r3, [pc, #88]	; (8007150 <xTaskResumeAll+0x130>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f1      	bne.n	80070ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007106:	4b13      	ldr	r3, [pc, #76]	; (8007154 <xTaskResumeAll+0x134>)
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800710c:	4b10      	ldr	r3, [pc, #64]	; (8007150 <xTaskResumeAll+0x130>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007118:	4b0f      	ldr	r3, [pc, #60]	; (8007158 <xTaskResumeAll+0x138>)
 800711a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007128:	f001 fb88 	bl	800883c <vPortExitCritical>

	return xAlreadyYielded;
 800712c:	68bb      	ldr	r3, [r7, #8]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000c60 	.word	0x20000c60
 800713c:	20000c38 	.word	0x20000c38
 8007140:	20000bf8 	.word	0x20000bf8
 8007144:	20000c40 	.word	0x20000c40
 8007148:	20000768 	.word	0x20000768
 800714c:	20000764 	.word	0x20000764
 8007150:	20000c4c 	.word	0x20000c4c
 8007154:	20000c48 	.word	0x20000c48
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007162:	4b04      	ldr	r3, [pc, #16]	; (8007174 <xTaskGetTickCount+0x18>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007168:	687b      	ldr	r3, [r7, #4]
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr
 8007174:	20000c3c 	.word	0x20000c3c

08007178 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800717e:	f001 fbef 	bl	8008960 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007182:	2300      	movs	r3, #0
 8007184:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <xTaskGetTickCountFromISR+0x20>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800718c:	683b      	ldr	r3, [r7, #0]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000c3c 	.word	0x20000c3c

0800719c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071a6:	4b51      	ldr	r3, [pc, #324]	; (80072ec <xTaskIncrementTick+0x150>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 808e 	bne.w	80072cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071b0:	4b4f      	ldr	r3, [pc, #316]	; (80072f0 <xTaskIncrementTick+0x154>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071b8:	4a4d      	ldr	r2, [pc, #308]	; (80072f0 <xTaskIncrementTick+0x154>)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d120      	bne.n	8007206 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80071c4:	4b4b      	ldr	r3, [pc, #300]	; (80072f4 <xTaskIncrementTick+0x158>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	603b      	str	r3, [r7, #0]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <xTaskIncrementTick+0x46>
 80071e4:	4b43      	ldr	r3, [pc, #268]	; (80072f4 <xTaskIncrementTick+0x158>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	4b43      	ldr	r3, [pc, #268]	; (80072f8 <xTaskIncrementTick+0x15c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a41      	ldr	r2, [pc, #260]	; (80072f4 <xTaskIncrementTick+0x158>)
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	4a41      	ldr	r2, [pc, #260]	; (80072f8 <xTaskIncrementTick+0x15c>)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	4b40      	ldr	r3, [pc, #256]	; (80072fc <xTaskIncrementTick+0x160>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	4a3f      	ldr	r2, [pc, #252]	; (80072fc <xTaskIncrementTick+0x160>)
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	f000 fad3 	bl	80077ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007206:	4b3e      	ldr	r3, [pc, #248]	; (8007300 <xTaskIncrementTick+0x164>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	429a      	cmp	r2, r3
 800720e:	d34e      	bcc.n	80072ae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007210:	4b38      	ldr	r3, [pc, #224]	; (80072f4 <xTaskIncrementTick+0x158>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xTaskIncrementTick+0x82>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xTaskIncrementTick+0x84>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007224:	4b36      	ldr	r3, [pc, #216]	; (8007300 <xTaskIncrementTick+0x164>)
 8007226:	f04f 32ff 	mov.w	r2, #4294967295
 800722a:	601a      	str	r2, [r3, #0]
					break;
 800722c:	e03f      	b.n	80072ae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800722e:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <xTaskIncrementTick+0x158>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	429a      	cmp	r2, r3
 8007244:	d203      	bcs.n	800724e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007246:	4a2e      	ldr	r2, [pc, #184]	; (8007300 <xTaskIncrementTick+0x164>)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6013      	str	r3, [r2, #0]
						break;
 800724c:	e02f      	b.n	80072ae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	3304      	adds	r3, #4
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fcfe 	bl	8005c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	3318      	adds	r3, #24
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fcf5 	bl	8005c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	4b25      	ldr	r3, [pc, #148]	; (8007304 <xTaskIncrementTick+0x168>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d903      	bls.n	800727e <xTaskIncrementTick+0xe2>
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	4a22      	ldr	r2, [pc, #136]	; (8007304 <xTaskIncrementTick+0x168>)
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4a1f      	ldr	r2, [pc, #124]	; (8007308 <xTaskIncrementTick+0x16c>)
 800728c:	441a      	add	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	3304      	adds	r3, #4
 8007292:	4619      	mov	r1, r3
 8007294:	4610      	mov	r0, r2
 8007296:	f7fe fc82 	bl	8005b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729e:	4b1b      	ldr	r3, [pc, #108]	; (800730c <xTaskIncrementTick+0x170>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d3b3      	bcc.n	8007210 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ac:	e7b0      	b.n	8007210 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072ae:	4b17      	ldr	r3, [pc, #92]	; (800730c <xTaskIncrementTick+0x170>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4914      	ldr	r1, [pc, #80]	; (8007308 <xTaskIncrementTick+0x16c>)
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d907      	bls.n	80072d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	e004      	b.n	80072d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80072cc:	4b10      	ldr	r3, [pc, #64]	; (8007310 <xTaskIncrementTick+0x174>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	4a0f      	ldr	r2, [pc, #60]	; (8007310 <xTaskIncrementTick+0x174>)
 80072d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80072d6:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <xTaskIncrementTick+0x178>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80072de:	2301      	movs	r3, #1
 80072e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80072e2:	697b      	ldr	r3, [r7, #20]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000c60 	.word	0x20000c60
 80072f0:	20000c3c 	.word	0x20000c3c
 80072f4:	20000bf0 	.word	0x20000bf0
 80072f8:	20000bf4 	.word	0x20000bf4
 80072fc:	20000c50 	.word	0x20000c50
 8007300:	20000c58 	.word	0x20000c58
 8007304:	20000c40 	.word	0x20000c40
 8007308:	20000768 	.word	0x20000768
 800730c:	20000764 	.word	0x20000764
 8007310:	20000c48 	.word	0x20000c48
 8007314:	20000c4c 	.word	0x20000c4c

08007318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800731e:	4b27      	ldr	r3, [pc, #156]	; (80073bc <vTaskSwitchContext+0xa4>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007326:	4b26      	ldr	r3, [pc, #152]	; (80073c0 <vTaskSwitchContext+0xa8>)
 8007328:	2201      	movs	r2, #1
 800732a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800732c:	e041      	b.n	80073b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800732e:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <vTaskSwitchContext+0xa8>)
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007334:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <vTaskSwitchContext+0xac>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e010      	b.n	800735e <vTaskSwitchContext+0x46>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <vTaskSwitchContext+0x40>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	607b      	str	r3, [r7, #4]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <vTaskSwitchContext+0x3e>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3b01      	subs	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	491a      	ldr	r1, [pc, #104]	; (80073c8 <vTaskSwitchContext+0xb0>)
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0e4      	beq.n	800733c <vTaskSwitchContext+0x24>
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4a12      	ldr	r2, [pc, #72]	; (80073c8 <vTaskSwitchContext+0xb0>)
 800737e:	4413      	add	r3, r2
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	605a      	str	r2, [r3, #4]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	3308      	adds	r3, #8
 8007394:	429a      	cmp	r2, r3
 8007396:	d104      	bne.n	80073a2 <vTaskSwitchContext+0x8a>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	4a08      	ldr	r2, [pc, #32]	; (80073cc <vTaskSwitchContext+0xb4>)
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	4a05      	ldr	r2, [pc, #20]	; (80073c4 <vTaskSwitchContext+0xac>)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6013      	str	r3, [r2, #0]
}
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr
 80073bc:	20000c60 	.word	0x20000c60
 80073c0:	20000c4c 	.word	0x20000c4c
 80073c4:	20000c40 	.word	0x20000c40
 80073c8:	20000768 	.word	0x20000768
 80073cc:	20000764 	.word	0x20000764

080073d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	60fb      	str	r3, [r7, #12]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073f6:	4b07      	ldr	r3, [pc, #28]	; (8007414 <vTaskPlaceOnEventList+0x44>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3318      	adds	r3, #24
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fe fbf0 	bl	8005be4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007404:	2101      	movs	r1, #1
 8007406:	6838      	ldr	r0, [r7, #0]
 8007408:	f000 fd3e 	bl	8007e88 <prvAddCurrentTaskToDelayedList>
}
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000764 	.word	0x20000764

08007418 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	617b      	str	r3, [r7, #20]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <vTaskPlaceOnEventListRestricted+0x54>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3318      	adds	r3, #24
 8007446:	4619      	mov	r1, r3
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7fe fba8 	bl	8005b9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007454:	f04f 33ff 	mov.w	r3, #4294967295
 8007458:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	68b8      	ldr	r0, [r7, #8]
 800745e:	f000 fd13 	bl	8007e88 <prvAddCurrentTaskToDelayedList>
	}
 8007462:	bf00      	nop
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20000764 	.word	0x20000764

08007470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10a      	bne.n	800749c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60fb      	str	r3, [r7, #12]
}
 8007498:	bf00      	nop
 800749a:	e7fe      	b.n	800749a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	3318      	adds	r3, #24
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe fbd7 	bl	8005c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074a6:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <xTaskRemoveFromEventList+0xb0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11d      	bne.n	80074ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	3304      	adds	r3, #4
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fbce 	bl	8005c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4b19      	ldr	r3, [pc, #100]	; (8007524 <xTaskRemoveFromEventList+0xb4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <xTaskRemoveFromEventList+0x5c>
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	4a16      	ldr	r2, [pc, #88]	; (8007524 <xTaskRemoveFromEventList+0xb4>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4a13      	ldr	r2, [pc, #76]	; (8007528 <xTaskRemoveFromEventList+0xb8>)
 80074da:	441a      	add	r2, r3
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe fb5b 	bl	8005b9e <vListInsertEnd>
 80074e8:	e005      	b.n	80074f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	3318      	adds	r3, #24
 80074ee:	4619      	mov	r1, r3
 80074f0:	480e      	ldr	r0, [pc, #56]	; (800752c <xTaskRemoveFromEventList+0xbc>)
 80074f2:	f7fe fb54 	bl	8005b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fa:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <xTaskRemoveFromEventList+0xc0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	429a      	cmp	r2, r3
 8007502:	d905      	bls.n	8007510 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <xTaskRemoveFromEventList+0xc4>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	e001      	b.n	8007514 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007514:	697b      	ldr	r3, [r7, #20]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000c60 	.word	0x20000c60
 8007524:	20000c40 	.word	0x20000c40
 8007528:	20000768 	.word	0x20000768
 800752c:	20000bf8 	.word	0x20000bf8
 8007530:	20000764 	.word	0x20000764
 8007534:	20000c4c 	.word	0x20000c4c

08007538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <vTaskInternalSetTimeOutState+0x24>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <vTaskInternalSetTimeOutState+0x28>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	605a      	str	r2, [r3, #4]
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000c50 	.word	0x20000c50
 8007560:	20000c3c 	.word	0x20000c3c

08007564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10a      	bne.n	800758a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	613b      	str	r3, [r7, #16]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60fb      	str	r3, [r7, #12]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80075a6:	f001 f919 	bl	80087dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075aa:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <xTaskCheckForTimeOut+0xbc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c2:	d102      	bne.n	80075ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	e023      	b.n	8007612 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	4b15      	ldr	r3, [pc, #84]	; (8007624 <xTaskCheckForTimeOut+0xc0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d007      	beq.n	80075e6 <xTaskCheckForTimeOut+0x82>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d302      	bcc.n	80075e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	61fb      	str	r3, [r7, #28]
 80075e4:	e015      	b.n	8007612 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d20b      	bcs.n	8007608 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff ff9b 	bl	8007538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	e004      	b.n	8007612 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800760e:	2301      	movs	r3, #1
 8007610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007612:	f001 f913 	bl	800883c <vPortExitCritical>

	return xReturn;
 8007616:	69fb      	ldr	r3, [r7, #28]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000c3c 	.word	0x20000c3c
 8007624:	20000c50 	.word	0x20000c50

08007628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800762c:	4b03      	ldr	r3, [pc, #12]	; (800763c <vTaskMissedYield+0x14>)
 800762e:	2201      	movs	r2, #1
 8007630:	601a      	str	r2, [r3, #0]
}
 8007632:	bf00      	nop
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000c4c 	.word	0x20000c4c

08007640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007648:	f000 f852 	bl	80076f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <prvIdleTask+0x28>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d9f9      	bls.n	8007648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <prvIdleTask+0x2c>)
 8007656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007664:	e7f0      	b.n	8007648 <prvIdleTask+0x8>
 8007666:	bf00      	nop
 8007668:	20000768 	.word	0x20000768
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]
 800767a:	e00c      	b.n	8007696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4a12      	ldr	r2, [pc, #72]	; (80076d0 <prvInitialiseTaskLists+0x60>)
 8007688:	4413      	add	r3, r2
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fa5c 	bl	8005b48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3301      	adds	r3, #1
 8007694:	607b      	str	r3, [r7, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b37      	cmp	r3, #55	; 0x37
 800769a:	d9ef      	bls.n	800767c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800769c:	480d      	ldr	r0, [pc, #52]	; (80076d4 <prvInitialiseTaskLists+0x64>)
 800769e:	f7fe fa53 	bl	8005b48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076a2:	480d      	ldr	r0, [pc, #52]	; (80076d8 <prvInitialiseTaskLists+0x68>)
 80076a4:	f7fe fa50 	bl	8005b48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076a8:	480c      	ldr	r0, [pc, #48]	; (80076dc <prvInitialiseTaskLists+0x6c>)
 80076aa:	f7fe fa4d 	bl	8005b48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076ae:	480c      	ldr	r0, [pc, #48]	; (80076e0 <prvInitialiseTaskLists+0x70>)
 80076b0:	f7fe fa4a 	bl	8005b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076b4:	480b      	ldr	r0, [pc, #44]	; (80076e4 <prvInitialiseTaskLists+0x74>)
 80076b6:	f7fe fa47 	bl	8005b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076ba:	4b0b      	ldr	r3, [pc, #44]	; (80076e8 <prvInitialiseTaskLists+0x78>)
 80076bc:	4a05      	ldr	r2, [pc, #20]	; (80076d4 <prvInitialiseTaskLists+0x64>)
 80076be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076c0:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <prvInitialiseTaskLists+0x7c>)
 80076c2:	4a05      	ldr	r2, [pc, #20]	; (80076d8 <prvInitialiseTaskLists+0x68>)
 80076c4:	601a      	str	r2, [r3, #0]
}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000768 	.word	0x20000768
 80076d4:	20000bc8 	.word	0x20000bc8
 80076d8:	20000bdc 	.word	0x20000bdc
 80076dc:	20000bf8 	.word	0x20000bf8
 80076e0:	20000c0c 	.word	0x20000c0c
 80076e4:	20000c24 	.word	0x20000c24
 80076e8:	20000bf0 	.word	0x20000bf0
 80076ec:	20000bf4 	.word	0x20000bf4

080076f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076f6:	e019      	b.n	800772c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076f8:	f001 f870 	bl	80087dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80076fc:	4b10      	ldr	r3, [pc, #64]	; (8007740 <prvCheckTasksWaitingTermination+0x50>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe faa3 	bl	8005c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800770e:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <prvCheckTasksWaitingTermination+0x54>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3b01      	subs	r3, #1
 8007714:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <prvCheckTasksWaitingTermination+0x54>)
 8007716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007718:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <prvCheckTasksWaitingTermination+0x58>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3b01      	subs	r3, #1
 800771e:	4a0a      	ldr	r2, [pc, #40]	; (8007748 <prvCheckTasksWaitingTermination+0x58>)
 8007720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007722:	f001 f88b 	bl	800883c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f810 	bl	800774c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <prvCheckTasksWaitingTermination+0x58>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e1      	bne.n	80076f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000c0c 	.word	0x20000c0c
 8007744:	20000c38 	.word	0x20000c38
 8007748:	20000c20 	.word	0x20000c20

0800774c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800775a:	2b00      	cmp	r3, #0
 800775c:	d108      	bne.n	8007770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	4618      	mov	r0, r3
 8007764:	f001 f94c 	bl	8008a00 <vPortFree>
				vPortFree( pxTCB );
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 f949 	bl	8008a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800776e:	e018      	b.n	80077a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007776:	2b01      	cmp	r3, #1
 8007778:	d103      	bne.n	8007782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 f940 	bl	8008a00 <vPortFree>
	}
 8007780:	e00f      	b.n	80077a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007788:	2b02      	cmp	r3, #2
 800778a:	d00a      	beq.n	80077a2 <prvDeleteTCB+0x56>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60fb      	str	r3, [r7, #12]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <prvDeleteTCB+0x54>
	}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077b2:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <prvResetNextTaskUnblockTime+0x40>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <prvResetNextTaskUnblockTime+0x14>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <prvResetNextTaskUnblockTime+0x16>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077c6:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <prvResetNextTaskUnblockTime+0x44>)
 80077c8:	f04f 32ff 	mov.w	r2, #4294967295
 80077cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077ce:	e008      	b.n	80077e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <prvResetNextTaskUnblockTime+0x40>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	4a04      	ldr	r2, [pc, #16]	; (80077f0 <prvResetNextTaskUnblockTime+0x44>)
 80077e0:	6013      	str	r3, [r2, #0]
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr
 80077ec:	20000bf0 	.word	0x20000bf0
 80077f0:	20000c58 	.word	0x20000c58

080077f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077fa:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <xTaskGetSchedulerState+0x34>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d102      	bne.n	8007808 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007802:	2301      	movs	r3, #1
 8007804:	607b      	str	r3, [r7, #4]
 8007806:	e008      	b.n	800781a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <xTaskGetSchedulerState+0x38>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007810:	2302      	movs	r3, #2
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	e001      	b.n	800781a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007816:	2300      	movs	r3, #0
 8007818:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800781a:	687b      	ldr	r3, [r7, #4]
	}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	bc80      	pop	{r7}
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	20000c44 	.word	0x20000c44
 800782c:	20000c60 	.word	0x20000c60

08007830 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d056      	beq.n	80078f4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	4b2d      	ldr	r3, [pc, #180]	; (8007900 <xTaskPriorityInherit+0xd0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	429a      	cmp	r2, r3
 8007852:	d246      	bcs.n	80078e2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	2b00      	cmp	r3, #0
 800785a:	db06      	blt.n	800786a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785c:	4b28      	ldr	r3, [pc, #160]	; (8007900 <xTaskPriorityInherit+0xd0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007862:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6959      	ldr	r1, [r3, #20]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4a22      	ldr	r2, [pc, #136]	; (8007904 <xTaskPriorityInherit+0xd4>)
 800787c:	4413      	add	r3, r2
 800787e:	4299      	cmp	r1, r3
 8007880:	d101      	bne.n	8007886 <xTaskPriorityInherit+0x56>
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <xTaskPriorityInherit+0x58>
 8007886:	2300      	movs	r3, #0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d022      	beq.n	80078d2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	3304      	adds	r3, #4
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe f9df 	bl	8005c54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007896:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <xTaskPriorityInherit+0xd0>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	4b18      	ldr	r3, [pc, #96]	; (8007908 <xTaskPriorityInherit+0xd8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d903      	bls.n	80078b4 <xTaskPriorityInherit+0x84>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	4a15      	ldr	r2, [pc, #84]	; (8007908 <xTaskPriorityInherit+0xd8>)
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4a10      	ldr	r2, [pc, #64]	; (8007904 <xTaskPriorityInherit+0xd4>)
 80078c2:	441a      	add	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4619      	mov	r1, r3
 80078ca:	4610      	mov	r0, r2
 80078cc:	f7fe f967 	bl	8005b9e <vListInsertEnd>
 80078d0:	e004      	b.n	80078dc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078d2:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <xTaskPriorityInherit+0xd0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80078dc:	2301      	movs	r3, #1
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	e008      	b.n	80078f4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078e6:	4b06      	ldr	r3, [pc, #24]	; (8007900 <xTaskPriorityInherit+0xd0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d201      	bcs.n	80078f4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80078f0:	2301      	movs	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078f4:	68fb      	ldr	r3, [r7, #12]
	}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000764 	.word	0x20000764
 8007904:	20000768 	.word	0x20000768
 8007908:	20000c40 	.word	0x20000c40

0800790c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d056      	beq.n	80079d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007922:	4b2e      	ldr	r3, [pc, #184]	; (80079dc <xTaskPriorityDisinherit+0xd0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d00a      	beq.n	8007942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	60bb      	str	r3, [r7, #8]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007964:	1e5a      	subs	r2, r3, #1
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007972:	429a      	cmp	r2, r3
 8007974:	d02c      	beq.n	80079d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	2b00      	cmp	r3, #0
 800797c:	d128      	bne.n	80079d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe f966 	bl	8005c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <xTaskPriorityDisinherit+0xd4>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d903      	bls.n	80079b0 <xTaskPriorityDisinherit+0xa4>
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4a0c      	ldr	r2, [pc, #48]	; (80079e0 <xTaskPriorityDisinherit+0xd4>)
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4a09      	ldr	r2, [pc, #36]	; (80079e4 <xTaskPriorityDisinherit+0xd8>)
 80079be:	441a      	add	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4619      	mov	r1, r3
 80079c6:	4610      	mov	r0, r2
 80079c8:	f7fe f8e9 	bl	8005b9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079d0:	697b      	ldr	r3, [r7, #20]
	}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000764 	.word	0x20000764
 80079e0:	20000c40 	.word	0x20000c40
 80079e4:	20000768 	.word	0x20000768

080079e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80079f6:	2301      	movs	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d06f      	beq.n	8007ae0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	60fb      	str	r3, [r7, #12]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d902      	bls.n	8007a2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	e002      	b.n	8007a34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d050      	beq.n	8007ae0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d14b      	bne.n	8007ae0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a48:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d10a      	bne.n	8007a68 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60bb      	str	r3, [r7, #8]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	db04      	blt.n	8007a86 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	6959      	ldr	r1, [r3, #20]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4a15      	ldr	r2, [pc, #84]	; (8007aec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a96:	4413      	add	r3, r2
 8007a98:	4299      	cmp	r1, r3
 8007a9a:	d101      	bne.n	8007aa0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d01c      	beq.n	8007ae0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe f8d2 	bl	8005c54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d903      	bls.n	8007ac4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	4a0b      	ldr	r2, [pc, #44]	; (8007af0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4a06      	ldr	r2, [pc, #24]	; (8007aec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ad2:	441a      	add	r2, r3
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f7fe f85f 	bl	8005b9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ae0:	bf00      	nop
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	20000764 	.word	0x20000764
 8007aec:	20000768 	.word	0x20000768
 8007af0:	20000c40 	.word	0x20000c40

08007af4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007af8:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b06:	3201      	adds	r2, #1
 8007b08:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b0a:	4b03      	ldr	r3, [pc, #12]	; (8007b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
	}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	20000764 	.word	0x20000764

08007b1c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007b26:	f000 fe59 	bl	80087dc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007b2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ba4 <ulTaskNotifyTake+0x88>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d113      	bne.n	8007b5c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007b34:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <ulTaskNotifyTake+0x88>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b44:	2101      	movs	r1, #1
 8007b46:	6838      	ldr	r0, [r7, #0]
 8007b48:	f000 f99e 	bl	8007e88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b4c:	4b16      	ldr	r3, [pc, #88]	; (8007ba8 <ulTaskNotifyTake+0x8c>)
 8007b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b5c:	f000 fe6e 	bl	800883c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b60:	f000 fe3c 	bl	80087dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <ulTaskNotifyTake+0x88>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <ulTaskNotifyTake+0x88>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	655a      	str	r2, [r3, #84]	; 0x54
 8007b80:	e004      	b.n	8007b8c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007b82:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <ulTaskNotifyTake+0x88>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	3a01      	subs	r2, #1
 8007b8a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b8c:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <ulTaskNotifyTake+0x88>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8007b96:	f000 fe51 	bl	800883c <vPortExitCritical>

		return ulReturn;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
	}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20000764 	.word	0x20000764
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <xTaskGenericNotify+0x30>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	61bb      	str	r3, [r7, #24]
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007be0:	f000 fdfc 	bl	80087dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007bf8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d828      	bhi.n	8007c5a <xTaskGenericNotify+0xae>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <xTaskGenericNotify+0x64>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c5b 	.word	0x08007c5b
 8007c14:	08007c25 	.word	0x08007c25
 8007c18:	08007c33 	.word	0x08007c33
 8007c1c:	08007c3f 	.word	0x08007c3f
 8007c20:	08007c47 	.word	0x08007c47
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007c30:	e013      	b.n	8007c5a <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007c3c:	e00d      	b.n	8007c5a <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007c44:	e009      	b.n	8007c5a <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007c46:	7ffb      	ldrb	r3, [r7, #31]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d003      	beq.n	8007c54 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007c52:	e001      	b.n	8007c58 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007c58:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007c5a:	7ffb      	ldrb	r3, [r7, #31]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d13a      	bne.n	8007cd6 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fd fff5 	bl	8005c54 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ce4 <xTaskGenericNotify+0x138>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d903      	bls.n	8007c7e <xTaskGenericNotify+0xd2>
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <xTaskGenericNotify+0x138>)
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <xTaskGenericNotify+0x13c>)
 8007c8c:	441a      	add	r2, r3
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	3304      	adds	r3, #4
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f7fd ff82 	bl	8005b9e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <xTaskGenericNotify+0x10c>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	617b      	str	r3, [r7, #20]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <xTaskGenericNotify+0x140>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d907      	bls.n	8007cd6 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007cc6:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <xTaskGenericNotify+0x144>)
 8007cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007cd6:	f000 fdb1 	bl	800883c <vPortExitCritical>

		return xReturn;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3728      	adds	r7, #40	; 0x28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000c40 	.word	0x20000c40
 8007ce8:	20000768 	.word	0x20000768
 8007cec:	20000764 	.word	0x20000764
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08e      	sub	sp, #56	; 0x38
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007d04:	2301      	movs	r3, #1
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d24:	f000 fe1c 	bl	8008960 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007d2c:	f3ef 8211 	mrs	r2, BASEPRI
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	623a      	str	r2, [r7, #32]
 8007d42:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007d44:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d46:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d828      	bhi.n	8007dc0 <xTaskGenericNotifyFromISR+0xcc>
 8007d6e:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <xTaskGenericNotifyFromISR+0x80>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007dc1 	.word	0x08007dc1
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d97 	.word	0x08007d97
 8007d80:	08007da3 	.word	0x08007da3
 8007d84:	08007dab 	.word	0x08007dab
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d92:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007d94:	e014      	b.n	8007dc0 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007da0:	e00e      	b.n	8007dc0 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007da8:	e00a      	b.n	8007dc0 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d003      	beq.n	8007dba <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007db8:	e001      	b.n	8007dbe <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007dbe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007dc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d147      	bne.n	8007e58 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	61bb      	str	r3, [r7, #24]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de6:	4b22      	ldr	r3, [pc, #136]	; (8007e70 <xTaskGenericNotifyFromISR+0x17c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d11d      	bne.n	8007e2a <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	3304      	adds	r3, #4
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fd ff2e 	bl	8005c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <xTaskGenericNotifyFromISR+0x180>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d903      	bls.n	8007e0c <xTaskGenericNotifyFromISR+0x118>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4a1a      	ldr	r2, [pc, #104]	; (8007e74 <xTaskGenericNotifyFromISR+0x180>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a17      	ldr	r2, [pc, #92]	; (8007e78 <xTaskGenericNotifyFromISR+0x184>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fd febb 	bl	8005b9e <vListInsertEnd>
 8007e28:	e005      	b.n	8007e36 <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	3318      	adds	r3, #24
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4812      	ldr	r0, [pc, #72]	; (8007e7c <xTaskGenericNotifyFromISR+0x188>)
 8007e32:	f7fd feb4 	bl	8005b9e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3a:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <xTaskGenericNotifyFromISR+0x18c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d909      	bls.n	8007e58 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	e002      	b.n	8007e58 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <xTaskGenericNotifyFromISR+0x190>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f383 8811 	msr	BASEPRI, r3
}
 8007e62:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3738      	adds	r7, #56	; 0x38
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000c60 	.word	0x20000c60
 8007e74:	20000c40 	.word	0x20000c40
 8007e78:	20000768 	.word	0x20000768
 8007e7c:	20000bf8 	.word	0x20000bf8
 8007e80:	20000764 	.word	0x20000764
 8007e84:	20000c4c 	.word	0x20000c4c

08007e88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e92:	4b21      	ldr	r3, [pc, #132]	; (8007f18 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e98:	4b20      	ldr	r3, [pc, #128]	; (8007f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fd fed8 	bl	8005c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eaa:	d10a      	bne.n	8007ec2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb2:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4819      	ldr	r0, [pc, #100]	; (8007f20 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ebc:	f7fd fe6f 	bl	8005b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ec0:	e026      	b.n	8007f10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007eca:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d209      	bcs.n	8007eee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eda:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	f7fd fe7c 	bl	8005be4 <vListInsert>
}
 8007eec:	e010      	b.n	8007f10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f7fd fe72 	bl	8005be4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f00:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d202      	bcs.n	8007f10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f0a:	4a08      	ldr	r2, [pc, #32]	; (8007f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	6013      	str	r3, [r2, #0]
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	20000c3c 	.word	0x20000c3c
 8007f1c:	20000764 	.word	0x20000764
 8007f20:	20000c24 	.word	0x20000c24
 8007f24:	20000bf4 	.word	0x20000bf4
 8007f28:	20000bf0 	.word	0x20000bf0
 8007f2c:	20000c58 	.word	0x20000c58

08007f30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08a      	sub	sp, #40	; 0x28
 8007f34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f3a:	f000 fb1f 	bl	800857c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f3e:	4b1c      	ldr	r3, [pc, #112]	; (8007fb0 <xTimerCreateTimerTask+0x80>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d021      	beq.n	8007f8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f4e:	1d3a      	adds	r2, r7, #4
 8007f50:	f107 0108 	add.w	r1, r7, #8
 8007f54:	f107 030c 	add.w	r3, r7, #12
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fd fddb 	bl	8005b14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	9202      	str	r2, [sp, #8]
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	2302      	movs	r3, #2
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	460a      	mov	r2, r1
 8007f70:	4910      	ldr	r1, [pc, #64]	; (8007fb4 <xTimerCreateTimerTask+0x84>)
 8007f72:	4811      	ldr	r0, [pc, #68]	; (8007fb8 <xTimerCreateTimerTask+0x88>)
 8007f74:	f7fe fe14 	bl	8006ba0 <xTaskCreateStatic>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	4a10      	ldr	r2, [pc, #64]	; (8007fbc <xTimerCreateTimerTask+0x8c>)
 8007f7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <xTimerCreateTimerTask+0x8c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f86:	2301      	movs	r3, #1
 8007f88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	613b      	str	r3, [r7, #16]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007fa6:	697b      	ldr	r3, [r7, #20]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20000c94 	.word	0x20000c94
 8007fb4:	08009434 	.word	0x08009434
 8007fb8:	08008185 	.word	0x08008185
 8007fbc:	20000c98 	.word	0x20000c98

08007fc0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007fce:	2030      	movs	r0, #48	; 0x30
 8007fd0:	f000 fd04 	bl	80089dc <pvPortMalloc>
 8007fd4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00d      	beq.n	8007ff8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 f809 	bl	8008002 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007ff8:	697b      	ldr	r3, [r7, #20]
	}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b086      	sub	sp, #24
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10a      	bne.n	800802c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	617b      	str	r3, [r7, #20]
}
 8008028:	bf00      	nop
 800802a:	e7fe      	b.n	800802a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d015      	beq.n	800805e <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008032:	f000 faa3 	bl	800857c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	6a3a      	ldr	r2, [r7, #32]
 8008052:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	3304      	adds	r3, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f7fd fd94 	bl	8005b86 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800805e:	bf00      	nop
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	; 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008076:	2300      	movs	r3, #0
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	623b      	str	r3, [r7, #32]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <xTimerGenericCommand+0x98>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d02a      	beq.n	80080f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b05      	cmp	r3, #5
 80080ae:	dc18      	bgt.n	80080e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080b0:	f7ff fba0 	bl	80077f4 <xTaskGetSchedulerState>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d109      	bne.n	80080ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080ba:	4b11      	ldr	r3, [pc, #68]	; (8008100 <xTimerGenericCommand+0x98>)
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f107 0110 	add.w	r1, r7, #16
 80080c2:	2300      	movs	r3, #0
 80080c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c6:	f7fd ff99 	bl	8005ffc <xQueueGenericSend>
 80080ca:	6278      	str	r0, [r7, #36]	; 0x24
 80080cc:	e012      	b.n	80080f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <xTimerGenericCommand+0x98>)
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f107 0110 	add.w	r1, r7, #16
 80080d6:	2300      	movs	r3, #0
 80080d8:	2200      	movs	r2, #0
 80080da:	f7fd ff8f 	bl	8005ffc <xQueueGenericSend>
 80080de:	6278      	str	r0, [r7, #36]	; 0x24
 80080e0:	e008      	b.n	80080f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <xTimerGenericCommand+0x98>)
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f107 0110 	add.w	r1, r7, #16
 80080ea:	2300      	movs	r3, #0
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	f7fe f883 	bl	80061f8 <xQueueGenericSendFromISR>
 80080f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000c94 	.word	0x20000c94

08008104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af02      	add	r7, sp, #8
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800810e:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <prvProcessExpiredTimer+0x7c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	3304      	adds	r3, #4
 800811c:	4618      	mov	r0, r3
 800811e:	f7fd fd99 	bl	8005c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d122      	bne.n	8008170 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	18d1      	adds	r1, r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	6978      	ldr	r0, [r7, #20]
 8008138:	f000 f8c8 	bl	80082cc <prvInsertTimerInActiveList>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d016      	beq.n	8008170 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008142:	2300      	movs	r3, #0
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	2300      	movs	r3, #0
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	2100      	movs	r1, #0
 800814c:	6978      	ldr	r0, [r7, #20]
 800814e:	f7ff ff8b 	bl	8008068 <xTimerGenericCommand>
 8008152:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10a      	bne.n	8008170 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	60fb      	str	r3, [r7, #12]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	6978      	ldr	r0, [r7, #20]
 8008176:	4798      	blx	r3
}
 8008178:	bf00      	nop
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000c8c 	.word	0x20000c8c

08008184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800818c:	f107 0308 	add.w	r3, r7, #8
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f857 	bl	8008244 <prvGetNextExpireTime>
 8008196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4619      	mov	r1, r3
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f803 	bl	80081a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081a2:	f000 f8d5 	bl	8008350 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a6:	e7f1      	b.n	800818c <prvTimerTask+0x8>

080081a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081b2:	f7fe ff27 	bl	8007004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081b6:	f107 0308 	add.w	r3, r7, #8
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 f866 	bl	800828c <prvSampleTimeNow>
 80081c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d130      	bne.n	800822a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <prvProcessTimerOrBlockTask+0x3c>
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d806      	bhi.n	80081e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081d6:	f7fe ff23 	bl	8007020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ff91 	bl	8008104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081e2:	e024      	b.n	800822e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081ea:	4b13      	ldr	r3, [pc, #76]	; (8008238 <prvProcessTimerOrBlockTask+0x90>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf0c      	ite	eq
 80081f4:	2301      	moveq	r3, #1
 80081f6:	2300      	movne	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <prvProcessTimerOrBlockTask+0x94>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	4619      	mov	r1, r3
 800820a:	f7fe fc95 	bl	8006b38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800820e:	f7fe ff07 	bl	8007020 <xTaskResumeAll>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008218:	4b09      	ldr	r3, [pc, #36]	; (8008240 <prvProcessTimerOrBlockTask+0x98>)
 800821a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	f3bf 8f6f 	isb	sy
}
 8008228:	e001      	b.n	800822e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800822a:	f7fe fef9 	bl	8007020 <xTaskResumeAll>
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000c90 	.word	0x20000c90
 800823c:	20000c94 	.word	0x20000c94
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800824c:	4b0e      	ldr	r3, [pc, #56]	; (8008288 <prvGetNextExpireTime+0x44>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	bf0c      	ite	eq
 8008256:	2301      	moveq	r3, #1
 8008258:	2300      	movne	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <prvGetNextExpireTime+0x44>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e001      	b.n	800827a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800827a:	68fb      	ldr	r3, [r7, #12]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20000c8c 	.word	0x20000c8c

0800828c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008294:	f7fe ff62 	bl	800715c <xTaskGetTickCount>
 8008298:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <prvSampleTimeNow+0x3c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d205      	bcs.n	80082b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082a4:	f000 f908 	bl	80084b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e002      	b.n	80082b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082b6:	4a04      	ldr	r2, [pc, #16]	; (80082c8 <prvSampleTimeNow+0x3c>)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082bc:	68fb      	ldr	r3, [r7, #12]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20000c9c 	.word	0x20000c9c

080082cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d812      	bhi.n	8008318 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d302      	bcc.n	8008306 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e01b      	b.n	800833e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <prvInsertTimerInActiveList+0x7c>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f7fd fc67 	bl	8005be4 <vListInsert>
 8008316:	e012      	b.n	800833e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d206      	bcs.n	800832e <prvInsertTimerInActiveList+0x62>
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d302      	bcc.n	800832e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008328:	2301      	movs	r3, #1
 800832a:	617b      	str	r3, [r7, #20]
 800832c:	e007      	b.n	800833e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800832e:	4b07      	ldr	r3, [pc, #28]	; (800834c <prvInsertTimerInActiveList+0x80>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3304      	adds	r3, #4
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7fd fc53 	bl	8005be4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800833e:	697b      	ldr	r3, [r7, #20]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20000c90 	.word	0x20000c90
 800834c:	20000c8c 	.word	0x20000c8c

08008350 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08e      	sub	sp, #56	; 0x38
 8008354:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008356:	e09d      	b.n	8008494 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	da18      	bge.n	8008390 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800835e:	1d3b      	adds	r3, r7, #4
 8008360:	3304      	adds	r3, #4
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	61fb      	str	r3, [r7, #28]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008386:	6850      	ldr	r0, [r2, #4]
 8008388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800838a:	6892      	ldr	r2, [r2, #8]
 800838c:	4611      	mov	r1, r2
 800838e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	db7d      	blt.n	8008492 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	3304      	adds	r3, #4
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fd fc54 	bl	8005c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083ac:	463b      	mov	r3, r7
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff ff6c 	bl	800828c <prvSampleTimeNow>
 80083b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	d86b      	bhi.n	8008494 <prvProcessReceivedCommands+0x144>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <prvProcessReceivedCommands+0x74>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083ed 	.word	0x080083ed
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	080083ed 	.word	0x080083ed
 80083d0:	08008495 	.word	0x08008495
 80083d4:	08008449 	.word	0x08008449
 80083d8:	08008481 	.word	0x08008481
 80083dc:	080083ed 	.word	0x080083ed
 80083e0:	080083ed 	.word	0x080083ed
 80083e4:	08008495 	.word	0x08008495
 80083e8:	08008449 	.word	0x08008449
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	18d1      	adds	r1, r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fa:	f7ff ff67 	bl	80082cc <prvInsertTimerInActiveList>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d047      	beq.n	8008494 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800840a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d13f      	bne.n	8008494 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	441a      	add	r2, r3
 800841c:	2300      	movs	r3, #0
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2300      	movs	r3, #0
 8008422:	2100      	movs	r1, #0
 8008424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008426:	f7ff fe1f 	bl	8008068 <xTimerGenericCommand>
 800842a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d130      	bne.n	8008494 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	61bb      	str	r3, [r7, #24]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	617b      	str	r3, [r7, #20]
}
 8008468:	bf00      	nop
 800846a:	e7fe      	b.n	800846a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	18d1      	adds	r1, r2, r3
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847a:	f7ff ff27 	bl	80082cc <prvInsertTimerInActiveList>
					break;
 800847e:	e009      	b.n	8008494 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800848a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848c:	f000 fab8 	bl	8008a00 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008490:	e000      	b.n	8008494 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008492:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008494:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <prvProcessReceivedCommands+0x164>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	1d39      	adds	r1, r7, #4
 800849a:	2200      	movs	r2, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f7fd ff43 	bl	8006328 <xQueueReceive>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f47f af57 	bne.w	8008358 <prvProcessReceivedCommands+0x8>
	}
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	3730      	adds	r7, #48	; 0x30
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000c94 	.word	0x20000c94

080084b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084be:	e045      	b.n	800854c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084c0:	4b2c      	ldr	r3, [pc, #176]	; (8008574 <prvSwitchTimerLists+0xbc>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084ca:	4b2a      	ldr	r3, [pc, #168]	; (8008574 <prvSwitchTimerLists+0xbc>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fd fbbb 	bl	8005c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d12e      	bne.n	800854c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4413      	add	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d90e      	bls.n	800851e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800850c:	4b19      	ldr	r3, [pc, #100]	; (8008574 <prvSwitchTimerLists+0xbc>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3304      	adds	r3, #4
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7fd fb64 	bl	8005be4 <vListInsert>
 800851c:	e016      	b.n	800854c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800851e:	2300      	movs	r3, #0
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	2300      	movs	r3, #0
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	2100      	movs	r1, #0
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff fd9d 	bl	8008068 <xTimerGenericCommand>
 800852e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	603b      	str	r3, [r7, #0]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800854c:	4b09      	ldr	r3, [pc, #36]	; (8008574 <prvSwitchTimerLists+0xbc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1b4      	bne.n	80084c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008556:	4b07      	ldr	r3, [pc, #28]	; (8008574 <prvSwitchTimerLists+0xbc>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <prvSwitchTimerLists+0xc0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a04      	ldr	r2, [pc, #16]	; (8008574 <prvSwitchTimerLists+0xbc>)
 8008562:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008564:	4a04      	ldr	r2, [pc, #16]	; (8008578 <prvSwitchTimerLists+0xc0>)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	6013      	str	r3, [r2, #0]
}
 800856a:	bf00      	nop
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000c8c 	.word	0x20000c8c
 8008578:	20000c90 	.word	0x20000c90

0800857c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008582:	f000 f92b 	bl	80087dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008586:	4b15      	ldr	r3, [pc, #84]	; (80085dc <prvCheckForValidListAndQueue+0x60>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d120      	bne.n	80085d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800858e:	4814      	ldr	r0, [pc, #80]	; (80085e0 <prvCheckForValidListAndQueue+0x64>)
 8008590:	f7fd fada 	bl	8005b48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008594:	4813      	ldr	r0, [pc, #76]	; (80085e4 <prvCheckForValidListAndQueue+0x68>)
 8008596:	f7fd fad7 	bl	8005b48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <prvCheckForValidListAndQueue+0x6c>)
 800859c:	4a10      	ldr	r2, [pc, #64]	; (80085e0 <prvCheckForValidListAndQueue+0x64>)
 800859e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085a0:	4b12      	ldr	r3, [pc, #72]	; (80085ec <prvCheckForValidListAndQueue+0x70>)
 80085a2:	4a10      	ldr	r2, [pc, #64]	; (80085e4 <prvCheckForValidListAndQueue+0x68>)
 80085a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085a6:	2300      	movs	r3, #0
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <prvCheckForValidListAndQueue+0x74>)
 80085ac:	4a11      	ldr	r2, [pc, #68]	; (80085f4 <prvCheckForValidListAndQueue+0x78>)
 80085ae:	2110      	movs	r1, #16
 80085b0:	200a      	movs	r0, #10
 80085b2:	f7fd fbe1 	bl	8005d78 <xQueueGenericCreateStatic>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4a08      	ldr	r2, [pc, #32]	; (80085dc <prvCheckForValidListAndQueue+0x60>)
 80085ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085bc:	4b07      	ldr	r3, [pc, #28]	; (80085dc <prvCheckForValidListAndQueue+0x60>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <prvCheckForValidListAndQueue+0x60>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	490b      	ldr	r1, [pc, #44]	; (80085f8 <prvCheckForValidListAndQueue+0x7c>)
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fa62 	bl	8006a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085d0:	f000 f934 	bl	800883c <vPortExitCritical>
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	20000c94 	.word	0x20000c94
 80085e0:	20000c64 	.word	0x20000c64
 80085e4:	20000c78 	.word	0x20000c78
 80085e8:	20000c8c 	.word	0x20000c8c
 80085ec:	20000c90 	.word	0x20000c90
 80085f0:	20000d40 	.word	0x20000d40
 80085f4:	20000ca0 	.word	0x20000ca0
 80085f8:	0800943c 	.word	0x0800943c

080085fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3b04      	subs	r3, #4
 800860c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3b04      	subs	r3, #4
 800861a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f023 0201 	bic.w	r2, r3, #1
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3b04      	subs	r3, #4
 800862a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800862c:	4a08      	ldr	r2, [pc, #32]	; (8008650 <pxPortInitialiseStack+0x54>)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3b14      	subs	r3, #20
 8008636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3b20      	subs	r3, #32
 8008642:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008644:	68fb      	ldr	r3, [r7, #12]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr
 8008650:	08008655 	.word	0x08008655

08008654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800865a:	2300      	movs	r3, #0
 800865c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <prvTaskExitError+0x54>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008666:	d00a      	beq.n	800867e <prvTaskExitError+0x2a>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	60fb      	str	r3, [r7, #12]
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <prvTaskExitError+0x28>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	60bb      	str	r3, [r7, #8]
}
 8008690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008692:	bf00      	nop
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0fc      	beq.n	8008694 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	2000001c 	.word	0x2000001c
 80086ac:	00000000 	.word	0x00000000

080086b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086b0:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <pxCurrentTCBConst2>)
 80086b2:	6819      	ldr	r1, [r3, #0]
 80086b4:	6808      	ldr	r0, [r1, #0]
 80086b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086ba:	f380 8809 	msr	PSP, r0
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f380 8811 	msr	BASEPRI, r0
 80086ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80086ce:	4770      	bx	lr

080086d0 <pxCurrentTCBConst2>:
 80086d0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop

080086d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80086d8:	4806      	ldr	r0, [pc, #24]	; (80086f4 <prvPortStartFirstTask+0x1c>)
 80086da:	6800      	ldr	r0, [r0, #0]
 80086dc:	6800      	ldr	r0, [r0, #0]
 80086de:	f380 8808 	msr	MSP, r0
 80086e2:	b662      	cpsie	i
 80086e4:	b661      	cpsie	f
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	df00      	svc	0
 80086f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086f2:	bf00      	nop
 80086f4:	e000ed08 	.word	0xe000ed08

080086f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086fe:	4b32      	ldr	r3, [pc, #200]	; (80087c8 <xPortStartScheduler+0xd0>)
 8008700:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	b2db      	uxtb	r3, r3
 8008708:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	22ff      	movs	r2, #255	; 0xff
 800870e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008720:	b2da      	uxtb	r2, r3
 8008722:	4b2a      	ldr	r3, [pc, #168]	; (80087cc <xPortStartScheduler+0xd4>)
 8008724:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008726:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008728:	2207      	movs	r2, #7
 800872a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800872c:	e009      	b.n	8008742 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800872e:	4b28      	ldr	r3, [pc, #160]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3b01      	subs	r3, #1
 8008734:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008736:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	b2db      	uxtb	r3, r3
 8008740:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874a:	2b80      	cmp	r3, #128	; 0x80
 800874c:	d0ef      	beq.n	800872e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800874e:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f1c3 0307 	rsb	r3, r3, #7
 8008756:	2b04      	cmp	r3, #4
 8008758:	d00a      	beq.n	8008770 <xPortStartScheduler+0x78>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	60bb      	str	r3, [r7, #8]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008770:	4b17      	ldr	r3, [pc, #92]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	4a16      	ldr	r2, [pc, #88]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008778:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800877a:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <xPortStartScheduler+0xd8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008782:	4a13      	ldr	r2, [pc, #76]	; (80087d0 <xPortStartScheduler+0xd8>)
 8008784:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <xPortStartScheduler+0xdc>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a10      	ldr	r2, [pc, #64]	; (80087d4 <xPortStartScheduler+0xdc>)
 8008794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800879a:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <xPortStartScheduler+0xdc>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a0d      	ldr	r2, [pc, #52]	; (80087d4 <xPortStartScheduler+0xdc>)
 80087a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087a6:	f000 f8b9 	bl	800891c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <xPortStartScheduler+0xe0>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087b0:	f7ff ff92 	bl	80086d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087b4:	f7fe fdb0 	bl	8007318 <vTaskSwitchContext>
	prvTaskExitError();
 80087b8:	f7ff ff4c 	bl	8008654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	e000e400 	.word	0xe000e400
 80087cc:	20000d90 	.word	0x20000d90
 80087d0:	20000d94 	.word	0x20000d94
 80087d4:	e000ed20 	.word	0xe000ed20
 80087d8:	2000001c 	.word	0x2000001c

080087dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	607b      	str	r3, [r7, #4]
}
 80087f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <vPortEnterCritical+0x58>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3301      	adds	r3, #1
 80087fc:	4a0d      	ldr	r2, [pc, #52]	; (8008834 <vPortEnterCritical+0x58>)
 80087fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008800:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <vPortEnterCritical+0x58>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d10f      	bne.n	8008828 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008808:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <vPortEnterCritical+0x5c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <vPortEnterCritical+0x4c>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	603b      	str	r3, [r7, #0]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <vPortEnterCritical+0x4a>
	}
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	bc80      	pop	{r7}
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	2000001c 	.word	0x2000001c
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008842:	4b11      	ldr	r3, [pc, #68]	; (8008888 <vPortExitCritical+0x4c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <vPortExitCritical+0x24>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	607b      	str	r3, [r7, #4]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <vPortExitCritical+0x4c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3b01      	subs	r3, #1
 8008866:	4a08      	ldr	r2, [pc, #32]	; (8008888 <vPortExitCritical+0x4c>)
 8008868:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <vPortExitCritical+0x4c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d105      	bne.n	800887e <vPortExitCritical+0x42>
 8008872:	2300      	movs	r3, #0
 8008874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f383 8811 	msr	BASEPRI, r3
}
 800887c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr
 8008888:	2000001c 	.word	0x2000001c
 800888c:	00000000 	.word	0x00000000

08008890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008890:	f3ef 8009 	mrs	r0, PSP
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <pxCurrentTCBConst>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088a0:	6010      	str	r0, [r2, #0]
 80088a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80088a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088aa:	f380 8811 	msr	BASEPRI, r0
 80088ae:	f7fe fd33 	bl	8007318 <vTaskSwitchContext>
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8811 	msr	BASEPRI, r0
 80088ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	6808      	ldr	r0, [r1, #0]
 80088c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088c6:	f380 8809 	msr	PSP, r0
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	4770      	bx	lr

080088d0 <pxCurrentTCBConst>:
 80088d0:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088f2:	f7fe fc53 	bl	800719c <xTaskIncrementTick>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <SysTick_Handler+0x40>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f383 8811 	msr	BASEPRI, r3
}
 800890e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <vPortSetupTimerInterrupt+0x30>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <vPortSetupTimerInterrupt+0x34>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <vPortSetupTimerInterrupt+0x38>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a09      	ldr	r2, [pc, #36]	; (8008958 <vPortSetupTimerInterrupt+0x3c>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	099b      	lsrs	r3, r3, #6
 8008938:	4a08      	ldr	r2, [pc, #32]	; (800895c <vPortSetupTimerInterrupt+0x40>)
 800893a:	3b01      	subs	r3, #1
 800893c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800893e:	4b03      	ldr	r3, [pc, #12]	; (800894c <vPortSetupTimerInterrupt+0x30>)
 8008940:	2207      	movs	r2, #7
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	e000e010 	.word	0xe000e010
 8008950:	e000e018 	.word	0xe000e018
 8008954:	20000010 	.word	0x20000010
 8008958:	10624dd3 	.word	0x10624dd3
 800895c:	e000e014 	.word	0xe000e014

08008960 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008966:	f3ef 8305 	mrs	r3, IPSR
 800896a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b0f      	cmp	r3, #15
 8008970:	d914      	bls.n	800899c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008972:	4a16      	ldr	r2, [pc, #88]	; (80089cc <vPortValidateInterruptPriority+0x6c>)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800897c:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <vPortValidateInterruptPriority+0x70>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	7afa      	ldrb	r2, [r7, #11]
 8008982:	429a      	cmp	r2, r3
 8008984:	d20a      	bcs.n	800899c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	607b      	str	r3, [r7, #4]
}
 8008998:	bf00      	nop
 800899a:	e7fe      	b.n	800899a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800899c:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <vPortValidateInterruptPriority+0x74>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <vPortValidateInterruptPriority+0x78>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d90a      	bls.n	80089c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	603b      	str	r3, [r7, #0]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <vPortValidateInterruptPriority+0x60>
	}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr
 80089cc:	e000e3f0 	.word	0xe000e3f0
 80089d0:	20000d90 	.word	0x20000d90
 80089d4:	e000ed0c 	.word	0xe000ed0c
 80089d8:	20000d94 	.word	0x20000d94

080089dc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80089e4:	f7fe fb0e 	bl	8007004 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f845 	bl	8008a78 <malloc>
 80089ee:	4603      	mov	r3, r0
 80089f0:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089f2:	f7fe fb15 	bl	8007020 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80089f6:	68fb      	ldr	r3, [r7, #12]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	if( pv )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d006      	beq.n	8008a1c <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8008a0e:	f7fe faf9 	bl	8007004 <vTaskSuspendAll>
		{
			free( pv );
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f838 	bl	8008a88 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8008a18:	f7fe fb02 	bl	8007020 <xTaskResumeAll>
	}
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <__errno>:
 8008a24:	4b01      	ldr	r3, [pc, #4]	; (8008a2c <__errno+0x8>)
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20000020 	.word	0x20000020

08008a30 <__libc_init_array>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	2600      	movs	r6, #0
 8008a34:	4d0c      	ldr	r5, [pc, #48]	; (8008a68 <__libc_init_array+0x38>)
 8008a36:	4c0d      	ldr	r4, [pc, #52]	; (8008a6c <__libc_init_array+0x3c>)
 8008a38:	1b64      	subs	r4, r4, r5
 8008a3a:	10a4      	asrs	r4, r4, #2
 8008a3c:	42a6      	cmp	r6, r4
 8008a3e:	d109      	bne.n	8008a54 <__libc_init_array+0x24>
 8008a40:	f000 fc6c 	bl	800931c <_init>
 8008a44:	2600      	movs	r6, #0
 8008a46:	4d0a      	ldr	r5, [pc, #40]	; (8008a70 <__libc_init_array+0x40>)
 8008a48:	4c0a      	ldr	r4, [pc, #40]	; (8008a74 <__libc_init_array+0x44>)
 8008a4a:	1b64      	subs	r4, r4, r5
 8008a4c:	10a4      	asrs	r4, r4, #2
 8008a4e:	42a6      	cmp	r6, r4
 8008a50:	d105      	bne.n	8008a5e <__libc_init_array+0x2e>
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a58:	4798      	blx	r3
 8008a5a:	3601      	adds	r6, #1
 8008a5c:	e7ee      	b.n	8008a3c <__libc_init_array+0xc>
 8008a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a62:	4798      	blx	r3
 8008a64:	3601      	adds	r6, #1
 8008a66:	e7f2      	b.n	8008a4e <__libc_init_array+0x1e>
 8008a68:	08009568 	.word	0x08009568
 8008a6c:	08009568 	.word	0x08009568
 8008a70:	08009568 	.word	0x08009568
 8008a74:	0800956c 	.word	0x0800956c

08008a78 <malloc>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	; (8008a84 <malloc+0xc>)
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f000 b86d 	b.w	8008b5c <_malloc_r>
 8008a82:	bf00      	nop
 8008a84:	20000020 	.word	0x20000020

08008a88 <free>:
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <free+0xc>)
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	f000 b819 	b.w	8008ac4 <_free_r>
 8008a92:	bf00      	nop
 8008a94:	20000020 	.word	0x20000020

08008a98 <memcpy>:
 8008a98:	440a      	add	r2, r1
 8008a9a:	4291      	cmp	r1, r2
 8008a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aa0:	d100      	bne.n	8008aa4 <memcpy+0xc>
 8008aa2:	4770      	bx	lr
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aaa:	4291      	cmp	r1, r2
 8008aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab0:	d1f9      	bne.n	8008aa6 <memcpy+0xe>
 8008ab2:	bd10      	pop	{r4, pc}

08008ab4 <memset>:
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4402      	add	r2, r0
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d100      	bne.n	8008abe <memset+0xa>
 8008abc:	4770      	bx	lr
 8008abe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac2:	e7f9      	b.n	8008ab8 <memset+0x4>

08008ac4 <_free_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	d043      	beq.n	8008b54 <_free_r+0x90>
 8008acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad0:	1f0c      	subs	r4, r1, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bfb8      	it	lt
 8008ad6:	18e4      	addlt	r4, r4, r3
 8008ad8:	f000 f8ca 	bl	8008c70 <__malloc_lock>
 8008adc:	4a1e      	ldr	r2, [pc, #120]	; (8008b58 <_free_r+0x94>)
 8008ade:	6813      	ldr	r3, [r2, #0]
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	b933      	cbnz	r3, 8008af2 <_free_r+0x2e>
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	6014      	str	r4, [r2, #0]
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aee:	f000 b8c5 	b.w	8008c7c <__malloc_unlock>
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	d90a      	bls.n	8008b0c <_free_r+0x48>
 8008af6:	6821      	ldr	r1, [r4, #0]
 8008af8:	1862      	adds	r2, r4, r1
 8008afa:	4293      	cmp	r3, r2
 8008afc:	bf01      	itttt	eq
 8008afe:	681a      	ldreq	r2, [r3, #0]
 8008b00:	685b      	ldreq	r3, [r3, #4]
 8008b02:	1852      	addeq	r2, r2, r1
 8008b04:	6022      	streq	r2, [r4, #0]
 8008b06:	6063      	str	r3, [r4, #4]
 8008b08:	6004      	str	r4, [r0, #0]
 8008b0a:	e7ed      	b.n	8008ae8 <_free_r+0x24>
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	b10b      	cbz	r3, 8008b16 <_free_r+0x52>
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	d9fa      	bls.n	8008b0c <_free_r+0x48>
 8008b16:	6811      	ldr	r1, [r2, #0]
 8008b18:	1850      	adds	r0, r2, r1
 8008b1a:	42a0      	cmp	r0, r4
 8008b1c:	d10b      	bne.n	8008b36 <_free_r+0x72>
 8008b1e:	6820      	ldr	r0, [r4, #0]
 8008b20:	4401      	add	r1, r0
 8008b22:	1850      	adds	r0, r2, r1
 8008b24:	4283      	cmp	r3, r0
 8008b26:	6011      	str	r1, [r2, #0]
 8008b28:	d1de      	bne.n	8008ae8 <_free_r+0x24>
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	4401      	add	r1, r0
 8008b30:	6011      	str	r1, [r2, #0]
 8008b32:	6053      	str	r3, [r2, #4]
 8008b34:	e7d8      	b.n	8008ae8 <_free_r+0x24>
 8008b36:	d902      	bls.n	8008b3e <_free_r+0x7a>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	e7d4      	b.n	8008ae8 <_free_r+0x24>
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	1821      	adds	r1, r4, r0
 8008b42:	428b      	cmp	r3, r1
 8008b44:	bf01      	itttt	eq
 8008b46:	6819      	ldreq	r1, [r3, #0]
 8008b48:	685b      	ldreq	r3, [r3, #4]
 8008b4a:	1809      	addeq	r1, r1, r0
 8008b4c:	6021      	streq	r1, [r4, #0]
 8008b4e:	6063      	str	r3, [r4, #4]
 8008b50:	6054      	str	r4, [r2, #4]
 8008b52:	e7c9      	b.n	8008ae8 <_free_r+0x24>
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	bf00      	nop
 8008b58:	20000d98 	.word	0x20000d98

08008b5c <_malloc_r>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	1ccd      	adds	r5, r1, #3
 8008b60:	f025 0503 	bic.w	r5, r5, #3
 8008b64:	3508      	adds	r5, #8
 8008b66:	2d0c      	cmp	r5, #12
 8008b68:	bf38      	it	cc
 8008b6a:	250c      	movcc	r5, #12
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	4606      	mov	r6, r0
 8008b70:	db01      	blt.n	8008b76 <_malloc_r+0x1a>
 8008b72:	42a9      	cmp	r1, r5
 8008b74:	d903      	bls.n	8008b7e <_malloc_r+0x22>
 8008b76:	230c      	movs	r3, #12
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7e:	f000 f877 	bl	8008c70 <__malloc_lock>
 8008b82:	4921      	ldr	r1, [pc, #132]	; (8008c08 <_malloc_r+0xac>)
 8008b84:	680a      	ldr	r2, [r1, #0]
 8008b86:	4614      	mov	r4, r2
 8008b88:	b99c      	cbnz	r4, 8008bb2 <_malloc_r+0x56>
 8008b8a:	4f20      	ldr	r7, [pc, #128]	; (8008c0c <_malloc_r+0xb0>)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	b923      	cbnz	r3, 8008b9a <_malloc_r+0x3e>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4630      	mov	r0, r6
 8008b94:	f000 f83c 	bl	8008c10 <_sbrk_r>
 8008b98:	6038      	str	r0, [r7, #0]
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f000 f837 	bl	8008c10 <_sbrk_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d123      	bne.n	8008bee <_malloc_r+0x92>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	4630      	mov	r0, r6
 8008baa:	6033      	str	r3, [r6, #0]
 8008bac:	f000 f866 	bl	8008c7c <__malloc_unlock>
 8008bb0:	e7e3      	b.n	8008b7a <_malloc_r+0x1e>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	1b5b      	subs	r3, r3, r5
 8008bb6:	d417      	bmi.n	8008be8 <_malloc_r+0x8c>
 8008bb8:	2b0b      	cmp	r3, #11
 8008bba:	d903      	bls.n	8008bc4 <_malloc_r+0x68>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	441c      	add	r4, r3
 8008bc0:	6025      	str	r5, [r4, #0]
 8008bc2:	e004      	b.n	8008bce <_malloc_r+0x72>
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	42a2      	cmp	r2, r4
 8008bc8:	bf0c      	ite	eq
 8008bca:	600b      	streq	r3, [r1, #0]
 8008bcc:	6053      	strne	r3, [r2, #4]
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f854 	bl	8008c7c <__malloc_unlock>
 8008bd4:	f104 000b 	add.w	r0, r4, #11
 8008bd8:	1d23      	adds	r3, r4, #4
 8008bda:	f020 0007 	bic.w	r0, r0, #7
 8008bde:	1ac2      	subs	r2, r0, r3
 8008be0:	d0cc      	beq.n	8008b7c <_malloc_r+0x20>
 8008be2:	1a1b      	subs	r3, r3, r0
 8008be4:	50a3      	str	r3, [r4, r2]
 8008be6:	e7c9      	b.n	8008b7c <_malloc_r+0x20>
 8008be8:	4622      	mov	r2, r4
 8008bea:	6864      	ldr	r4, [r4, #4]
 8008bec:	e7cc      	b.n	8008b88 <_malloc_r+0x2c>
 8008bee:	1cc4      	adds	r4, r0, #3
 8008bf0:	f024 0403 	bic.w	r4, r4, #3
 8008bf4:	42a0      	cmp	r0, r4
 8008bf6:	d0e3      	beq.n	8008bc0 <_malloc_r+0x64>
 8008bf8:	1a21      	subs	r1, r4, r0
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f000 f808 	bl	8008c10 <_sbrk_r>
 8008c00:	3001      	adds	r0, #1
 8008c02:	d1dd      	bne.n	8008bc0 <_malloc_r+0x64>
 8008c04:	e7cf      	b.n	8008ba6 <_malloc_r+0x4a>
 8008c06:	bf00      	nop
 8008c08:	20000d98 	.word	0x20000d98
 8008c0c:	20000d9c 	.word	0x20000d9c

08008c10 <_sbrk_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	2300      	movs	r3, #0
 8008c14:	4d05      	ldr	r5, [pc, #20]	; (8008c2c <_sbrk_r+0x1c>)
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	f7f9 fba6 	bl	800236c <_sbrk>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_sbrk_r+0x1a>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_sbrk_r+0x1a>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	20001084 	.word	0x20001084

08008c30 <siprintf>:
 8008c30:	b40e      	push	{r1, r2, r3}
 8008c32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c36:	b500      	push	{lr}
 8008c38:	b09c      	sub	sp, #112	; 0x70
 8008c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8008c3c:	9002      	str	r0, [sp, #8]
 8008c3e:	9006      	str	r0, [sp, #24]
 8008c40:	9107      	str	r1, [sp, #28]
 8008c42:	9104      	str	r1, [sp, #16]
 8008c44:	4808      	ldr	r0, [pc, #32]	; (8008c68 <siprintf+0x38>)
 8008c46:	4909      	ldr	r1, [pc, #36]	; (8008c6c <siprintf+0x3c>)
 8008c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4c:	9105      	str	r1, [sp, #20]
 8008c4e:	6800      	ldr	r0, [r0, #0]
 8008c50:	a902      	add	r1, sp, #8
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	f000 f874 	bl	8008d40 <_svfiprintf_r>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	9b02      	ldr	r3, [sp, #8]
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	b01c      	add	sp, #112	; 0x70
 8008c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c64:	b003      	add	sp, #12
 8008c66:	4770      	bx	lr
 8008c68:	20000020 	.word	0x20000020
 8008c6c:	ffff0208 	.word	0xffff0208

08008c70 <__malloc_lock>:
 8008c70:	4801      	ldr	r0, [pc, #4]	; (8008c78 <__malloc_lock+0x8>)
 8008c72:	f000 bafb 	b.w	800926c <__retarget_lock_acquire_recursive>
 8008c76:	bf00      	nop
 8008c78:	2000108c 	.word	0x2000108c

08008c7c <__malloc_unlock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_unlock+0x8>)
 8008c7e:	f000 baf6 	b.w	800926e <__retarget_lock_release_recursive>
 8008c82:	bf00      	nop
 8008c84:	2000108c 	.word	0x2000108c

08008c88 <__ssputs_r>:
 8008c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8c:	688e      	ldr	r6, [r1, #8]
 8008c8e:	4682      	mov	sl, r0
 8008c90:	429e      	cmp	r6, r3
 8008c92:	460c      	mov	r4, r1
 8008c94:	4690      	mov	r8, r2
 8008c96:	461f      	mov	r7, r3
 8008c98:	d838      	bhi.n	8008d0c <__ssputs_r+0x84>
 8008c9a:	898a      	ldrh	r2, [r1, #12]
 8008c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ca0:	d032      	beq.n	8008d08 <__ssputs_r+0x80>
 8008ca2:	6825      	ldr	r5, [r4, #0]
 8008ca4:	6909      	ldr	r1, [r1, #16]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	eba5 0901 	sub.w	r9, r5, r1
 8008cac:	6965      	ldr	r5, [r4, #20]
 8008cae:	444b      	add	r3, r9
 8008cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cb8:	106d      	asrs	r5, r5, #1
 8008cba:	429d      	cmp	r5, r3
 8008cbc:	bf38      	it	cc
 8008cbe:	461d      	movcc	r5, r3
 8008cc0:	0553      	lsls	r3, r2, #21
 8008cc2:	d531      	bpl.n	8008d28 <__ssputs_r+0xa0>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	f7ff ff49 	bl	8008b5c <_malloc_r>
 8008cca:	4606      	mov	r6, r0
 8008ccc:	b950      	cbnz	r0, 8008ce4 <__ssputs_r+0x5c>
 8008cce:	230c      	movs	r3, #12
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	f8ca 3000 	str.w	r3, [sl]
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce4:	464a      	mov	r2, r9
 8008ce6:	6921      	ldr	r1, [r4, #16]
 8008ce8:	f7ff fed6 	bl	8008a98 <memcpy>
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	6126      	str	r6, [r4, #16]
 8008cfa:	444e      	add	r6, r9
 8008cfc:	6026      	str	r6, [r4, #0]
 8008cfe:	463e      	mov	r6, r7
 8008d00:	6165      	str	r5, [r4, #20]
 8008d02:	eba5 0509 	sub.w	r5, r5, r9
 8008d06:	60a5      	str	r5, [r4, #8]
 8008d08:	42be      	cmp	r6, r7
 8008d0a:	d900      	bls.n	8008d0e <__ssputs_r+0x86>
 8008d0c:	463e      	mov	r6, r7
 8008d0e:	4632      	mov	r2, r6
 8008d10:	4641      	mov	r1, r8
 8008d12:	6820      	ldr	r0, [r4, #0]
 8008d14:	f000 faba 	bl	800928c <memmove>
 8008d18:	68a3      	ldr	r3, [r4, #8]
 8008d1a:	6822      	ldr	r2, [r4, #0]
 8008d1c:	1b9b      	subs	r3, r3, r6
 8008d1e:	4432      	add	r2, r6
 8008d20:	2000      	movs	r0, #0
 8008d22:	60a3      	str	r3, [r4, #8]
 8008d24:	6022      	str	r2, [r4, #0]
 8008d26:	e7db      	b.n	8008ce0 <__ssputs_r+0x58>
 8008d28:	462a      	mov	r2, r5
 8008d2a:	f000 fac9 	bl	80092c0 <_realloc_r>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d1e1      	bne.n	8008cf8 <__ssputs_r+0x70>
 8008d34:	4650      	mov	r0, sl
 8008d36:	6921      	ldr	r1, [r4, #16]
 8008d38:	f7ff fec4 	bl	8008ac4 <_free_r>
 8008d3c:	e7c7      	b.n	8008cce <__ssputs_r+0x46>
	...

08008d40 <_svfiprintf_r>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	4698      	mov	r8, r3
 8008d46:	898b      	ldrh	r3, [r1, #12]
 8008d48:	4607      	mov	r7, r0
 8008d4a:	061b      	lsls	r3, r3, #24
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	4614      	mov	r4, r2
 8008d50:	b09d      	sub	sp, #116	; 0x74
 8008d52:	d50e      	bpl.n	8008d72 <_svfiprintf_r+0x32>
 8008d54:	690b      	ldr	r3, [r1, #16]
 8008d56:	b963      	cbnz	r3, 8008d72 <_svfiprintf_r+0x32>
 8008d58:	2140      	movs	r1, #64	; 0x40
 8008d5a:	f7ff feff 	bl	8008b5c <_malloc_r>
 8008d5e:	6028      	str	r0, [r5, #0]
 8008d60:	6128      	str	r0, [r5, #16]
 8008d62:	b920      	cbnz	r0, 8008d6e <_svfiprintf_r+0x2e>
 8008d64:	230c      	movs	r3, #12
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	e0d1      	b.n	8008f12 <_svfiprintf_r+0x1d2>
 8008d6e:	2340      	movs	r3, #64	; 0x40
 8008d70:	616b      	str	r3, [r5, #20]
 8008d72:	2300      	movs	r3, #0
 8008d74:	9309      	str	r3, [sp, #36]	; 0x24
 8008d76:	2320      	movs	r3, #32
 8008d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d7c:	2330      	movs	r3, #48	; 0x30
 8008d7e:	f04f 0901 	mov.w	r9, #1
 8008d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f2c <_svfiprintf_r+0x1ec>
 8008d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d8e:	4623      	mov	r3, r4
 8008d90:	469a      	mov	sl, r3
 8008d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d96:	b10a      	cbz	r2, 8008d9c <_svfiprintf_r+0x5c>
 8008d98:	2a25      	cmp	r2, #37	; 0x25
 8008d9a:	d1f9      	bne.n	8008d90 <_svfiprintf_r+0x50>
 8008d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008da0:	d00b      	beq.n	8008dba <_svfiprintf_r+0x7a>
 8008da2:	465b      	mov	r3, fp
 8008da4:	4622      	mov	r2, r4
 8008da6:	4629      	mov	r1, r5
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7ff ff6d 	bl	8008c88 <__ssputs_r>
 8008dae:	3001      	adds	r0, #1
 8008db0:	f000 80aa 	beq.w	8008f08 <_svfiprintf_r+0x1c8>
 8008db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db6:	445a      	add	r2, fp
 8008db8:	9209      	str	r2, [sp, #36]	; 0x24
 8008dba:	f89a 3000 	ldrb.w	r3, [sl]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 80a2 	beq.w	8008f08 <_svfiprintf_r+0x1c8>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dce:	f10a 0a01 	add.w	sl, sl, #1
 8008dd2:	9304      	str	r3, [sp, #16]
 8008dd4:	9307      	str	r3, [sp, #28]
 8008dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dda:	931a      	str	r3, [sp, #104]	; 0x68
 8008ddc:	4654      	mov	r4, sl
 8008dde:	2205      	movs	r2, #5
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	4851      	ldr	r0, [pc, #324]	; (8008f2c <_svfiprintf_r+0x1ec>)
 8008de6:	f000 fa43 	bl	8009270 <memchr>
 8008dea:	9a04      	ldr	r2, [sp, #16]
 8008dec:	b9d8      	cbnz	r0, 8008e26 <_svfiprintf_r+0xe6>
 8008dee:	06d0      	lsls	r0, r2, #27
 8008df0:	bf44      	itt	mi
 8008df2:	2320      	movmi	r3, #32
 8008df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df8:	0711      	lsls	r1, r2, #28
 8008dfa:	bf44      	itt	mi
 8008dfc:	232b      	movmi	r3, #43	; 0x2b
 8008dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e02:	f89a 3000 	ldrb.w	r3, [sl]
 8008e06:	2b2a      	cmp	r3, #42	; 0x2a
 8008e08:	d015      	beq.n	8008e36 <_svfiprintf_r+0xf6>
 8008e0a:	4654      	mov	r4, sl
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	f04f 0c0a 	mov.w	ip, #10
 8008e12:	9a07      	ldr	r2, [sp, #28]
 8008e14:	4621      	mov	r1, r4
 8008e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e1a:	3b30      	subs	r3, #48	; 0x30
 8008e1c:	2b09      	cmp	r3, #9
 8008e1e:	d94e      	bls.n	8008ebe <_svfiprintf_r+0x17e>
 8008e20:	b1b0      	cbz	r0, 8008e50 <_svfiprintf_r+0x110>
 8008e22:	9207      	str	r2, [sp, #28]
 8008e24:	e014      	b.n	8008e50 <_svfiprintf_r+0x110>
 8008e26:	eba0 0308 	sub.w	r3, r0, r8
 8008e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	46a2      	mov	sl, r4
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	e7d2      	b.n	8008ddc <_svfiprintf_r+0x9c>
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	1d19      	adds	r1, r3, #4
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	9103      	str	r1, [sp, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	bfbb      	ittet	lt
 8008e42:	425b      	neglt	r3, r3
 8008e44:	f042 0202 	orrlt.w	r2, r2, #2
 8008e48:	9307      	strge	r3, [sp, #28]
 8008e4a:	9307      	strlt	r3, [sp, #28]
 8008e4c:	bfb8      	it	lt
 8008e4e:	9204      	strlt	r2, [sp, #16]
 8008e50:	7823      	ldrb	r3, [r4, #0]
 8008e52:	2b2e      	cmp	r3, #46	; 0x2e
 8008e54:	d10c      	bne.n	8008e70 <_svfiprintf_r+0x130>
 8008e56:	7863      	ldrb	r3, [r4, #1]
 8008e58:	2b2a      	cmp	r3, #42	; 0x2a
 8008e5a:	d135      	bne.n	8008ec8 <_svfiprintf_r+0x188>
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	3402      	adds	r4, #2
 8008e60:	1d1a      	adds	r2, r3, #4
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	9203      	str	r2, [sp, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bfb8      	it	lt
 8008e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e6e:	9305      	str	r3, [sp, #20]
 8008e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f3c <_svfiprintf_r+0x1fc>
 8008e74:	2203      	movs	r2, #3
 8008e76:	4650      	mov	r0, sl
 8008e78:	7821      	ldrb	r1, [r4, #0]
 8008e7a:	f000 f9f9 	bl	8009270 <memchr>
 8008e7e:	b140      	cbz	r0, 8008e92 <_svfiprintf_r+0x152>
 8008e80:	2340      	movs	r3, #64	; 0x40
 8008e82:	eba0 000a 	sub.w	r0, r0, sl
 8008e86:	fa03 f000 	lsl.w	r0, r3, r0
 8008e8a:	9b04      	ldr	r3, [sp, #16]
 8008e8c:	3401      	adds	r4, #1
 8008e8e:	4303      	orrs	r3, r0
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e96:	2206      	movs	r2, #6
 8008e98:	4825      	ldr	r0, [pc, #148]	; (8008f30 <_svfiprintf_r+0x1f0>)
 8008e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e9e:	f000 f9e7 	bl	8009270 <memchr>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d038      	beq.n	8008f18 <_svfiprintf_r+0x1d8>
 8008ea6:	4b23      	ldr	r3, [pc, #140]	; (8008f34 <_svfiprintf_r+0x1f4>)
 8008ea8:	bb1b      	cbnz	r3, 8008ef2 <_svfiprintf_r+0x1b2>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	3307      	adds	r3, #7
 8008eae:	f023 0307 	bic.w	r3, r3, #7
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	9303      	str	r3, [sp, #12]
 8008eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb8:	4433      	add	r3, r6
 8008eba:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebc:	e767      	b.n	8008d8e <_svfiprintf_r+0x4e>
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ec6:	e7a5      	b.n	8008e14 <_svfiprintf_r+0xd4>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f04f 0c0a 	mov.w	ip, #10
 8008ece:	4619      	mov	r1, r3
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	9305      	str	r3, [sp, #20]
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eda:	3a30      	subs	r2, #48	; 0x30
 8008edc:	2a09      	cmp	r2, #9
 8008ede:	d903      	bls.n	8008ee8 <_svfiprintf_r+0x1a8>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0c5      	beq.n	8008e70 <_svfiprintf_r+0x130>
 8008ee4:	9105      	str	r1, [sp, #20]
 8008ee6:	e7c3      	b.n	8008e70 <_svfiprintf_r+0x130>
 8008ee8:	4604      	mov	r4, r0
 8008eea:	2301      	movs	r3, #1
 8008eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ef0:	e7f0      	b.n	8008ed4 <_svfiprintf_r+0x194>
 8008ef2:	ab03      	add	r3, sp, #12
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4638      	mov	r0, r7
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <_svfiprintf_r+0x1f8>)
 8008efc:	a904      	add	r1, sp, #16
 8008efe:	f3af 8000 	nop.w
 8008f02:	1c42      	adds	r2, r0, #1
 8008f04:	4606      	mov	r6, r0
 8008f06:	d1d6      	bne.n	8008eb6 <_svfiprintf_r+0x176>
 8008f08:	89ab      	ldrh	r3, [r5, #12]
 8008f0a:	065b      	lsls	r3, r3, #25
 8008f0c:	f53f af2c 	bmi.w	8008d68 <_svfiprintf_r+0x28>
 8008f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f12:	b01d      	add	sp, #116	; 0x74
 8008f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	ab03      	add	r3, sp, #12
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	4638      	mov	r0, r7
 8008f20:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <_svfiprintf_r+0x1f8>)
 8008f22:	a904      	add	r1, sp, #16
 8008f24:	f000 f87c 	bl	8009020 <_printf_i>
 8008f28:	e7eb      	b.n	8008f02 <_svfiprintf_r+0x1c2>
 8008f2a:	bf00      	nop
 8008f2c:	08009534 	.word	0x08009534
 8008f30:	0800953e 	.word	0x0800953e
 8008f34:	00000000 	.word	0x00000000
 8008f38:	08008c89 	.word	0x08008c89
 8008f3c:	0800953a 	.word	0x0800953a

08008f40 <_printf_common>:
 8008f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f44:	4616      	mov	r6, r2
 8008f46:	4699      	mov	r9, r3
 8008f48:	688a      	ldr	r2, [r1, #8]
 8008f4a:	690b      	ldr	r3, [r1, #16]
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	bfb8      	it	lt
 8008f52:	4613      	movlt	r3, r2
 8008f54:	6033      	str	r3, [r6, #0]
 8008f56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f60:	b10a      	cbz	r2, 8008f66 <_printf_common+0x26>
 8008f62:	3301      	adds	r3, #1
 8008f64:	6033      	str	r3, [r6, #0]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	0699      	lsls	r1, r3, #26
 8008f6a:	bf42      	ittt	mi
 8008f6c:	6833      	ldrmi	r3, [r6, #0]
 8008f6e:	3302      	addmi	r3, #2
 8008f70:	6033      	strmi	r3, [r6, #0]
 8008f72:	6825      	ldr	r5, [r4, #0]
 8008f74:	f015 0506 	ands.w	r5, r5, #6
 8008f78:	d106      	bne.n	8008f88 <_printf_common+0x48>
 8008f7a:	f104 0a19 	add.w	sl, r4, #25
 8008f7e:	68e3      	ldr	r3, [r4, #12]
 8008f80:	6832      	ldr	r2, [r6, #0]
 8008f82:	1a9b      	subs	r3, r3, r2
 8008f84:	42ab      	cmp	r3, r5
 8008f86:	dc28      	bgt.n	8008fda <_printf_common+0x9a>
 8008f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f8c:	1e13      	subs	r3, r2, #0
 8008f8e:	6822      	ldr	r2, [r4, #0]
 8008f90:	bf18      	it	ne
 8008f92:	2301      	movne	r3, #1
 8008f94:	0692      	lsls	r2, r2, #26
 8008f96:	d42d      	bmi.n	8008ff4 <_printf_common+0xb4>
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fa0:	47c0      	blx	r8
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	d020      	beq.n	8008fe8 <_printf_common+0xa8>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	68e5      	ldr	r5, [r4, #12]
 8008faa:	f003 0306 	and.w	r3, r3, #6
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	bf18      	it	ne
 8008fb2:	2500      	movne	r5, #0
 8008fb4:	6832      	ldr	r2, [r6, #0]
 8008fb6:	f04f 0600 	mov.w	r6, #0
 8008fba:	68a3      	ldr	r3, [r4, #8]
 8008fbc:	bf08      	it	eq
 8008fbe:	1aad      	subeq	r5, r5, r2
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	bf08      	it	eq
 8008fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	bfc4      	itt	gt
 8008fcc:	1a9b      	subgt	r3, r3, r2
 8008fce:	18ed      	addgt	r5, r5, r3
 8008fd0:	341a      	adds	r4, #26
 8008fd2:	42b5      	cmp	r5, r6
 8008fd4:	d11a      	bne.n	800900c <_printf_common+0xcc>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e008      	b.n	8008fec <_printf_common+0xac>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4652      	mov	r2, sl
 8008fde:	4649      	mov	r1, r9
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	47c0      	blx	r8
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d103      	bne.n	8008ff0 <_printf_common+0xb0>
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	3501      	adds	r5, #1
 8008ff2:	e7c4      	b.n	8008f7e <_printf_common+0x3e>
 8008ff4:	2030      	movs	r0, #48	; 0x30
 8008ff6:	18e1      	adds	r1, r4, r3
 8008ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009002:	4422      	add	r2, r4
 8009004:	3302      	adds	r3, #2
 8009006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800900a:	e7c5      	b.n	8008f98 <_printf_common+0x58>
 800900c:	2301      	movs	r3, #1
 800900e:	4622      	mov	r2, r4
 8009010:	4649      	mov	r1, r9
 8009012:	4638      	mov	r0, r7
 8009014:	47c0      	blx	r8
 8009016:	3001      	adds	r0, #1
 8009018:	d0e6      	beq.n	8008fe8 <_printf_common+0xa8>
 800901a:	3601      	adds	r6, #1
 800901c:	e7d9      	b.n	8008fd2 <_printf_common+0x92>
	...

08009020 <_printf_i>:
 8009020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009024:	460c      	mov	r4, r1
 8009026:	7e27      	ldrb	r7, [r4, #24]
 8009028:	4691      	mov	r9, r2
 800902a:	2f78      	cmp	r7, #120	; 0x78
 800902c:	4680      	mov	r8, r0
 800902e:	469a      	mov	sl, r3
 8009030:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009032:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009036:	d807      	bhi.n	8009048 <_printf_i+0x28>
 8009038:	2f62      	cmp	r7, #98	; 0x62
 800903a:	d80a      	bhi.n	8009052 <_printf_i+0x32>
 800903c:	2f00      	cmp	r7, #0
 800903e:	f000 80d9 	beq.w	80091f4 <_printf_i+0x1d4>
 8009042:	2f58      	cmp	r7, #88	; 0x58
 8009044:	f000 80a4 	beq.w	8009190 <_printf_i+0x170>
 8009048:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800904c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009050:	e03a      	b.n	80090c8 <_printf_i+0xa8>
 8009052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009056:	2b15      	cmp	r3, #21
 8009058:	d8f6      	bhi.n	8009048 <_printf_i+0x28>
 800905a:	a001      	add	r0, pc, #4	; (adr r0, 8009060 <_printf_i+0x40>)
 800905c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009060:	080090b9 	.word	0x080090b9
 8009064:	080090cd 	.word	0x080090cd
 8009068:	08009049 	.word	0x08009049
 800906c:	08009049 	.word	0x08009049
 8009070:	08009049 	.word	0x08009049
 8009074:	08009049 	.word	0x08009049
 8009078:	080090cd 	.word	0x080090cd
 800907c:	08009049 	.word	0x08009049
 8009080:	08009049 	.word	0x08009049
 8009084:	08009049 	.word	0x08009049
 8009088:	08009049 	.word	0x08009049
 800908c:	080091db 	.word	0x080091db
 8009090:	080090fd 	.word	0x080090fd
 8009094:	080091bd 	.word	0x080091bd
 8009098:	08009049 	.word	0x08009049
 800909c:	08009049 	.word	0x08009049
 80090a0:	080091fd 	.word	0x080091fd
 80090a4:	08009049 	.word	0x08009049
 80090a8:	080090fd 	.word	0x080090fd
 80090ac:	08009049 	.word	0x08009049
 80090b0:	08009049 	.word	0x08009049
 80090b4:	080091c5 	.word	0x080091c5
 80090b8:	680b      	ldr	r3, [r1, #0]
 80090ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090be:	1d1a      	adds	r2, r3, #4
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	600a      	str	r2, [r1, #0]
 80090c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090c8:	2301      	movs	r3, #1
 80090ca:	e0a4      	b.n	8009216 <_printf_i+0x1f6>
 80090cc:	6825      	ldr	r5, [r4, #0]
 80090ce:	6808      	ldr	r0, [r1, #0]
 80090d0:	062e      	lsls	r6, r5, #24
 80090d2:	f100 0304 	add.w	r3, r0, #4
 80090d6:	d50a      	bpl.n	80090ee <_printf_i+0xce>
 80090d8:	6805      	ldr	r5, [r0, #0]
 80090da:	600b      	str	r3, [r1, #0]
 80090dc:	2d00      	cmp	r5, #0
 80090de:	da03      	bge.n	80090e8 <_printf_i+0xc8>
 80090e0:	232d      	movs	r3, #45	; 0x2d
 80090e2:	426d      	negs	r5, r5
 80090e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e8:	230a      	movs	r3, #10
 80090ea:	485e      	ldr	r0, [pc, #376]	; (8009264 <_printf_i+0x244>)
 80090ec:	e019      	b.n	8009122 <_printf_i+0x102>
 80090ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090f2:	6805      	ldr	r5, [r0, #0]
 80090f4:	600b      	str	r3, [r1, #0]
 80090f6:	bf18      	it	ne
 80090f8:	b22d      	sxthne	r5, r5
 80090fa:	e7ef      	b.n	80090dc <_printf_i+0xbc>
 80090fc:	680b      	ldr	r3, [r1, #0]
 80090fe:	6825      	ldr	r5, [r4, #0]
 8009100:	1d18      	adds	r0, r3, #4
 8009102:	6008      	str	r0, [r1, #0]
 8009104:	0628      	lsls	r0, r5, #24
 8009106:	d501      	bpl.n	800910c <_printf_i+0xec>
 8009108:	681d      	ldr	r5, [r3, #0]
 800910a:	e002      	b.n	8009112 <_printf_i+0xf2>
 800910c:	0669      	lsls	r1, r5, #25
 800910e:	d5fb      	bpl.n	8009108 <_printf_i+0xe8>
 8009110:	881d      	ldrh	r5, [r3, #0]
 8009112:	2f6f      	cmp	r7, #111	; 0x6f
 8009114:	bf0c      	ite	eq
 8009116:	2308      	moveq	r3, #8
 8009118:	230a      	movne	r3, #10
 800911a:	4852      	ldr	r0, [pc, #328]	; (8009264 <_printf_i+0x244>)
 800911c:	2100      	movs	r1, #0
 800911e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009122:	6866      	ldr	r6, [r4, #4]
 8009124:	2e00      	cmp	r6, #0
 8009126:	bfa8      	it	ge
 8009128:	6821      	ldrge	r1, [r4, #0]
 800912a:	60a6      	str	r6, [r4, #8]
 800912c:	bfa4      	itt	ge
 800912e:	f021 0104 	bicge.w	r1, r1, #4
 8009132:	6021      	strge	r1, [r4, #0]
 8009134:	b90d      	cbnz	r5, 800913a <_printf_i+0x11a>
 8009136:	2e00      	cmp	r6, #0
 8009138:	d04d      	beq.n	80091d6 <_printf_i+0x1b6>
 800913a:	4616      	mov	r6, r2
 800913c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009140:	fb03 5711 	mls	r7, r3, r1, r5
 8009144:	5dc7      	ldrb	r7, [r0, r7]
 8009146:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800914a:	462f      	mov	r7, r5
 800914c:	42bb      	cmp	r3, r7
 800914e:	460d      	mov	r5, r1
 8009150:	d9f4      	bls.n	800913c <_printf_i+0x11c>
 8009152:	2b08      	cmp	r3, #8
 8009154:	d10b      	bne.n	800916e <_printf_i+0x14e>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	07df      	lsls	r7, r3, #31
 800915a:	d508      	bpl.n	800916e <_printf_i+0x14e>
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	6861      	ldr	r1, [r4, #4]
 8009160:	4299      	cmp	r1, r3
 8009162:	bfde      	ittt	le
 8009164:	2330      	movle	r3, #48	; 0x30
 8009166:	f806 3c01 	strble.w	r3, [r6, #-1]
 800916a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800916e:	1b92      	subs	r2, r2, r6
 8009170:	6122      	str	r2, [r4, #16]
 8009172:	464b      	mov	r3, r9
 8009174:	4621      	mov	r1, r4
 8009176:	4640      	mov	r0, r8
 8009178:	f8cd a000 	str.w	sl, [sp]
 800917c:	aa03      	add	r2, sp, #12
 800917e:	f7ff fedf 	bl	8008f40 <_printf_common>
 8009182:	3001      	adds	r0, #1
 8009184:	d14c      	bne.n	8009220 <_printf_i+0x200>
 8009186:	f04f 30ff 	mov.w	r0, #4294967295
 800918a:	b004      	add	sp, #16
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	4834      	ldr	r0, [pc, #208]	; (8009264 <_printf_i+0x244>)
 8009192:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009196:	680e      	ldr	r6, [r1, #0]
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	f856 5b04 	ldr.w	r5, [r6], #4
 800919e:	061f      	lsls	r7, r3, #24
 80091a0:	600e      	str	r6, [r1, #0]
 80091a2:	d514      	bpl.n	80091ce <_printf_i+0x1ae>
 80091a4:	07d9      	lsls	r1, r3, #31
 80091a6:	bf44      	itt	mi
 80091a8:	f043 0320 	orrmi.w	r3, r3, #32
 80091ac:	6023      	strmi	r3, [r4, #0]
 80091ae:	b91d      	cbnz	r5, 80091b8 <_printf_i+0x198>
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	f023 0320 	bic.w	r3, r3, #32
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	2310      	movs	r3, #16
 80091ba:	e7af      	b.n	800911c <_printf_i+0xfc>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	f043 0320 	orr.w	r3, r3, #32
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	2378      	movs	r3, #120	; 0x78
 80091c6:	4828      	ldr	r0, [pc, #160]	; (8009268 <_printf_i+0x248>)
 80091c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091cc:	e7e3      	b.n	8009196 <_printf_i+0x176>
 80091ce:	065e      	lsls	r6, r3, #25
 80091d0:	bf48      	it	mi
 80091d2:	b2ad      	uxthmi	r5, r5
 80091d4:	e7e6      	b.n	80091a4 <_printf_i+0x184>
 80091d6:	4616      	mov	r6, r2
 80091d8:	e7bb      	b.n	8009152 <_printf_i+0x132>
 80091da:	680b      	ldr	r3, [r1, #0]
 80091dc:	6826      	ldr	r6, [r4, #0]
 80091de:	1d1d      	adds	r5, r3, #4
 80091e0:	6960      	ldr	r0, [r4, #20]
 80091e2:	600d      	str	r5, [r1, #0]
 80091e4:	0635      	lsls	r5, r6, #24
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	d501      	bpl.n	80091ee <_printf_i+0x1ce>
 80091ea:	6018      	str	r0, [r3, #0]
 80091ec:	e002      	b.n	80091f4 <_printf_i+0x1d4>
 80091ee:	0671      	lsls	r1, r6, #25
 80091f0:	d5fb      	bpl.n	80091ea <_printf_i+0x1ca>
 80091f2:	8018      	strh	r0, [r3, #0]
 80091f4:	2300      	movs	r3, #0
 80091f6:	4616      	mov	r6, r2
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	e7ba      	b.n	8009172 <_printf_i+0x152>
 80091fc:	680b      	ldr	r3, [r1, #0]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	600a      	str	r2, [r1, #0]
 8009202:	681e      	ldr	r6, [r3, #0]
 8009204:	2100      	movs	r1, #0
 8009206:	4630      	mov	r0, r6
 8009208:	6862      	ldr	r2, [r4, #4]
 800920a:	f000 f831 	bl	8009270 <memchr>
 800920e:	b108      	cbz	r0, 8009214 <_printf_i+0x1f4>
 8009210:	1b80      	subs	r0, r0, r6
 8009212:	6060      	str	r0, [r4, #4]
 8009214:	6863      	ldr	r3, [r4, #4]
 8009216:	6123      	str	r3, [r4, #16]
 8009218:	2300      	movs	r3, #0
 800921a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800921e:	e7a8      	b.n	8009172 <_printf_i+0x152>
 8009220:	4632      	mov	r2, r6
 8009222:	4649      	mov	r1, r9
 8009224:	4640      	mov	r0, r8
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	47d0      	blx	sl
 800922a:	3001      	adds	r0, #1
 800922c:	d0ab      	beq.n	8009186 <_printf_i+0x166>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	079b      	lsls	r3, r3, #30
 8009232:	d413      	bmi.n	800925c <_printf_i+0x23c>
 8009234:	68e0      	ldr	r0, [r4, #12]
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	4298      	cmp	r0, r3
 800923a:	bfb8      	it	lt
 800923c:	4618      	movlt	r0, r3
 800923e:	e7a4      	b.n	800918a <_printf_i+0x16a>
 8009240:	2301      	movs	r3, #1
 8009242:	4632      	mov	r2, r6
 8009244:	4649      	mov	r1, r9
 8009246:	4640      	mov	r0, r8
 8009248:	47d0      	blx	sl
 800924a:	3001      	adds	r0, #1
 800924c:	d09b      	beq.n	8009186 <_printf_i+0x166>
 800924e:	3501      	adds	r5, #1
 8009250:	68e3      	ldr	r3, [r4, #12]
 8009252:	9903      	ldr	r1, [sp, #12]
 8009254:	1a5b      	subs	r3, r3, r1
 8009256:	42ab      	cmp	r3, r5
 8009258:	dcf2      	bgt.n	8009240 <_printf_i+0x220>
 800925a:	e7eb      	b.n	8009234 <_printf_i+0x214>
 800925c:	2500      	movs	r5, #0
 800925e:	f104 0619 	add.w	r6, r4, #25
 8009262:	e7f5      	b.n	8009250 <_printf_i+0x230>
 8009264:	08009545 	.word	0x08009545
 8009268:	08009556 	.word	0x08009556

0800926c <__retarget_lock_acquire_recursive>:
 800926c:	4770      	bx	lr

0800926e <__retarget_lock_release_recursive>:
 800926e:	4770      	bx	lr

08009270 <memchr>:
 8009270:	4603      	mov	r3, r0
 8009272:	b510      	push	{r4, lr}
 8009274:	b2c9      	uxtb	r1, r1
 8009276:	4402      	add	r2, r0
 8009278:	4293      	cmp	r3, r2
 800927a:	4618      	mov	r0, r3
 800927c:	d101      	bne.n	8009282 <memchr+0x12>
 800927e:	2000      	movs	r0, #0
 8009280:	e003      	b.n	800928a <memchr+0x1a>
 8009282:	7804      	ldrb	r4, [r0, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	428c      	cmp	r4, r1
 8009288:	d1f6      	bne.n	8009278 <memchr+0x8>
 800928a:	bd10      	pop	{r4, pc}

0800928c <memmove>:
 800928c:	4288      	cmp	r0, r1
 800928e:	b510      	push	{r4, lr}
 8009290:	eb01 0402 	add.w	r4, r1, r2
 8009294:	d902      	bls.n	800929c <memmove+0x10>
 8009296:	4284      	cmp	r4, r0
 8009298:	4623      	mov	r3, r4
 800929a:	d807      	bhi.n	80092ac <memmove+0x20>
 800929c:	1e43      	subs	r3, r0, #1
 800929e:	42a1      	cmp	r1, r4
 80092a0:	d008      	beq.n	80092b4 <memmove+0x28>
 80092a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092aa:	e7f8      	b.n	800929e <memmove+0x12>
 80092ac:	4601      	mov	r1, r0
 80092ae:	4402      	add	r2, r0
 80092b0:	428a      	cmp	r2, r1
 80092b2:	d100      	bne.n	80092b6 <memmove+0x2a>
 80092b4:	bd10      	pop	{r4, pc}
 80092b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092be:	e7f7      	b.n	80092b0 <memmove+0x24>

080092c0 <_realloc_r>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	4607      	mov	r7, r0
 80092c4:	4614      	mov	r4, r2
 80092c6:	460e      	mov	r6, r1
 80092c8:	b921      	cbnz	r1, 80092d4 <_realloc_r+0x14>
 80092ca:	4611      	mov	r1, r2
 80092cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092d0:	f7ff bc44 	b.w	8008b5c <_malloc_r>
 80092d4:	b922      	cbnz	r2, 80092e0 <_realloc_r+0x20>
 80092d6:	f7ff fbf5 	bl	8008ac4 <_free_r>
 80092da:	4625      	mov	r5, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e0:	f000 f814 	bl	800930c <_malloc_usable_size_r>
 80092e4:	42a0      	cmp	r0, r4
 80092e6:	d20f      	bcs.n	8009308 <_realloc_r+0x48>
 80092e8:	4621      	mov	r1, r4
 80092ea:	4638      	mov	r0, r7
 80092ec:	f7ff fc36 	bl	8008b5c <_malloc_r>
 80092f0:	4605      	mov	r5, r0
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d0f2      	beq.n	80092dc <_realloc_r+0x1c>
 80092f6:	4631      	mov	r1, r6
 80092f8:	4622      	mov	r2, r4
 80092fa:	f7ff fbcd 	bl	8008a98 <memcpy>
 80092fe:	4631      	mov	r1, r6
 8009300:	4638      	mov	r0, r7
 8009302:	f7ff fbdf 	bl	8008ac4 <_free_r>
 8009306:	e7e9      	b.n	80092dc <_realloc_r+0x1c>
 8009308:	4635      	mov	r5, r6
 800930a:	e7e7      	b.n	80092dc <_realloc_r+0x1c>

0800930c <_malloc_usable_size_r>:
 800930c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009310:	1f18      	subs	r0, r3, #4
 8009312:	2b00      	cmp	r3, #0
 8009314:	bfbc      	itt	lt
 8009316:	580b      	ldrlt	r3, [r1, r0]
 8009318:	18c0      	addlt	r0, r0, r3
 800931a:	4770      	bx	lr

0800931c <_init>:
 800931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931e:	bf00      	nop
 8009320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009322:	bc08      	pop	{r3}
 8009324:	469e      	mov	lr, r3
 8009326:	4770      	bx	lr

08009328 <_fini>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr
